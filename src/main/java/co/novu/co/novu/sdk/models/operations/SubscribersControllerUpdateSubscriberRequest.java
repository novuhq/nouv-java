/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package co.novu.co.novu.sdk.models.operations;

import co.novu.co.novu.sdk.utils.SpeakeasyMetadata;
import co.novu.co.novu.sdk.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;

public class SubscribersControllerUpdateSubscriberRequest {

    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=subscriberId")
    private String subscriberId;

    @SpeakeasyMetadata("request:mediaType=application/json")
    private co.novu.co.novu.sdk.models.components.UpdateSubscriberRequestDto updateSubscriberRequestDto;

    @JsonCreator
    public SubscribersControllerUpdateSubscriberRequest(
            String subscriberId,
            co.novu.co.novu.sdk.models.components.UpdateSubscriberRequestDto updateSubscriberRequestDto) {
        Utils.checkNotNull(subscriberId, "subscriberId");
        Utils.checkNotNull(updateSubscriberRequestDto, "updateSubscriberRequestDto");
        this.subscriberId = subscriberId;
        this.updateSubscriberRequestDto = updateSubscriberRequestDto;
    }

    @JsonIgnore
    public String subscriberId() {
        return subscriberId;
    }

    @JsonIgnore
    public co.novu.co.novu.sdk.models.components.UpdateSubscriberRequestDto updateSubscriberRequestDto() {
        return updateSubscriberRequestDto;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public SubscribersControllerUpdateSubscriberRequest withSubscriberId(String subscriberId) {
        Utils.checkNotNull(subscriberId, "subscriberId");
        this.subscriberId = subscriberId;
        return this;
    }

    public SubscribersControllerUpdateSubscriberRequest withUpdateSubscriberRequestDto(co.novu.co.novu.sdk.models.components.UpdateSubscriberRequestDto updateSubscriberRequestDto) {
        Utils.checkNotNull(updateSubscriberRequestDto, "updateSubscriberRequestDto");
        this.updateSubscriberRequestDto = updateSubscriberRequestDto;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SubscribersControllerUpdateSubscriberRequest other = (SubscribersControllerUpdateSubscriberRequest) o;
        return 
            java.util.Objects.deepEquals(this.subscriberId, other.subscriberId) &&
            java.util.Objects.deepEquals(this.updateSubscriberRequestDto, other.updateSubscriberRequestDto);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            subscriberId,
            updateSubscriberRequestDto);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SubscribersControllerUpdateSubscriberRequest.class,
                "subscriberId", subscriberId,
                "updateSubscriberRequestDto", updateSubscriberRequestDto);
    }
    
    public final static class Builder {
 
        private String subscriberId;
 
        private co.novu.co.novu.sdk.models.components.UpdateSubscriberRequestDto updateSubscriberRequestDto;  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder subscriberId(String subscriberId) {
            Utils.checkNotNull(subscriberId, "subscriberId");
            this.subscriberId = subscriberId;
            return this;
        }

        public Builder updateSubscriberRequestDto(co.novu.co.novu.sdk.models.components.UpdateSubscriberRequestDto updateSubscriberRequestDto) {
            Utils.checkNotNull(updateSubscriberRequestDto, "updateSubscriberRequestDto");
            this.updateSubscriberRequestDto = updateSubscriberRequestDto;
            return this;
        }
        
        public SubscribersControllerUpdateSubscriberRequest build() {
            return new SubscribersControllerUpdateSubscriberRequest(
                subscriberId,
                updateSubscriberRequestDto);
        }
    }
}

