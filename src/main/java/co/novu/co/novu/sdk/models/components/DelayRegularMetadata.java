/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package co.novu.co.novu.sdk.models.components;

import co.novu.co.novu.sdk.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;

public class DelayRegularMetadata {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("amount")
    private Optional<? extends Double> amount;

    @JsonProperty("type")
    private DelayRegularMetadataType type;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("unit")
    private Optional<? extends Unit> unit;

    @JsonCreator
    public DelayRegularMetadata(
            @JsonProperty("amount") Optional<? extends Double> amount,
            @JsonProperty("type") DelayRegularMetadataType type,
            @JsonProperty("unit") Optional<? extends Unit> unit) {
        Utils.checkNotNull(amount, "amount");
        Utils.checkNotNull(type, "type");
        Utils.checkNotNull(unit, "unit");
        this.amount = amount;
        this.type = type;
        this.unit = unit;
    }
    
    public DelayRegularMetadata(
            DelayRegularMetadataType type) {
        this(Optional.empty(), type, Optional.empty());
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Double> amount() {
        return (Optional<Double>) amount;
    }

    @JsonIgnore
    public DelayRegularMetadataType type() {
        return type;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Unit> unit() {
        return (Optional<Unit>) unit;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public DelayRegularMetadata withAmount(double amount) {
        Utils.checkNotNull(amount, "amount");
        this.amount = Optional.ofNullable(amount);
        return this;
    }

    public DelayRegularMetadata withAmount(Optional<? extends Double> amount) {
        Utils.checkNotNull(amount, "amount");
        this.amount = amount;
        return this;
    }

    public DelayRegularMetadata withType(DelayRegularMetadataType type) {
        Utils.checkNotNull(type, "type");
        this.type = type;
        return this;
    }

    public DelayRegularMetadata withUnit(Unit unit) {
        Utils.checkNotNull(unit, "unit");
        this.unit = Optional.ofNullable(unit);
        return this;
    }

    public DelayRegularMetadata withUnit(Optional<? extends Unit> unit) {
        Utils.checkNotNull(unit, "unit");
        this.unit = unit;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        DelayRegularMetadata other = (DelayRegularMetadata) o;
        return 
            java.util.Objects.deepEquals(this.amount, other.amount) &&
            java.util.Objects.deepEquals(this.type, other.type) &&
            java.util.Objects.deepEquals(this.unit, other.unit);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            amount,
            type,
            unit);
    }
    
    @Override
    public String toString() {
        return Utils.toString(DelayRegularMetadata.class,
                "amount", amount,
                "type", type,
                "unit", unit);
    }
    
    public final static class Builder {
 
        private Optional<? extends Double> amount = Optional.empty();
 
        private DelayRegularMetadataType type;
 
        private Optional<? extends Unit> unit = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder amount(double amount) {
            Utils.checkNotNull(amount, "amount");
            this.amount = Optional.ofNullable(amount);
            return this;
        }

        public Builder amount(Optional<? extends Double> amount) {
            Utils.checkNotNull(amount, "amount");
            this.amount = amount;
            return this;
        }

        public Builder type(DelayRegularMetadataType type) {
            Utils.checkNotNull(type, "type");
            this.type = type;
            return this;
        }

        public Builder unit(Unit unit) {
            Utils.checkNotNull(unit, "unit");
            this.unit = Optional.ofNullable(unit);
            return this;
        }

        public Builder unit(Optional<? extends Unit> unit) {
            Utils.checkNotNull(unit, "unit");
            this.unit = unit;
            return this;
        }
        
        public DelayRegularMetadata build() {
            return new DelayRegularMetadata(
                amount,
                type,
                unit);
        }
    }
}

