/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package co.novu.co.novu.sdk.models.components;

import co.novu.co.novu.sdk.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;

public class UpdateIntegrationRequestDto {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("_environmentId")
    private Optional<? extends String> environmentId;

    /**
     * If the integration is active the validation on the credentials field will run
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("active")
    private Optional<? extends Boolean> active;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("check")
    private Optional<? extends Boolean> check;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("conditions")
    private Optional<? extends java.util.List<StepFilter>> conditions;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("credentials")
    private Optional<? extends CredentialsDto> credentials;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("identifier")
    private Optional<? extends String> identifier;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    private Optional<? extends String> name;

    @JsonCreator
    public UpdateIntegrationRequestDto(
            @JsonProperty("_environmentId") Optional<? extends String> environmentId,
            @JsonProperty("active") Optional<? extends Boolean> active,
            @JsonProperty("check") Optional<? extends Boolean> check,
            @JsonProperty("conditions") Optional<? extends java.util.List<StepFilter>> conditions,
            @JsonProperty("credentials") Optional<? extends CredentialsDto> credentials,
            @JsonProperty("identifier") Optional<? extends String> identifier,
            @JsonProperty("name") Optional<? extends String> name) {
        Utils.checkNotNull(environmentId, "environmentId");
        Utils.checkNotNull(active, "active");
        Utils.checkNotNull(check, "check");
        Utils.checkNotNull(conditions, "conditions");
        Utils.checkNotNull(credentials, "credentials");
        Utils.checkNotNull(identifier, "identifier");
        Utils.checkNotNull(name, "name");
        this.environmentId = environmentId;
        this.active = active;
        this.check = check;
        this.conditions = conditions;
        this.credentials = credentials;
        this.identifier = identifier;
        this.name = name;
    }
    
    public UpdateIntegrationRequestDto() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> environmentId() {
        return (Optional<String>) environmentId;
    }

    /**
     * If the integration is active the validation on the credentials field will run
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Boolean> active() {
        return (Optional<Boolean>) active;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Boolean> check() {
        return (Optional<Boolean>) check;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<java.util.List<StepFilter>> conditions() {
        return (Optional<java.util.List<StepFilter>>) conditions;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<CredentialsDto> credentials() {
        return (Optional<CredentialsDto>) credentials;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> identifier() {
        return (Optional<String>) identifier;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> name() {
        return (Optional<String>) name;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public UpdateIntegrationRequestDto withEnvironmentId(String environmentId) {
        Utils.checkNotNull(environmentId, "environmentId");
        this.environmentId = Optional.ofNullable(environmentId);
        return this;
    }

    public UpdateIntegrationRequestDto withEnvironmentId(Optional<? extends String> environmentId) {
        Utils.checkNotNull(environmentId, "environmentId");
        this.environmentId = environmentId;
        return this;
    }

    /**
     * If the integration is active the validation on the credentials field will run
     */
    public UpdateIntegrationRequestDto withActive(boolean active) {
        Utils.checkNotNull(active, "active");
        this.active = Optional.ofNullable(active);
        return this;
    }

    /**
     * If the integration is active the validation on the credentials field will run
     */
    public UpdateIntegrationRequestDto withActive(Optional<? extends Boolean> active) {
        Utils.checkNotNull(active, "active");
        this.active = active;
        return this;
    }

    public UpdateIntegrationRequestDto withCheck(boolean check) {
        Utils.checkNotNull(check, "check");
        this.check = Optional.ofNullable(check);
        return this;
    }

    public UpdateIntegrationRequestDto withCheck(Optional<? extends Boolean> check) {
        Utils.checkNotNull(check, "check");
        this.check = check;
        return this;
    }

    public UpdateIntegrationRequestDto withConditions(java.util.List<StepFilter> conditions) {
        Utils.checkNotNull(conditions, "conditions");
        this.conditions = Optional.ofNullable(conditions);
        return this;
    }

    public UpdateIntegrationRequestDto withConditions(Optional<? extends java.util.List<StepFilter>> conditions) {
        Utils.checkNotNull(conditions, "conditions");
        this.conditions = conditions;
        return this;
    }

    public UpdateIntegrationRequestDto withCredentials(CredentialsDto credentials) {
        Utils.checkNotNull(credentials, "credentials");
        this.credentials = Optional.ofNullable(credentials);
        return this;
    }

    public UpdateIntegrationRequestDto withCredentials(Optional<? extends CredentialsDto> credentials) {
        Utils.checkNotNull(credentials, "credentials");
        this.credentials = credentials;
        return this;
    }

    public UpdateIntegrationRequestDto withIdentifier(String identifier) {
        Utils.checkNotNull(identifier, "identifier");
        this.identifier = Optional.ofNullable(identifier);
        return this;
    }

    public UpdateIntegrationRequestDto withIdentifier(Optional<? extends String> identifier) {
        Utils.checkNotNull(identifier, "identifier");
        this.identifier = identifier;
        return this;
    }

    public UpdateIntegrationRequestDto withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = Optional.ofNullable(name);
        return this;
    }

    public UpdateIntegrationRequestDto withName(Optional<? extends String> name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        UpdateIntegrationRequestDto other = (UpdateIntegrationRequestDto) o;
        return 
            java.util.Objects.deepEquals(this.environmentId, other.environmentId) &&
            java.util.Objects.deepEquals(this.active, other.active) &&
            java.util.Objects.deepEquals(this.check, other.check) &&
            java.util.Objects.deepEquals(this.conditions, other.conditions) &&
            java.util.Objects.deepEquals(this.credentials, other.credentials) &&
            java.util.Objects.deepEquals(this.identifier, other.identifier) &&
            java.util.Objects.deepEquals(this.name, other.name);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            environmentId,
            active,
            check,
            conditions,
            credentials,
            identifier,
            name);
    }
    
    @Override
    public String toString() {
        return Utils.toString(UpdateIntegrationRequestDto.class,
                "environmentId", environmentId,
                "active", active,
                "check", check,
                "conditions", conditions,
                "credentials", credentials,
                "identifier", identifier,
                "name", name);
    }
    
    public final static class Builder {
 
        private Optional<? extends String> environmentId = Optional.empty();
 
        private Optional<? extends Boolean> active = Optional.empty();
 
        private Optional<? extends Boolean> check = Optional.empty();
 
        private Optional<? extends java.util.List<StepFilter>> conditions = Optional.empty();
 
        private Optional<? extends CredentialsDto> credentials = Optional.empty();
 
        private Optional<? extends String> identifier = Optional.empty();
 
        private Optional<? extends String> name = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder environmentId(String environmentId) {
            Utils.checkNotNull(environmentId, "environmentId");
            this.environmentId = Optional.ofNullable(environmentId);
            return this;
        }

        public Builder environmentId(Optional<? extends String> environmentId) {
            Utils.checkNotNull(environmentId, "environmentId");
            this.environmentId = environmentId;
            return this;
        }

        /**
         * If the integration is active the validation on the credentials field will run
         */
        public Builder active(boolean active) {
            Utils.checkNotNull(active, "active");
            this.active = Optional.ofNullable(active);
            return this;
        }

        /**
         * If the integration is active the validation on the credentials field will run
         */
        public Builder active(Optional<? extends Boolean> active) {
            Utils.checkNotNull(active, "active");
            this.active = active;
            return this;
        }

        public Builder check(boolean check) {
            Utils.checkNotNull(check, "check");
            this.check = Optional.ofNullable(check);
            return this;
        }

        public Builder check(Optional<? extends Boolean> check) {
            Utils.checkNotNull(check, "check");
            this.check = check;
            return this;
        }

        public Builder conditions(java.util.List<StepFilter> conditions) {
            Utils.checkNotNull(conditions, "conditions");
            this.conditions = Optional.ofNullable(conditions);
            return this;
        }

        public Builder conditions(Optional<? extends java.util.List<StepFilter>> conditions) {
            Utils.checkNotNull(conditions, "conditions");
            this.conditions = conditions;
            return this;
        }

        public Builder credentials(CredentialsDto credentials) {
            Utils.checkNotNull(credentials, "credentials");
            this.credentials = Optional.ofNullable(credentials);
            return this;
        }

        public Builder credentials(Optional<? extends CredentialsDto> credentials) {
            Utils.checkNotNull(credentials, "credentials");
            this.credentials = credentials;
            return this;
        }

        public Builder identifier(String identifier) {
            Utils.checkNotNull(identifier, "identifier");
            this.identifier = Optional.ofNullable(identifier);
            return this;
        }

        public Builder identifier(Optional<? extends String> identifier) {
            Utils.checkNotNull(identifier, "identifier");
            this.identifier = identifier;
            return this;
        }

        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = Optional.ofNullable(name);
            return this;
        }

        public Builder name(Optional<? extends String> name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }
        
        public UpdateIntegrationRequestDto build() {
            return new UpdateIntegrationRequestDto(
                environmentId,
                active,
                check,
                conditions,
                credentials,
                identifier,
                name);
        }
    }
}

