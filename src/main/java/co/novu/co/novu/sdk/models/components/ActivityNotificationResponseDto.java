/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package co.novu.co.novu.sdk.models.components;

import co.novu.co.novu.sdk.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;

public class ActivityNotificationResponseDto {

    @JsonProperty("_environmentId")
    private String environmentId;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("_id")
    private Optional<? extends String> id;

    @JsonProperty("_organizationId")
    private String organizationId;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("channels")
    private Optional<? extends ActivityNotificationResponseDtoChannels> channels;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("createdAt")
    private Optional<? extends String> createdAt;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("jobs")
    private Optional<? extends java.util.List<ActivityNotificationJobResponseDto>> jobs;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("subscriber")
    private Optional<? extends ActivityNotificationSubscriberResponseDto> subscriber;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("template")
    private Optional<? extends ActivityNotificationTemplateResponseDto> template;

    @JsonProperty("transactionId")
    private String transactionId;

    @JsonCreator
    public ActivityNotificationResponseDto(
            @JsonProperty("_environmentId") String environmentId,
            @JsonProperty("_id") Optional<? extends String> id,
            @JsonProperty("_organizationId") String organizationId,
            @JsonProperty("channels") Optional<? extends ActivityNotificationResponseDtoChannels> channels,
            @JsonProperty("createdAt") Optional<? extends String> createdAt,
            @JsonProperty("jobs") Optional<? extends java.util.List<ActivityNotificationJobResponseDto>> jobs,
            @JsonProperty("subscriber") Optional<? extends ActivityNotificationSubscriberResponseDto> subscriber,
            @JsonProperty("template") Optional<? extends ActivityNotificationTemplateResponseDto> template,
            @JsonProperty("transactionId") String transactionId) {
        Utils.checkNotNull(environmentId, "environmentId");
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(organizationId, "organizationId");
        Utils.checkNotNull(channels, "channels");
        Utils.checkNotNull(createdAt, "createdAt");
        Utils.checkNotNull(jobs, "jobs");
        Utils.checkNotNull(subscriber, "subscriber");
        Utils.checkNotNull(template, "template");
        Utils.checkNotNull(transactionId, "transactionId");
        this.environmentId = environmentId;
        this.id = id;
        this.organizationId = organizationId;
        this.channels = channels;
        this.createdAt = createdAt;
        this.jobs = jobs;
        this.subscriber = subscriber;
        this.template = template;
        this.transactionId = transactionId;
    }
    
    public ActivityNotificationResponseDto(
            String environmentId,
            String organizationId,
            String transactionId) {
        this(environmentId, Optional.empty(), organizationId, Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), transactionId);
    }

    @JsonIgnore
    public String environmentId() {
        return environmentId;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> id() {
        return (Optional<String>) id;
    }

    @JsonIgnore
    public String organizationId() {
        return organizationId;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<ActivityNotificationResponseDtoChannels> channels() {
        return (Optional<ActivityNotificationResponseDtoChannels>) channels;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> createdAt() {
        return (Optional<String>) createdAt;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<java.util.List<ActivityNotificationJobResponseDto>> jobs() {
        return (Optional<java.util.List<ActivityNotificationJobResponseDto>>) jobs;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<ActivityNotificationSubscriberResponseDto> subscriber() {
        return (Optional<ActivityNotificationSubscriberResponseDto>) subscriber;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<ActivityNotificationTemplateResponseDto> template() {
        return (Optional<ActivityNotificationTemplateResponseDto>) template;
    }

    @JsonIgnore
    public String transactionId() {
        return transactionId;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public ActivityNotificationResponseDto withEnvironmentId(String environmentId) {
        Utils.checkNotNull(environmentId, "environmentId");
        this.environmentId = environmentId;
        return this;
    }

    public ActivityNotificationResponseDto withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = Optional.ofNullable(id);
        return this;
    }

    public ActivityNotificationResponseDto withId(Optional<? extends String> id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    public ActivityNotificationResponseDto withOrganizationId(String organizationId) {
        Utils.checkNotNull(organizationId, "organizationId");
        this.organizationId = organizationId;
        return this;
    }

    public ActivityNotificationResponseDto withChannels(ActivityNotificationResponseDtoChannels channels) {
        Utils.checkNotNull(channels, "channels");
        this.channels = Optional.ofNullable(channels);
        return this;
    }

    public ActivityNotificationResponseDto withChannels(Optional<? extends ActivityNotificationResponseDtoChannels> channels) {
        Utils.checkNotNull(channels, "channels");
        this.channels = channels;
        return this;
    }

    public ActivityNotificationResponseDto withCreatedAt(String createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = Optional.ofNullable(createdAt);
        return this;
    }

    public ActivityNotificationResponseDto withCreatedAt(Optional<? extends String> createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = createdAt;
        return this;
    }

    public ActivityNotificationResponseDto withJobs(java.util.List<ActivityNotificationJobResponseDto> jobs) {
        Utils.checkNotNull(jobs, "jobs");
        this.jobs = Optional.ofNullable(jobs);
        return this;
    }

    public ActivityNotificationResponseDto withJobs(Optional<? extends java.util.List<ActivityNotificationJobResponseDto>> jobs) {
        Utils.checkNotNull(jobs, "jobs");
        this.jobs = jobs;
        return this;
    }

    public ActivityNotificationResponseDto withSubscriber(ActivityNotificationSubscriberResponseDto subscriber) {
        Utils.checkNotNull(subscriber, "subscriber");
        this.subscriber = Optional.ofNullable(subscriber);
        return this;
    }

    public ActivityNotificationResponseDto withSubscriber(Optional<? extends ActivityNotificationSubscriberResponseDto> subscriber) {
        Utils.checkNotNull(subscriber, "subscriber");
        this.subscriber = subscriber;
        return this;
    }

    public ActivityNotificationResponseDto withTemplate(ActivityNotificationTemplateResponseDto template) {
        Utils.checkNotNull(template, "template");
        this.template = Optional.ofNullable(template);
        return this;
    }

    public ActivityNotificationResponseDto withTemplate(Optional<? extends ActivityNotificationTemplateResponseDto> template) {
        Utils.checkNotNull(template, "template");
        this.template = template;
        return this;
    }

    public ActivityNotificationResponseDto withTransactionId(String transactionId) {
        Utils.checkNotNull(transactionId, "transactionId");
        this.transactionId = transactionId;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ActivityNotificationResponseDto other = (ActivityNotificationResponseDto) o;
        return 
            java.util.Objects.deepEquals(this.environmentId, other.environmentId) &&
            java.util.Objects.deepEquals(this.id, other.id) &&
            java.util.Objects.deepEquals(this.organizationId, other.organizationId) &&
            java.util.Objects.deepEquals(this.channels, other.channels) &&
            java.util.Objects.deepEquals(this.createdAt, other.createdAt) &&
            java.util.Objects.deepEquals(this.jobs, other.jobs) &&
            java.util.Objects.deepEquals(this.subscriber, other.subscriber) &&
            java.util.Objects.deepEquals(this.template, other.template) &&
            java.util.Objects.deepEquals(this.transactionId, other.transactionId);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            environmentId,
            id,
            organizationId,
            channels,
            createdAt,
            jobs,
            subscriber,
            template,
            transactionId);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ActivityNotificationResponseDto.class,
                "environmentId", environmentId,
                "id", id,
                "organizationId", organizationId,
                "channels", channels,
                "createdAt", createdAt,
                "jobs", jobs,
                "subscriber", subscriber,
                "template", template,
                "transactionId", transactionId);
    }
    
    public final static class Builder {
 
        private String environmentId;
 
        private Optional<? extends String> id = Optional.empty();
 
        private String organizationId;
 
        private Optional<? extends ActivityNotificationResponseDtoChannels> channels = Optional.empty();
 
        private Optional<? extends String> createdAt = Optional.empty();
 
        private Optional<? extends java.util.List<ActivityNotificationJobResponseDto>> jobs = Optional.empty();
 
        private Optional<? extends ActivityNotificationSubscriberResponseDto> subscriber = Optional.empty();
 
        private Optional<? extends ActivityNotificationTemplateResponseDto> template = Optional.empty();
 
        private String transactionId;  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder environmentId(String environmentId) {
            Utils.checkNotNull(environmentId, "environmentId");
            this.environmentId = environmentId;
            return this;
        }

        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = Optional.ofNullable(id);
            return this;
        }

        public Builder id(Optional<? extends String> id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        public Builder organizationId(String organizationId) {
            Utils.checkNotNull(organizationId, "organizationId");
            this.organizationId = organizationId;
            return this;
        }

        public Builder channels(ActivityNotificationResponseDtoChannels channels) {
            Utils.checkNotNull(channels, "channels");
            this.channels = Optional.ofNullable(channels);
            return this;
        }

        public Builder channels(Optional<? extends ActivityNotificationResponseDtoChannels> channels) {
            Utils.checkNotNull(channels, "channels");
            this.channels = channels;
            return this;
        }

        public Builder createdAt(String createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = Optional.ofNullable(createdAt);
            return this;
        }

        public Builder createdAt(Optional<? extends String> createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = createdAt;
            return this;
        }

        public Builder jobs(java.util.List<ActivityNotificationJobResponseDto> jobs) {
            Utils.checkNotNull(jobs, "jobs");
            this.jobs = Optional.ofNullable(jobs);
            return this;
        }

        public Builder jobs(Optional<? extends java.util.List<ActivityNotificationJobResponseDto>> jobs) {
            Utils.checkNotNull(jobs, "jobs");
            this.jobs = jobs;
            return this;
        }

        public Builder subscriber(ActivityNotificationSubscriberResponseDto subscriber) {
            Utils.checkNotNull(subscriber, "subscriber");
            this.subscriber = Optional.ofNullable(subscriber);
            return this;
        }

        public Builder subscriber(Optional<? extends ActivityNotificationSubscriberResponseDto> subscriber) {
            Utils.checkNotNull(subscriber, "subscriber");
            this.subscriber = subscriber;
            return this;
        }

        public Builder template(ActivityNotificationTemplateResponseDto template) {
            Utils.checkNotNull(template, "template");
            this.template = Optional.ofNullable(template);
            return this;
        }

        public Builder template(Optional<? extends ActivityNotificationTemplateResponseDto> template) {
            Utils.checkNotNull(template, "template");
            this.template = template;
            return this;
        }

        public Builder transactionId(String transactionId) {
            Utils.checkNotNull(transactionId, "transactionId");
            this.transactionId = transactionId;
            return this;
        }
        
        public ActivityNotificationResponseDto build() {
            return new ActivityNotificationResponseDto(
                environmentId,
                id,
                organizationId,
                channels,
                createdAt,
                jobs,
                subscriber,
                template,
                transactionId);
        }
    }
}

