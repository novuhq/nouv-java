/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package co.novu.co.novu.sdk.models.operations;

import co.novu.co.novu.sdk.utils.SpeakeasyMetadata;
import co.novu.co.novu.sdk.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;

public class IntegrationsControllerUpdateIntegrationByIdRequest {

    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=integrationId")
    private String integrationId;

    @SpeakeasyMetadata("request:mediaType=application/json")
    private co.novu.co.novu.sdk.models.components.UpdateIntegrationRequestDto updateIntegrationRequestDto;

    @JsonCreator
    public IntegrationsControllerUpdateIntegrationByIdRequest(
            String integrationId,
            co.novu.co.novu.sdk.models.components.UpdateIntegrationRequestDto updateIntegrationRequestDto) {
        Utils.checkNotNull(integrationId, "integrationId");
        Utils.checkNotNull(updateIntegrationRequestDto, "updateIntegrationRequestDto");
        this.integrationId = integrationId;
        this.updateIntegrationRequestDto = updateIntegrationRequestDto;
    }

    @JsonIgnore
    public String integrationId() {
        return integrationId;
    }

    @JsonIgnore
    public co.novu.co.novu.sdk.models.components.UpdateIntegrationRequestDto updateIntegrationRequestDto() {
        return updateIntegrationRequestDto;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public IntegrationsControllerUpdateIntegrationByIdRequest withIntegrationId(String integrationId) {
        Utils.checkNotNull(integrationId, "integrationId");
        this.integrationId = integrationId;
        return this;
    }

    public IntegrationsControllerUpdateIntegrationByIdRequest withUpdateIntegrationRequestDto(co.novu.co.novu.sdk.models.components.UpdateIntegrationRequestDto updateIntegrationRequestDto) {
        Utils.checkNotNull(updateIntegrationRequestDto, "updateIntegrationRequestDto");
        this.updateIntegrationRequestDto = updateIntegrationRequestDto;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        IntegrationsControllerUpdateIntegrationByIdRequest other = (IntegrationsControllerUpdateIntegrationByIdRequest) o;
        return 
            java.util.Objects.deepEquals(this.integrationId, other.integrationId) &&
            java.util.Objects.deepEquals(this.updateIntegrationRequestDto, other.updateIntegrationRequestDto);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            integrationId,
            updateIntegrationRequestDto);
    }
    
    @Override
    public String toString() {
        return Utils.toString(IntegrationsControllerUpdateIntegrationByIdRequest.class,
                "integrationId", integrationId,
                "updateIntegrationRequestDto", updateIntegrationRequestDto);
    }
    
    public final static class Builder {
 
        private String integrationId;
 
        private co.novu.co.novu.sdk.models.components.UpdateIntegrationRequestDto updateIntegrationRequestDto;  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder integrationId(String integrationId) {
            Utils.checkNotNull(integrationId, "integrationId");
            this.integrationId = integrationId;
            return this;
        }

        public Builder updateIntegrationRequestDto(co.novu.co.novu.sdk.models.components.UpdateIntegrationRequestDto updateIntegrationRequestDto) {
            Utils.checkNotNull(updateIntegrationRequestDto, "updateIntegrationRequestDto");
            this.updateIntegrationRequestDto = updateIntegrationRequestDto;
            return this;
        }
        
        public IntegrationsControllerUpdateIntegrationByIdRequest build() {
            return new IntegrationsControllerUpdateIntegrationByIdRequest(
                integrationId,
                updateIntegrationRequestDto);
        }
    }
}

