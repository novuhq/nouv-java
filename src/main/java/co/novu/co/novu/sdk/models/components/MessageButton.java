/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package co.novu.co.novu.sdk.models.components;

import co.novu.co.novu.sdk.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;

public class MessageButton {

    @JsonProperty("content")
    private String content;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("resultContent")
    private Optional<? extends String> resultContent;

    @JsonProperty("type")
    private MessageButtonType type;

    @JsonCreator
    public MessageButton(
            @JsonProperty("content") String content,
            @JsonProperty("resultContent") Optional<? extends String> resultContent,
            @JsonProperty("type") MessageButtonType type) {
        Utils.checkNotNull(content, "content");
        Utils.checkNotNull(resultContent, "resultContent");
        Utils.checkNotNull(type, "type");
        this.content = content;
        this.resultContent = resultContent;
        this.type = type;
    }
    
    public MessageButton(
            String content,
            MessageButtonType type) {
        this(content, Optional.empty(), type);
    }

    @JsonIgnore
    public String content() {
        return content;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> resultContent() {
        return (Optional<String>) resultContent;
    }

    @JsonIgnore
    public MessageButtonType type() {
        return type;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public MessageButton withContent(String content) {
        Utils.checkNotNull(content, "content");
        this.content = content;
        return this;
    }

    public MessageButton withResultContent(String resultContent) {
        Utils.checkNotNull(resultContent, "resultContent");
        this.resultContent = Optional.ofNullable(resultContent);
        return this;
    }

    public MessageButton withResultContent(Optional<? extends String> resultContent) {
        Utils.checkNotNull(resultContent, "resultContent");
        this.resultContent = resultContent;
        return this;
    }

    public MessageButton withType(MessageButtonType type) {
        Utils.checkNotNull(type, "type");
        this.type = type;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        MessageButton other = (MessageButton) o;
        return 
            java.util.Objects.deepEquals(this.content, other.content) &&
            java.util.Objects.deepEquals(this.resultContent, other.resultContent) &&
            java.util.Objects.deepEquals(this.type, other.type);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            content,
            resultContent,
            type);
    }
    
    @Override
    public String toString() {
        return Utils.toString(MessageButton.class,
                "content", content,
                "resultContent", resultContent,
                "type", type);
    }
    
    public final static class Builder {
 
        private String content;
 
        private Optional<? extends String> resultContent = Optional.empty();
 
        private MessageButtonType type;  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder content(String content) {
            Utils.checkNotNull(content, "content");
            this.content = content;
            return this;
        }

        public Builder resultContent(String resultContent) {
            Utils.checkNotNull(resultContent, "resultContent");
            this.resultContent = Optional.ofNullable(resultContent);
            return this;
        }

        public Builder resultContent(Optional<? extends String> resultContent) {
            Utils.checkNotNull(resultContent, "resultContent");
            this.resultContent = resultContent;
            return this;
        }

        public Builder type(MessageButtonType type) {
            Utils.checkNotNull(type, "type");
            this.type = type;
            return this;
        }
        
        public MessageButton build() {
            return new MessageButton(
                content,
                resultContent,
                type);
        }
    }
}

