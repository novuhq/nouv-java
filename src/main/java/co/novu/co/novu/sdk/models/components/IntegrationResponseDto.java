/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package co.novu.co.novu.sdk.models.components;

import co.novu.co.novu.sdk.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;

public class IntegrationResponseDto {

    @JsonProperty("_environmentId")
    private String environmentId;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("_id")
    private Optional<? extends String> id;

    @JsonProperty("_organizationId")
    private String organizationId;

    @JsonProperty("active")
    private boolean active;

    @JsonProperty("channel")
    private IntegrationResponseDtoChannel channel;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("conditions")
    private Optional<? extends java.util.List<StepFilter>> conditions;

    @JsonProperty("credentials")
    private CredentialsDto credentials;

    @JsonProperty("deleted")
    private boolean deleted;

    @JsonProperty("deletedAt")
    private String deletedAt;

    @JsonProperty("deletedBy")
    private String deletedBy;

    @JsonProperty("identifier")
    private String identifier;

    @JsonProperty("name")
    private String name;

    @JsonProperty("primary")
    private boolean primary;

    @JsonProperty("providerId")
    private String providerId;

    @JsonCreator
    public IntegrationResponseDto(
            @JsonProperty("_environmentId") String environmentId,
            @JsonProperty("_id") Optional<? extends String> id,
            @JsonProperty("_organizationId") String organizationId,
            @JsonProperty("active") boolean active,
            @JsonProperty("channel") IntegrationResponseDtoChannel channel,
            @JsonProperty("conditions") Optional<? extends java.util.List<StepFilter>> conditions,
            @JsonProperty("credentials") CredentialsDto credentials,
            @JsonProperty("deleted") boolean deleted,
            @JsonProperty("deletedAt") String deletedAt,
            @JsonProperty("deletedBy") String deletedBy,
            @JsonProperty("identifier") String identifier,
            @JsonProperty("name") String name,
            @JsonProperty("primary") boolean primary,
            @JsonProperty("providerId") String providerId) {
        Utils.checkNotNull(environmentId, "environmentId");
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(organizationId, "organizationId");
        Utils.checkNotNull(active, "active");
        Utils.checkNotNull(channel, "channel");
        Utils.checkNotNull(conditions, "conditions");
        Utils.checkNotNull(credentials, "credentials");
        Utils.checkNotNull(deleted, "deleted");
        Utils.checkNotNull(deletedAt, "deletedAt");
        Utils.checkNotNull(deletedBy, "deletedBy");
        Utils.checkNotNull(identifier, "identifier");
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(primary, "primary");
        Utils.checkNotNull(providerId, "providerId");
        this.environmentId = environmentId;
        this.id = id;
        this.organizationId = organizationId;
        this.active = active;
        this.channel = channel;
        this.conditions = conditions;
        this.credentials = credentials;
        this.deleted = deleted;
        this.deletedAt = deletedAt;
        this.deletedBy = deletedBy;
        this.identifier = identifier;
        this.name = name;
        this.primary = primary;
        this.providerId = providerId;
    }
    
    public IntegrationResponseDto(
            String environmentId,
            String organizationId,
            boolean active,
            IntegrationResponseDtoChannel channel,
            CredentialsDto credentials,
            boolean deleted,
            String deletedAt,
            String deletedBy,
            String identifier,
            String name,
            boolean primary,
            String providerId) {
        this(environmentId, Optional.empty(), organizationId, active, channel, Optional.empty(), credentials, deleted, deletedAt, deletedBy, identifier, name, primary, providerId);
    }

    @JsonIgnore
    public String environmentId() {
        return environmentId;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> id() {
        return (Optional<String>) id;
    }

    @JsonIgnore
    public String organizationId() {
        return organizationId;
    }

    @JsonIgnore
    public boolean active() {
        return active;
    }

    @JsonIgnore
    public IntegrationResponseDtoChannel channel() {
        return channel;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<java.util.List<StepFilter>> conditions() {
        return (Optional<java.util.List<StepFilter>>) conditions;
    }

    @JsonIgnore
    public CredentialsDto credentials() {
        return credentials;
    }

    @JsonIgnore
    public boolean deleted() {
        return deleted;
    }

    @JsonIgnore
    public String deletedAt() {
        return deletedAt;
    }

    @JsonIgnore
    public String deletedBy() {
        return deletedBy;
    }

    @JsonIgnore
    public String identifier() {
        return identifier;
    }

    @JsonIgnore
    public String name() {
        return name;
    }

    @JsonIgnore
    public boolean primary() {
        return primary;
    }

    @JsonIgnore
    public String providerId() {
        return providerId;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public IntegrationResponseDto withEnvironmentId(String environmentId) {
        Utils.checkNotNull(environmentId, "environmentId");
        this.environmentId = environmentId;
        return this;
    }

    public IntegrationResponseDto withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = Optional.ofNullable(id);
        return this;
    }

    public IntegrationResponseDto withId(Optional<? extends String> id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    public IntegrationResponseDto withOrganizationId(String organizationId) {
        Utils.checkNotNull(organizationId, "organizationId");
        this.organizationId = organizationId;
        return this;
    }

    public IntegrationResponseDto withActive(boolean active) {
        Utils.checkNotNull(active, "active");
        this.active = active;
        return this;
    }

    public IntegrationResponseDto withChannel(IntegrationResponseDtoChannel channel) {
        Utils.checkNotNull(channel, "channel");
        this.channel = channel;
        return this;
    }

    public IntegrationResponseDto withConditions(java.util.List<StepFilter> conditions) {
        Utils.checkNotNull(conditions, "conditions");
        this.conditions = Optional.ofNullable(conditions);
        return this;
    }

    public IntegrationResponseDto withConditions(Optional<? extends java.util.List<StepFilter>> conditions) {
        Utils.checkNotNull(conditions, "conditions");
        this.conditions = conditions;
        return this;
    }

    public IntegrationResponseDto withCredentials(CredentialsDto credentials) {
        Utils.checkNotNull(credentials, "credentials");
        this.credentials = credentials;
        return this;
    }

    public IntegrationResponseDto withDeleted(boolean deleted) {
        Utils.checkNotNull(deleted, "deleted");
        this.deleted = deleted;
        return this;
    }

    public IntegrationResponseDto withDeletedAt(String deletedAt) {
        Utils.checkNotNull(deletedAt, "deletedAt");
        this.deletedAt = deletedAt;
        return this;
    }

    public IntegrationResponseDto withDeletedBy(String deletedBy) {
        Utils.checkNotNull(deletedBy, "deletedBy");
        this.deletedBy = deletedBy;
        return this;
    }

    public IntegrationResponseDto withIdentifier(String identifier) {
        Utils.checkNotNull(identifier, "identifier");
        this.identifier = identifier;
        return this;
    }

    public IntegrationResponseDto withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    public IntegrationResponseDto withPrimary(boolean primary) {
        Utils.checkNotNull(primary, "primary");
        this.primary = primary;
        return this;
    }

    public IntegrationResponseDto withProviderId(String providerId) {
        Utils.checkNotNull(providerId, "providerId");
        this.providerId = providerId;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        IntegrationResponseDto other = (IntegrationResponseDto) o;
        return 
            java.util.Objects.deepEquals(this.environmentId, other.environmentId) &&
            java.util.Objects.deepEquals(this.id, other.id) &&
            java.util.Objects.deepEquals(this.organizationId, other.organizationId) &&
            java.util.Objects.deepEquals(this.active, other.active) &&
            java.util.Objects.deepEquals(this.channel, other.channel) &&
            java.util.Objects.deepEquals(this.conditions, other.conditions) &&
            java.util.Objects.deepEquals(this.credentials, other.credentials) &&
            java.util.Objects.deepEquals(this.deleted, other.deleted) &&
            java.util.Objects.deepEquals(this.deletedAt, other.deletedAt) &&
            java.util.Objects.deepEquals(this.deletedBy, other.deletedBy) &&
            java.util.Objects.deepEquals(this.identifier, other.identifier) &&
            java.util.Objects.deepEquals(this.name, other.name) &&
            java.util.Objects.deepEquals(this.primary, other.primary) &&
            java.util.Objects.deepEquals(this.providerId, other.providerId);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            environmentId,
            id,
            organizationId,
            active,
            channel,
            conditions,
            credentials,
            deleted,
            deletedAt,
            deletedBy,
            identifier,
            name,
            primary,
            providerId);
    }
    
    @Override
    public String toString() {
        return Utils.toString(IntegrationResponseDto.class,
                "environmentId", environmentId,
                "id", id,
                "organizationId", organizationId,
                "active", active,
                "channel", channel,
                "conditions", conditions,
                "credentials", credentials,
                "deleted", deleted,
                "deletedAt", deletedAt,
                "deletedBy", deletedBy,
                "identifier", identifier,
                "name", name,
                "primary", primary,
                "providerId", providerId);
    }
    
    public final static class Builder {
 
        private String environmentId;
 
        private Optional<? extends String> id = Optional.empty();
 
        private String organizationId;
 
        private Boolean active;
 
        private IntegrationResponseDtoChannel channel;
 
        private Optional<? extends java.util.List<StepFilter>> conditions = Optional.empty();
 
        private CredentialsDto credentials;
 
        private Boolean deleted;
 
        private String deletedAt;
 
        private String deletedBy;
 
        private String identifier;
 
        private String name;
 
        private Boolean primary;
 
        private String providerId;  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder environmentId(String environmentId) {
            Utils.checkNotNull(environmentId, "environmentId");
            this.environmentId = environmentId;
            return this;
        }

        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = Optional.ofNullable(id);
            return this;
        }

        public Builder id(Optional<? extends String> id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        public Builder organizationId(String organizationId) {
            Utils.checkNotNull(organizationId, "organizationId");
            this.organizationId = organizationId;
            return this;
        }

        public Builder active(boolean active) {
            Utils.checkNotNull(active, "active");
            this.active = active;
            return this;
        }

        public Builder channel(IntegrationResponseDtoChannel channel) {
            Utils.checkNotNull(channel, "channel");
            this.channel = channel;
            return this;
        }

        public Builder conditions(java.util.List<StepFilter> conditions) {
            Utils.checkNotNull(conditions, "conditions");
            this.conditions = Optional.ofNullable(conditions);
            return this;
        }

        public Builder conditions(Optional<? extends java.util.List<StepFilter>> conditions) {
            Utils.checkNotNull(conditions, "conditions");
            this.conditions = conditions;
            return this;
        }

        public Builder credentials(CredentialsDto credentials) {
            Utils.checkNotNull(credentials, "credentials");
            this.credentials = credentials;
            return this;
        }

        public Builder deleted(boolean deleted) {
            Utils.checkNotNull(deleted, "deleted");
            this.deleted = deleted;
            return this;
        }

        public Builder deletedAt(String deletedAt) {
            Utils.checkNotNull(deletedAt, "deletedAt");
            this.deletedAt = deletedAt;
            return this;
        }

        public Builder deletedBy(String deletedBy) {
            Utils.checkNotNull(deletedBy, "deletedBy");
            this.deletedBy = deletedBy;
            return this;
        }

        public Builder identifier(String identifier) {
            Utils.checkNotNull(identifier, "identifier");
            this.identifier = identifier;
            return this;
        }

        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }

        public Builder primary(boolean primary) {
            Utils.checkNotNull(primary, "primary");
            this.primary = primary;
            return this;
        }

        public Builder providerId(String providerId) {
            Utils.checkNotNull(providerId, "providerId");
            this.providerId = providerId;
            return this;
        }
        
        public IntegrationResponseDto build() {
            return new IntegrationResponseDto(
                environmentId,
                id,
                organizationId,
                active,
                channel,
                conditions,
                credentials,
                deleted,
                deletedAt,
                deletedBy,
                identifier,
                name,
                primary,
                providerId);
        }
    }
}

