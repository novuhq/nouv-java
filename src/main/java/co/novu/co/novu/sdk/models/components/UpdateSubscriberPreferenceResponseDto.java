/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package co.novu.co.novu.sdk.models.components;

import co.novu.co.novu.sdk.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;

public class UpdateSubscriberPreferenceResponseDto {

    /**
     * The preferences of the subscriber regarding the related workflow
     */
    @JsonProperty("preference")
    private Preference preference;

    /**
     * The workflow information and if it is critical or not
     */
    @JsonProperty("template")
    private TemplateResponse template;

    @JsonCreator
    public UpdateSubscriberPreferenceResponseDto(
            @JsonProperty("preference") Preference preference,
            @JsonProperty("template") TemplateResponse template) {
        Utils.checkNotNull(preference, "preference");
        Utils.checkNotNull(template, "template");
        this.preference = preference;
        this.template = template;
    }

    /**
     * The preferences of the subscriber regarding the related workflow
     */
    @JsonIgnore
    public Preference preference() {
        return preference;
    }

    /**
     * The workflow information and if it is critical or not
     */
    @JsonIgnore
    public TemplateResponse template() {
        return template;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * The preferences of the subscriber regarding the related workflow
     */
    public UpdateSubscriberPreferenceResponseDto withPreference(Preference preference) {
        Utils.checkNotNull(preference, "preference");
        this.preference = preference;
        return this;
    }

    /**
     * The workflow information and if it is critical or not
     */
    public UpdateSubscriberPreferenceResponseDto withTemplate(TemplateResponse template) {
        Utils.checkNotNull(template, "template");
        this.template = template;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        UpdateSubscriberPreferenceResponseDto other = (UpdateSubscriberPreferenceResponseDto) o;
        return 
            java.util.Objects.deepEquals(this.preference, other.preference) &&
            java.util.Objects.deepEquals(this.template, other.template);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            preference,
            template);
    }
    
    @Override
    public String toString() {
        return Utils.toString(UpdateSubscriberPreferenceResponseDto.class,
                "preference", preference,
                "template", template);
    }
    
    public final static class Builder {
 
        private Preference preference;
 
        private TemplateResponse template;  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The preferences of the subscriber regarding the related workflow
         */
        public Builder preference(Preference preference) {
            Utils.checkNotNull(preference, "preference");
            this.preference = preference;
            return this;
        }

        /**
         * The workflow information and if it is critical or not
         */
        public Builder template(TemplateResponse template) {
            Utils.checkNotNull(template, "template");
            this.template = template;
            return this;
        }
        
        public UpdateSubscriberPreferenceResponseDto build() {
            return new UpdateSubscriberPreferenceResponseDto(
                preference,
                template);
        }
    }
}

