/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package co.novu.co.novu.sdk.models.components;

import co.novu.co.novu.sdk.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;

public class UpdateLayoutRequestDto {

    /**
     * User defined content for the layout.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("content")
    private Optional<? extends String> content;

    /**
     * User defined description of the layout
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    private Optional<? extends String> description;

    /**
     * User defined custom key that will be a unique identifier for the Layout updated.
     */
    @JsonProperty("identifier")
    private String identifier;

    /**
     * Variable that defines if the layout is chosen as default when creating a layout.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("isDefault")
    private Optional<? extends Boolean> isDefault;

    /**
     * User defined custom name and provided by the user that will name the Layout updated.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    private Optional<? extends String> name;

    /**
     * User defined variables to render in the layout placeholders.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("variables")
    private Optional<? extends java.util.List<UpdateLayoutRequestDtoVariables>> variables;

    @JsonCreator
    public UpdateLayoutRequestDto(
            @JsonProperty("content") Optional<? extends String> content,
            @JsonProperty("description") Optional<? extends String> description,
            @JsonProperty("identifier") String identifier,
            @JsonProperty("isDefault") Optional<? extends Boolean> isDefault,
            @JsonProperty("name") Optional<? extends String> name,
            @JsonProperty("variables") Optional<? extends java.util.List<UpdateLayoutRequestDtoVariables>> variables) {
        Utils.checkNotNull(content, "content");
        Utils.checkNotNull(description, "description");
        Utils.checkNotNull(identifier, "identifier");
        Utils.checkNotNull(isDefault, "isDefault");
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(variables, "variables");
        this.content = content;
        this.description = description;
        this.identifier = identifier;
        this.isDefault = isDefault;
        this.name = name;
        this.variables = variables;
    }
    
    public UpdateLayoutRequestDto(
            String identifier) {
        this(Optional.empty(), Optional.empty(), identifier, Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * User defined content for the layout.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> content() {
        return (Optional<String>) content;
    }

    /**
     * User defined description of the layout
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> description() {
        return (Optional<String>) description;
    }

    /**
     * User defined custom key that will be a unique identifier for the Layout updated.
     */
    @JsonIgnore
    public String identifier() {
        return identifier;
    }

    /**
     * Variable that defines if the layout is chosen as default when creating a layout.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Boolean> isDefault() {
        return (Optional<Boolean>) isDefault;
    }

    /**
     * User defined custom name and provided by the user that will name the Layout updated.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> name() {
        return (Optional<String>) name;
    }

    /**
     * User defined variables to render in the layout placeholders.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<java.util.List<UpdateLayoutRequestDtoVariables>> variables() {
        return (Optional<java.util.List<UpdateLayoutRequestDtoVariables>>) variables;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * User defined content for the layout.
     */
    public UpdateLayoutRequestDto withContent(String content) {
        Utils.checkNotNull(content, "content");
        this.content = Optional.ofNullable(content);
        return this;
    }

    /**
     * User defined content for the layout.
     */
    public UpdateLayoutRequestDto withContent(Optional<? extends String> content) {
        Utils.checkNotNull(content, "content");
        this.content = content;
        return this;
    }

    /**
     * User defined description of the layout
     */
    public UpdateLayoutRequestDto withDescription(String description) {
        Utils.checkNotNull(description, "description");
        this.description = Optional.ofNullable(description);
        return this;
    }

    /**
     * User defined description of the layout
     */
    public UpdateLayoutRequestDto withDescription(Optional<? extends String> description) {
        Utils.checkNotNull(description, "description");
        this.description = description;
        return this;
    }

    /**
     * User defined custom key that will be a unique identifier for the Layout updated.
     */
    public UpdateLayoutRequestDto withIdentifier(String identifier) {
        Utils.checkNotNull(identifier, "identifier");
        this.identifier = identifier;
        return this;
    }

    /**
     * Variable that defines if the layout is chosen as default when creating a layout.
     */
    public UpdateLayoutRequestDto withIsDefault(boolean isDefault) {
        Utils.checkNotNull(isDefault, "isDefault");
        this.isDefault = Optional.ofNullable(isDefault);
        return this;
    }

    /**
     * Variable that defines if the layout is chosen as default when creating a layout.
     */
    public UpdateLayoutRequestDto withIsDefault(Optional<? extends Boolean> isDefault) {
        Utils.checkNotNull(isDefault, "isDefault");
        this.isDefault = isDefault;
        return this;
    }

    /**
     * User defined custom name and provided by the user that will name the Layout updated.
     */
    public UpdateLayoutRequestDto withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = Optional.ofNullable(name);
        return this;
    }

    /**
     * User defined custom name and provided by the user that will name the Layout updated.
     */
    public UpdateLayoutRequestDto withName(Optional<? extends String> name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    /**
     * User defined variables to render in the layout placeholders.
     */
    public UpdateLayoutRequestDto withVariables(java.util.List<UpdateLayoutRequestDtoVariables> variables) {
        Utils.checkNotNull(variables, "variables");
        this.variables = Optional.ofNullable(variables);
        return this;
    }

    /**
     * User defined variables to render in the layout placeholders.
     */
    public UpdateLayoutRequestDto withVariables(Optional<? extends java.util.List<UpdateLayoutRequestDtoVariables>> variables) {
        Utils.checkNotNull(variables, "variables");
        this.variables = variables;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        UpdateLayoutRequestDto other = (UpdateLayoutRequestDto) o;
        return 
            java.util.Objects.deepEquals(this.content, other.content) &&
            java.util.Objects.deepEquals(this.description, other.description) &&
            java.util.Objects.deepEquals(this.identifier, other.identifier) &&
            java.util.Objects.deepEquals(this.isDefault, other.isDefault) &&
            java.util.Objects.deepEquals(this.name, other.name) &&
            java.util.Objects.deepEquals(this.variables, other.variables);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            content,
            description,
            identifier,
            isDefault,
            name,
            variables);
    }
    
    @Override
    public String toString() {
        return Utils.toString(UpdateLayoutRequestDto.class,
                "content", content,
                "description", description,
                "identifier", identifier,
                "isDefault", isDefault,
                "name", name,
                "variables", variables);
    }
    
    public final static class Builder {
 
        private Optional<? extends String> content = Optional.empty();
 
        private Optional<? extends String> description = Optional.empty();
 
        private String identifier;
 
        private Optional<? extends Boolean> isDefault = Optional.empty();
 
        private Optional<? extends String> name = Optional.empty();
 
        private Optional<? extends java.util.List<UpdateLayoutRequestDtoVariables>> variables = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * User defined content for the layout.
         */
        public Builder content(String content) {
            Utils.checkNotNull(content, "content");
            this.content = Optional.ofNullable(content);
            return this;
        }

        /**
         * User defined content for the layout.
         */
        public Builder content(Optional<? extends String> content) {
            Utils.checkNotNull(content, "content");
            this.content = content;
            return this;
        }

        /**
         * User defined description of the layout
         */
        public Builder description(String description) {
            Utils.checkNotNull(description, "description");
            this.description = Optional.ofNullable(description);
            return this;
        }

        /**
         * User defined description of the layout
         */
        public Builder description(Optional<? extends String> description) {
            Utils.checkNotNull(description, "description");
            this.description = description;
            return this;
        }

        /**
         * User defined custom key that will be a unique identifier for the Layout updated.
         */
        public Builder identifier(String identifier) {
            Utils.checkNotNull(identifier, "identifier");
            this.identifier = identifier;
            return this;
        }

        /**
         * Variable that defines if the layout is chosen as default when creating a layout.
         */
        public Builder isDefault(boolean isDefault) {
            Utils.checkNotNull(isDefault, "isDefault");
            this.isDefault = Optional.ofNullable(isDefault);
            return this;
        }

        /**
         * Variable that defines if the layout is chosen as default when creating a layout.
         */
        public Builder isDefault(Optional<? extends Boolean> isDefault) {
            Utils.checkNotNull(isDefault, "isDefault");
            this.isDefault = isDefault;
            return this;
        }

        /**
         * User defined custom name and provided by the user that will name the Layout updated.
         */
        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = Optional.ofNullable(name);
            return this;
        }

        /**
         * User defined custom name and provided by the user that will name the Layout updated.
         */
        public Builder name(Optional<? extends String> name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }

        /**
         * User defined variables to render in the layout placeholders.
         */
        public Builder variables(java.util.List<UpdateLayoutRequestDtoVariables> variables) {
            Utils.checkNotNull(variables, "variables");
            this.variables = Optional.ofNullable(variables);
            return this;
        }

        /**
         * User defined variables to render in the layout placeholders.
         */
        public Builder variables(Optional<? extends java.util.List<UpdateLayoutRequestDtoVariables>> variables) {
            Utils.checkNotNull(variables, "variables");
            this.variables = variables;
            return this;
        }
        
        public UpdateLayoutRequestDto build() {
            return new UpdateLayoutRequestDto(
                content,
                description,
                identifier,
                isDefault,
                name,
                variables);
        }
    }
}

