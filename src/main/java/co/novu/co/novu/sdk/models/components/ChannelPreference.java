/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package co.novu.co.novu.sdk.models.components;

import co.novu.co.novu.sdk.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;

public class ChannelPreference {

    /**
     * If channel is enabled or not
     */
    @JsonProperty("enabled")
    private boolean enabled;

    /**
     * The type of channel that is enabled or not
     */
    @JsonProperty("type")
    private ChannelPreferenceType type;

    @JsonCreator
    public ChannelPreference(
            @JsonProperty("enabled") boolean enabled,
            @JsonProperty("type") ChannelPreferenceType type) {
        Utils.checkNotNull(enabled, "enabled");
        Utils.checkNotNull(type, "type");
        this.enabled = enabled;
        this.type = type;
    }

    /**
     * If channel is enabled or not
     */
    @JsonIgnore
    public boolean enabled() {
        return enabled;
    }

    /**
     * The type of channel that is enabled or not
     */
    @JsonIgnore
    public ChannelPreferenceType type() {
        return type;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * If channel is enabled or not
     */
    public ChannelPreference withEnabled(boolean enabled) {
        Utils.checkNotNull(enabled, "enabled");
        this.enabled = enabled;
        return this;
    }

    /**
     * The type of channel that is enabled or not
     */
    public ChannelPreference withType(ChannelPreferenceType type) {
        Utils.checkNotNull(type, "type");
        this.type = type;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ChannelPreference other = (ChannelPreference) o;
        return 
            java.util.Objects.deepEquals(this.enabled, other.enabled) &&
            java.util.Objects.deepEquals(this.type, other.type);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            enabled,
            type);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ChannelPreference.class,
                "enabled", enabled,
                "type", type);
    }
    
    public final static class Builder {
 
        private Boolean enabled;
 
        private ChannelPreferenceType type;  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * If channel is enabled or not
         */
        public Builder enabled(boolean enabled) {
            Utils.checkNotNull(enabled, "enabled");
            this.enabled = enabled;
            return this;
        }

        /**
         * The type of channel that is enabled or not
         */
        public Builder type(ChannelPreferenceType type) {
            Utils.checkNotNull(type, "type");
            this.type = type;
            return this;
        }
        
        public ChannelPreference build() {
            return new ChannelPreference(
                enabled,
                type);
        }
    }
}

