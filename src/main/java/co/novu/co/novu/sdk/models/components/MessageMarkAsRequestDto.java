/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package co.novu.co.novu.sdk.models.components;

import co.novu.co.novu.sdk.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;

public class MessageMarkAsRequestDto {

    @JsonProperty("markAs")
    private MessageMarkAsRequestDtoMarkAs markAs;

    @JsonProperty("messageId")
    private MessageId messageId;

    @JsonCreator
    public MessageMarkAsRequestDto(
            @JsonProperty("markAs") MessageMarkAsRequestDtoMarkAs markAs,
            @JsonProperty("messageId") MessageId messageId) {
        Utils.checkNotNull(markAs, "markAs");
        Utils.checkNotNull(messageId, "messageId");
        this.markAs = markAs;
        this.messageId = messageId;
    }

    @JsonIgnore
    public MessageMarkAsRequestDtoMarkAs markAs() {
        return markAs;
    }

    @JsonIgnore
    public MessageId messageId() {
        return messageId;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public MessageMarkAsRequestDto withMarkAs(MessageMarkAsRequestDtoMarkAs markAs) {
        Utils.checkNotNull(markAs, "markAs");
        this.markAs = markAs;
        return this;
    }

    public MessageMarkAsRequestDto withMessageId(MessageId messageId) {
        Utils.checkNotNull(messageId, "messageId");
        this.messageId = messageId;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        MessageMarkAsRequestDto other = (MessageMarkAsRequestDto) o;
        return 
            java.util.Objects.deepEquals(this.markAs, other.markAs) &&
            java.util.Objects.deepEquals(this.messageId, other.messageId);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            markAs,
            messageId);
    }
    
    @Override
    public String toString() {
        return Utils.toString(MessageMarkAsRequestDto.class,
                "markAs", markAs,
                "messageId", messageId);
    }
    
    public final static class Builder {
 
        private MessageMarkAsRequestDtoMarkAs markAs;
 
        private MessageId messageId;  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder markAs(MessageMarkAsRequestDtoMarkAs markAs) {
            Utils.checkNotNull(markAs, "markAs");
            this.markAs = markAs;
            return this;
        }

        public Builder messageId(MessageId messageId) {
            Utils.checkNotNull(messageId, "messageId");
            this.messageId = messageId;
            return this;
        }
        
        public MessageMarkAsRequestDto build() {
            return new MessageMarkAsRequestDto(
                markAs,
                messageId);
        }
    }
}

