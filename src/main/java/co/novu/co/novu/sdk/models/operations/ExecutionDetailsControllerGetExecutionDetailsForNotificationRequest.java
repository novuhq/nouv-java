/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package co.novu.co.novu.sdk.models.operations;

import co.novu.co.novu.sdk.utils.SpeakeasyMetadata;
import co.novu.co.novu.sdk.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;

public class ExecutionDetailsControllerGetExecutionDetailsForNotificationRequest {

    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=notificationId")
    private String notificationId;

    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=subscriberId")
    private String subscriberId;

    @JsonCreator
    public ExecutionDetailsControllerGetExecutionDetailsForNotificationRequest(
            String notificationId,
            String subscriberId) {
        Utils.checkNotNull(notificationId, "notificationId");
        Utils.checkNotNull(subscriberId, "subscriberId");
        this.notificationId = notificationId;
        this.subscriberId = subscriberId;
    }

    @JsonIgnore
    public String notificationId() {
        return notificationId;
    }

    @JsonIgnore
    public String subscriberId() {
        return subscriberId;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public ExecutionDetailsControllerGetExecutionDetailsForNotificationRequest withNotificationId(String notificationId) {
        Utils.checkNotNull(notificationId, "notificationId");
        this.notificationId = notificationId;
        return this;
    }

    public ExecutionDetailsControllerGetExecutionDetailsForNotificationRequest withSubscriberId(String subscriberId) {
        Utils.checkNotNull(subscriberId, "subscriberId");
        this.subscriberId = subscriberId;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ExecutionDetailsControllerGetExecutionDetailsForNotificationRequest other = (ExecutionDetailsControllerGetExecutionDetailsForNotificationRequest) o;
        return 
            java.util.Objects.deepEquals(this.notificationId, other.notificationId) &&
            java.util.Objects.deepEquals(this.subscriberId, other.subscriberId);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            notificationId,
            subscriberId);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ExecutionDetailsControllerGetExecutionDetailsForNotificationRequest.class,
                "notificationId", notificationId,
                "subscriberId", subscriberId);
    }
    
    public final static class Builder {
 
        private String notificationId;
 
        private String subscriberId;  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder notificationId(String notificationId) {
            Utils.checkNotNull(notificationId, "notificationId");
            this.notificationId = notificationId;
            return this;
        }

        public Builder subscriberId(String subscriberId) {
            Utils.checkNotNull(subscriberId, "subscriberId");
            this.subscriberId = subscriberId;
            return this;
        }
        
        public ExecutionDetailsControllerGetExecutionDetailsForNotificationRequest build() {
            return new ExecutionDetailsControllerGetExecutionDetailsForNotificationRequest(
                notificationId,
                subscriberId);
        }
    }
}

