/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package co.novu.co.novu.sdk.models.components;

import co.novu.co.novu.sdk.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;

public class ChannelCredentials {

    /**
     * alert_uid for grafana on-call webhook payload
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("alertUid")
    private Optional<? extends String> alertUid;

    /**
     * Channel specification for Mattermost chat notifications
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("channel")
    private Optional<? extends String> channel;

    /**
     * Contains an array of the subscriber device tokens for a given provider. Used on Push integrations
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("deviceTokens")
    private Optional<? extends java.util.List<String>> deviceTokens;

    /**
     * link_to_upstream_details property fo grafana on call webhook
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("externalUrl")
    private Optional<? extends String> externalUrl;

    /**
     * image_url property fo grafana on call webhook
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("imageUrl")
    private Optional<? extends String> imageUrl;

    /**
     * state property fo grafana on call webhook
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("state")
    private Optional<? extends String> state;

    /**
     * title to be used with grafana on call webhook
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("title")
    private Optional<? extends String> title;

    /**
     * Webhook url used by chat app integrations. The webhook should be obtained from the chat app provider.
     */
    @JsonProperty("webhookUrl")
    private String webhookUrl;

    @JsonCreator
    public ChannelCredentials(
            @JsonProperty("alertUid") Optional<? extends String> alertUid,
            @JsonProperty("channel") Optional<? extends String> channel,
            @JsonProperty("deviceTokens") Optional<? extends java.util.List<String>> deviceTokens,
            @JsonProperty("externalUrl") Optional<? extends String> externalUrl,
            @JsonProperty("imageUrl") Optional<? extends String> imageUrl,
            @JsonProperty("state") Optional<? extends String> state,
            @JsonProperty("title") Optional<? extends String> title,
            @JsonProperty("webhookUrl") String webhookUrl) {
        Utils.checkNotNull(alertUid, "alertUid");
        Utils.checkNotNull(channel, "channel");
        Utils.checkNotNull(deviceTokens, "deviceTokens");
        Utils.checkNotNull(externalUrl, "externalUrl");
        Utils.checkNotNull(imageUrl, "imageUrl");
        Utils.checkNotNull(state, "state");
        Utils.checkNotNull(title, "title");
        Utils.checkNotNull(webhookUrl, "webhookUrl");
        this.alertUid = alertUid;
        this.channel = channel;
        this.deviceTokens = deviceTokens;
        this.externalUrl = externalUrl;
        this.imageUrl = imageUrl;
        this.state = state;
        this.title = title;
        this.webhookUrl = webhookUrl;
    }
    
    public ChannelCredentials(
            String webhookUrl) {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), webhookUrl);
    }

    /**
     * alert_uid for grafana on-call webhook payload
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> alertUid() {
        return (Optional<String>) alertUid;
    }

    /**
     * Channel specification for Mattermost chat notifications
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> channel() {
        return (Optional<String>) channel;
    }

    /**
     * Contains an array of the subscriber device tokens for a given provider. Used on Push integrations
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<java.util.List<String>> deviceTokens() {
        return (Optional<java.util.List<String>>) deviceTokens;
    }

    /**
     * link_to_upstream_details property fo grafana on call webhook
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> externalUrl() {
        return (Optional<String>) externalUrl;
    }

    /**
     * image_url property fo grafana on call webhook
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> imageUrl() {
        return (Optional<String>) imageUrl;
    }

    /**
     * state property fo grafana on call webhook
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> state() {
        return (Optional<String>) state;
    }

    /**
     * title to be used with grafana on call webhook
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> title() {
        return (Optional<String>) title;
    }

    /**
     * Webhook url used by chat app integrations. The webhook should be obtained from the chat app provider.
     */
    @JsonIgnore
    public String webhookUrl() {
        return webhookUrl;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * alert_uid for grafana on-call webhook payload
     */
    public ChannelCredentials withAlertUid(String alertUid) {
        Utils.checkNotNull(alertUid, "alertUid");
        this.alertUid = Optional.ofNullable(alertUid);
        return this;
    }

    /**
     * alert_uid for grafana on-call webhook payload
     */
    public ChannelCredentials withAlertUid(Optional<? extends String> alertUid) {
        Utils.checkNotNull(alertUid, "alertUid");
        this.alertUid = alertUid;
        return this;
    }

    /**
     * Channel specification for Mattermost chat notifications
     */
    public ChannelCredentials withChannel(String channel) {
        Utils.checkNotNull(channel, "channel");
        this.channel = Optional.ofNullable(channel);
        return this;
    }

    /**
     * Channel specification for Mattermost chat notifications
     */
    public ChannelCredentials withChannel(Optional<? extends String> channel) {
        Utils.checkNotNull(channel, "channel");
        this.channel = channel;
        return this;
    }

    /**
     * Contains an array of the subscriber device tokens for a given provider. Used on Push integrations
     */
    public ChannelCredentials withDeviceTokens(java.util.List<String> deviceTokens) {
        Utils.checkNotNull(deviceTokens, "deviceTokens");
        this.deviceTokens = Optional.ofNullable(deviceTokens);
        return this;
    }

    /**
     * Contains an array of the subscriber device tokens for a given provider. Used on Push integrations
     */
    public ChannelCredentials withDeviceTokens(Optional<? extends java.util.List<String>> deviceTokens) {
        Utils.checkNotNull(deviceTokens, "deviceTokens");
        this.deviceTokens = deviceTokens;
        return this;
    }

    /**
     * link_to_upstream_details property fo grafana on call webhook
     */
    public ChannelCredentials withExternalUrl(String externalUrl) {
        Utils.checkNotNull(externalUrl, "externalUrl");
        this.externalUrl = Optional.ofNullable(externalUrl);
        return this;
    }

    /**
     * link_to_upstream_details property fo grafana on call webhook
     */
    public ChannelCredentials withExternalUrl(Optional<? extends String> externalUrl) {
        Utils.checkNotNull(externalUrl, "externalUrl");
        this.externalUrl = externalUrl;
        return this;
    }

    /**
     * image_url property fo grafana on call webhook
     */
    public ChannelCredentials withImageUrl(String imageUrl) {
        Utils.checkNotNull(imageUrl, "imageUrl");
        this.imageUrl = Optional.ofNullable(imageUrl);
        return this;
    }

    /**
     * image_url property fo grafana on call webhook
     */
    public ChannelCredentials withImageUrl(Optional<? extends String> imageUrl) {
        Utils.checkNotNull(imageUrl, "imageUrl");
        this.imageUrl = imageUrl;
        return this;
    }

    /**
     * state property fo grafana on call webhook
     */
    public ChannelCredentials withState(String state) {
        Utils.checkNotNull(state, "state");
        this.state = Optional.ofNullable(state);
        return this;
    }

    /**
     * state property fo grafana on call webhook
     */
    public ChannelCredentials withState(Optional<? extends String> state) {
        Utils.checkNotNull(state, "state");
        this.state = state;
        return this;
    }

    /**
     * title to be used with grafana on call webhook
     */
    public ChannelCredentials withTitle(String title) {
        Utils.checkNotNull(title, "title");
        this.title = Optional.ofNullable(title);
        return this;
    }

    /**
     * title to be used with grafana on call webhook
     */
    public ChannelCredentials withTitle(Optional<? extends String> title) {
        Utils.checkNotNull(title, "title");
        this.title = title;
        return this;
    }

    /**
     * Webhook url used by chat app integrations. The webhook should be obtained from the chat app provider.
     */
    public ChannelCredentials withWebhookUrl(String webhookUrl) {
        Utils.checkNotNull(webhookUrl, "webhookUrl");
        this.webhookUrl = webhookUrl;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ChannelCredentials other = (ChannelCredentials) o;
        return 
            java.util.Objects.deepEquals(this.alertUid, other.alertUid) &&
            java.util.Objects.deepEquals(this.channel, other.channel) &&
            java.util.Objects.deepEquals(this.deviceTokens, other.deviceTokens) &&
            java.util.Objects.deepEquals(this.externalUrl, other.externalUrl) &&
            java.util.Objects.deepEquals(this.imageUrl, other.imageUrl) &&
            java.util.Objects.deepEquals(this.state, other.state) &&
            java.util.Objects.deepEquals(this.title, other.title) &&
            java.util.Objects.deepEquals(this.webhookUrl, other.webhookUrl);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            alertUid,
            channel,
            deviceTokens,
            externalUrl,
            imageUrl,
            state,
            title,
            webhookUrl);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ChannelCredentials.class,
                "alertUid", alertUid,
                "channel", channel,
                "deviceTokens", deviceTokens,
                "externalUrl", externalUrl,
                "imageUrl", imageUrl,
                "state", state,
                "title", title,
                "webhookUrl", webhookUrl);
    }
    
    public final static class Builder {
 
        private Optional<? extends String> alertUid = Optional.empty();
 
        private Optional<? extends String> channel = Optional.empty();
 
        private Optional<? extends java.util.List<String>> deviceTokens = Optional.empty();
 
        private Optional<? extends String> externalUrl = Optional.empty();
 
        private Optional<? extends String> imageUrl = Optional.empty();
 
        private Optional<? extends String> state = Optional.empty();
 
        private Optional<? extends String> title = Optional.empty();
 
        private String webhookUrl;  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * alert_uid for grafana on-call webhook payload
         */
        public Builder alertUid(String alertUid) {
            Utils.checkNotNull(alertUid, "alertUid");
            this.alertUid = Optional.ofNullable(alertUid);
            return this;
        }

        /**
         * alert_uid for grafana on-call webhook payload
         */
        public Builder alertUid(Optional<? extends String> alertUid) {
            Utils.checkNotNull(alertUid, "alertUid");
            this.alertUid = alertUid;
            return this;
        }

        /**
         * Channel specification for Mattermost chat notifications
         */
        public Builder channel(String channel) {
            Utils.checkNotNull(channel, "channel");
            this.channel = Optional.ofNullable(channel);
            return this;
        }

        /**
         * Channel specification for Mattermost chat notifications
         */
        public Builder channel(Optional<? extends String> channel) {
            Utils.checkNotNull(channel, "channel");
            this.channel = channel;
            return this;
        }

        /**
         * Contains an array of the subscriber device tokens for a given provider. Used on Push integrations
         */
        public Builder deviceTokens(java.util.List<String> deviceTokens) {
            Utils.checkNotNull(deviceTokens, "deviceTokens");
            this.deviceTokens = Optional.ofNullable(deviceTokens);
            return this;
        }

        /**
         * Contains an array of the subscriber device tokens for a given provider. Used on Push integrations
         */
        public Builder deviceTokens(Optional<? extends java.util.List<String>> deviceTokens) {
            Utils.checkNotNull(deviceTokens, "deviceTokens");
            this.deviceTokens = deviceTokens;
            return this;
        }

        /**
         * link_to_upstream_details property fo grafana on call webhook
         */
        public Builder externalUrl(String externalUrl) {
            Utils.checkNotNull(externalUrl, "externalUrl");
            this.externalUrl = Optional.ofNullable(externalUrl);
            return this;
        }

        /**
         * link_to_upstream_details property fo grafana on call webhook
         */
        public Builder externalUrl(Optional<? extends String> externalUrl) {
            Utils.checkNotNull(externalUrl, "externalUrl");
            this.externalUrl = externalUrl;
            return this;
        }

        /**
         * image_url property fo grafana on call webhook
         */
        public Builder imageUrl(String imageUrl) {
            Utils.checkNotNull(imageUrl, "imageUrl");
            this.imageUrl = Optional.ofNullable(imageUrl);
            return this;
        }

        /**
         * image_url property fo grafana on call webhook
         */
        public Builder imageUrl(Optional<? extends String> imageUrl) {
            Utils.checkNotNull(imageUrl, "imageUrl");
            this.imageUrl = imageUrl;
            return this;
        }

        /**
         * state property fo grafana on call webhook
         */
        public Builder state(String state) {
            Utils.checkNotNull(state, "state");
            this.state = Optional.ofNullable(state);
            return this;
        }

        /**
         * state property fo grafana on call webhook
         */
        public Builder state(Optional<? extends String> state) {
            Utils.checkNotNull(state, "state");
            this.state = state;
            return this;
        }

        /**
         * title to be used with grafana on call webhook
         */
        public Builder title(String title) {
            Utils.checkNotNull(title, "title");
            this.title = Optional.ofNullable(title);
            return this;
        }

        /**
         * title to be used with grafana on call webhook
         */
        public Builder title(Optional<? extends String> title) {
            Utils.checkNotNull(title, "title");
            this.title = title;
            return this;
        }

        /**
         * Webhook url used by chat app integrations. The webhook should be obtained from the chat app provider.
         */
        public Builder webhookUrl(String webhookUrl) {
            Utils.checkNotNull(webhookUrl, "webhookUrl");
            this.webhookUrl = webhookUrl;
            return this;
        }
        
        public ChannelCredentials build() {
            return new ChannelCredentials(
                alertUid,
                channel,
                deviceTokens,
                externalUrl,
                imageUrl,
                state,
                title,
                webhookUrl);
        }
    }
}

