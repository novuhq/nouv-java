/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package co.novu.co.novu.sdk.models.components;

import co.novu.co.novu.sdk.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;

public class MessageActionResult {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("payload")
    private Optional<? extends MessageActionResultPayload> payload;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    private Optional<? extends MessageActionResultType> type;

    @JsonCreator
    public MessageActionResult(
            @JsonProperty("payload") Optional<? extends MessageActionResultPayload> payload,
            @JsonProperty("type") Optional<? extends MessageActionResultType> type) {
        Utils.checkNotNull(payload, "payload");
        Utils.checkNotNull(type, "type");
        this.payload = payload;
        this.type = type;
    }
    
    public MessageActionResult() {
        this(Optional.empty(), Optional.empty());
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<MessageActionResultPayload> payload() {
        return (Optional<MessageActionResultPayload>) payload;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<MessageActionResultType> type() {
        return (Optional<MessageActionResultType>) type;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public MessageActionResult withPayload(MessageActionResultPayload payload) {
        Utils.checkNotNull(payload, "payload");
        this.payload = Optional.ofNullable(payload);
        return this;
    }

    public MessageActionResult withPayload(Optional<? extends MessageActionResultPayload> payload) {
        Utils.checkNotNull(payload, "payload");
        this.payload = payload;
        return this;
    }

    public MessageActionResult withType(MessageActionResultType type) {
        Utils.checkNotNull(type, "type");
        this.type = Optional.ofNullable(type);
        return this;
    }

    public MessageActionResult withType(Optional<? extends MessageActionResultType> type) {
        Utils.checkNotNull(type, "type");
        this.type = type;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        MessageActionResult other = (MessageActionResult) o;
        return 
            java.util.Objects.deepEquals(this.payload, other.payload) &&
            java.util.Objects.deepEquals(this.type, other.type);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            payload,
            type);
    }
    
    @Override
    public String toString() {
        return Utils.toString(MessageActionResult.class,
                "payload", payload,
                "type", type);
    }
    
    public final static class Builder {
 
        private Optional<? extends MessageActionResultPayload> payload = Optional.empty();
 
        private Optional<? extends MessageActionResultType> type = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder payload(MessageActionResultPayload payload) {
            Utils.checkNotNull(payload, "payload");
            this.payload = Optional.ofNullable(payload);
            return this;
        }

        public Builder payload(Optional<? extends MessageActionResultPayload> payload) {
            Utils.checkNotNull(payload, "payload");
            this.payload = payload;
            return this;
        }

        public Builder type(MessageActionResultType type) {
            Utils.checkNotNull(type, "type");
            this.type = Optional.ofNullable(type);
            return this;
        }

        public Builder type(Optional<? extends MessageActionResultType> type) {
            Utils.checkNotNull(type, "type");
            this.type = type;
            return this;
        }
        
        public MessageActionResult build() {
            return new MessageActionResult(
                payload,
                type);
        }
    }
}

