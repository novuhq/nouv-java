/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package co.novu.co.novu.sdk.models.components;

import co.novu.co.novu.sdk.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;

public class MessageCTA {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("action")
    private Optional<? extends MessageAction> action;

    @JsonProperty("data")
    private MessageCTAData data;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    private Optional<? extends MessageCTAType> type;

    @JsonCreator
    public MessageCTA(
            @JsonProperty("action") Optional<? extends MessageAction> action,
            @JsonProperty("data") MessageCTAData data,
            @JsonProperty("type") Optional<? extends MessageCTAType> type) {
        Utils.checkNotNull(action, "action");
        Utils.checkNotNull(data, "data");
        Utils.checkNotNull(type, "type");
        this.action = action;
        this.data = data;
        this.type = type;
    }
    
    public MessageCTA(
            MessageCTAData data) {
        this(Optional.empty(), data, Optional.empty());
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<MessageAction> action() {
        return (Optional<MessageAction>) action;
    }

    @JsonIgnore
    public MessageCTAData data() {
        return data;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<MessageCTAType> type() {
        return (Optional<MessageCTAType>) type;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public MessageCTA withAction(MessageAction action) {
        Utils.checkNotNull(action, "action");
        this.action = Optional.ofNullable(action);
        return this;
    }

    public MessageCTA withAction(Optional<? extends MessageAction> action) {
        Utils.checkNotNull(action, "action");
        this.action = action;
        return this;
    }

    public MessageCTA withData(MessageCTAData data) {
        Utils.checkNotNull(data, "data");
        this.data = data;
        return this;
    }

    public MessageCTA withType(MessageCTAType type) {
        Utils.checkNotNull(type, "type");
        this.type = Optional.ofNullable(type);
        return this;
    }

    public MessageCTA withType(Optional<? extends MessageCTAType> type) {
        Utils.checkNotNull(type, "type");
        this.type = type;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        MessageCTA other = (MessageCTA) o;
        return 
            java.util.Objects.deepEquals(this.action, other.action) &&
            java.util.Objects.deepEquals(this.data, other.data) &&
            java.util.Objects.deepEquals(this.type, other.type);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            action,
            data,
            type);
    }
    
    @Override
    public String toString() {
        return Utils.toString(MessageCTA.class,
                "action", action,
                "data", data,
                "type", type);
    }
    
    public final static class Builder {
 
        private Optional<? extends MessageAction> action = Optional.empty();
 
        private MessageCTAData data;
 
        private Optional<? extends MessageCTAType> type = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder action(MessageAction action) {
            Utils.checkNotNull(action, "action");
            this.action = Optional.ofNullable(action);
            return this;
        }

        public Builder action(Optional<? extends MessageAction> action) {
            Utils.checkNotNull(action, "action");
            this.action = action;
            return this;
        }

        public Builder data(MessageCTAData data) {
            Utils.checkNotNull(data, "data");
            this.data = data;
            return this;
        }

        public Builder type(MessageCTAType type) {
            Utils.checkNotNull(type, "type");
            this.type = Optional.ofNullable(type);
            return this;
        }

        public Builder type(Optional<? extends MessageCTAType> type) {
            Utils.checkNotNull(type, "type");
            this.type = type;
            return this;
        }
        
        public MessageCTA build() {
            return new MessageCTA(
                action,
                data,
                type);
        }
    }
}

