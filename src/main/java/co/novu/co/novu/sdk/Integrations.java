/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package co.novu.co.novu.sdk;

import co.novu.co.novu.sdk.models.errors.SDKError;
import co.novu.co.novu.sdk.models.operations.SDKMethodInterfaces.*;
import co.novu.co.novu.sdk.utils.HTTPClient;
import co.novu.co.novu.sdk.utils.HTTPRequest;
import co.novu.co.novu.sdk.utils.Hook.AfterErrorContextImpl;
import co.novu.co.novu.sdk.utils.Hook.AfterSuccessContextImpl;
import co.novu.co.novu.sdk.utils.Hook.BeforeRequestContextImpl;
import co.novu.co.novu.sdk.utils.JSON;
import co.novu.co.novu.sdk.utils.Options;
import co.novu.co.novu.sdk.utils.Retries.NonRetryableException;
import co.novu.co.novu.sdk.utils.SerializedBody;
import co.novu.co.novu.sdk.utils.Utils;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;
import java.io.InputStream;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.nio.charset.StandardCharsets;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;

/**
 * With the help of the Integration Store, you can easily integrate your favorite delivery provider. During the runtime of the API, the Integrations Store is responsible for storing the configurations of all the providers.
 * https://docs.novu.co/channels-and-providers/integration-store
 */
public class Integrations implements
            MethodCallIntegrationsControllerCreateIntegration,
            MethodCallIntegrationsControllerRemoveIntegration,
            MethodCallIntegrationsControllerListIntegrations,
            MethodCallIntegrationsControllerGetActiveIntegrations,
            MethodCallIntegrationsControllerSetIntegrationAsPrimary,
            MethodCallIntegrationsControllerUpdateIntegrationById {

    private final SDKConfiguration sdkConfiguration;
    private final Webhooks webhooks;

    Integrations(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
        this.webhooks = new Webhooks(this.sdkConfiguration);
    }

    public final Webhooks webhooks() {
        return webhooks;
    }


    /**
     * Create integration
     * Create an integration for the current environment the user is based on the API key provided
     * @return The call builder
     */
    public co.novu.co.novu.sdk.models.operations.IntegrationsControllerCreateIntegrationRequestBuilder create() {
        return new co.novu.co.novu.sdk.models.operations.IntegrationsControllerCreateIntegrationRequestBuilder(this);
    }

    /**
     * Create integration
     * Create an integration for the current environment the user is based on the API key provided
     * @param request The request object containing all of the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public co.novu.co.novu.sdk.models.operations.IntegrationsControllerCreateIntegrationResponse create(
            co.novu.co.novu.sdk.models.components.CreateIntegrationRequestDto request) throws Exception {
        return create(request, Optional.empty());
    }
    /**
     * Create integration
     * Create an integration for the current environment the user is based on the API key provided
     * @param request The request object containing all of the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public co.novu.co.novu.sdk.models.operations.IntegrationsControllerCreateIntegrationResponse create(
            co.novu.co.novu.sdk.models.components.CreateIntegrationRequestDto request,
            Optional<Options> options) throws Exception {

        if (options.isPresent()) {
          options.get().validate(Arrays.asList(Options.Option.RETRY_CONFIG));
        }

        String _baseUrl = this.sdkConfiguration.serverUrl;
        String _url = Utils.generateURL(
                _baseUrl,
                "/v1/integrations");
        
        HTTPRequest _req = new HTTPRequest(_url, "POST");
        Object _convertedRequest = Utils.convertToShape(request, Utils.JsonShape.DEFAULT,
            new TypeReference<co.novu.co.novu.sdk.models.components.CreateIntegrationRequestDto>() {});
        SerializedBody _serializedRequestBody = Utils.serializeRequestBody(
                _convertedRequest, "request", "json", false);
        if (_serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        _req.setBody(Optional.ofNullable(_serializedRequestBody));
        _req.addHeader("Accept", "application/json")
            .addHeader("user-agent", 
                this.sdkConfiguration.userAgent);

        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());

        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HTTPRequest _finalReq = _req;
        co.novu.co.novu.sdk.utils.RetryConfig _retryConfig;
        if (options.isPresent() && options.get().retryConfig().isPresent()) {
            _retryConfig = options.get().retryConfig().get();
        } else if (this.sdkConfiguration.retryConfig.isPresent()) {
            _retryConfig = this.sdkConfiguration.retryConfig.get();
        } else {
            _retryConfig = co.novu.co.novu.sdk.utils.RetryConfig.builder()
                .backoff(co.novu.co.novu.sdk.utils.BackoffStrategy.builder()
                            .initialInterval(500, java.util.concurrent.TimeUnit.MILLISECONDS)
                            .maxInterval(30000, java.util.concurrent.TimeUnit.MILLISECONDS)
                            .baseFactor((double)(1.5))
                            .maxElapsedTime(3600000, java.util.concurrent.TimeUnit.MILLISECONDS)
                            .retryConnectError(true)
                            .build())
                .build();
        }
        List<String> _statusCodes = new java.util.ArrayList<>();
        _statusCodes.add("408");
        _statusCodes.add("409");
        _statusCodes.add("429");
        _statusCodes.add("5XX");
        co.novu.co.novu.sdk.utils.Retries _retries = co.novu.co.novu.sdk.utils.Retries.builder()
            .action(() -> {
                HttpRequest _r = null;
                try {
                    _r = sdkConfiguration.hooks()
                        .beforeRequest(
                            new BeforeRequestContextImpl("IntegrationsController_createIntegration", Optional.empty(), sdkConfiguration.securitySource()),
                            _finalReq.build());
                } catch (Exception _e) {
                    throw new NonRetryableException(_e);
                }
                try {
                    return _client.send(_r);
                } catch (Exception _e) {
                    return sdkConfiguration.hooks()
                        .afterError(
                            new AfterErrorContextImpl("IntegrationsController_createIntegration", Optional.empty(), sdkConfiguration.securitySource()), 
                            Optional.empty(),
                            Optional.of(_e));
                }
            })
            .retryConfig(_retryConfig)
            .statusCodes(_statusCodes)
            .build();
        HttpResponse<InputStream> _httpRes = sdkConfiguration.hooks()
                 .afterSuccess(
                     new AfterSuccessContextImpl("IntegrationsController_createIntegration", Optional.empty(), sdkConfiguration.securitySource()),
                     _retries.run());
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        co.novu.co.novu.sdk.models.operations.IntegrationsControllerCreateIntegrationResponse.Builder _resBuilder = 
            co.novu.co.novu.sdk.models.operations.IntegrationsControllerCreateIntegrationResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        co.novu.co.novu.sdk.models.operations.IntegrationsControllerCreateIntegrationResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "201")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                co.novu.co.novu.sdk.models.components.IntegrationResponseDto _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<co.novu.co.novu.sdk.models.components.IntegrationResponseDto>() {});
                _res.withIntegrationResponseDto(java.util.Optional.ofNullable(_out));
                return _res;
            } else {
                throw new SDKError(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.toByteArrayAndClose(_httpRes.body()));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "409", "429", "4XX", "503", "5XX")) {
            // no content 
            throw new SDKError(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.toByteArrayAndClose(_httpRes.body()));
        }
        throw new SDKError(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.toByteArrayAndClose(_httpRes.body()));
    }



    /**
     * Delete integration
     * @return The call builder
     */
    public co.novu.co.novu.sdk.models.operations.IntegrationsControllerRemoveIntegrationRequestBuilder delete() {
        return new co.novu.co.novu.sdk.models.operations.IntegrationsControllerRemoveIntegrationRequestBuilder(this);
    }

    /**
     * Delete integration
     * @param integrationId
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public co.novu.co.novu.sdk.models.operations.IntegrationsControllerRemoveIntegrationResponse delete(
            String integrationId) throws Exception {
        return delete(integrationId, Optional.empty());
    }
    /**
     * Delete integration
     * @param integrationId
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public co.novu.co.novu.sdk.models.operations.IntegrationsControllerRemoveIntegrationResponse delete(
            String integrationId,
            Optional<Options> options) throws Exception {

        if (options.isPresent()) {
          options.get().validate(Arrays.asList(Options.Option.RETRY_CONFIG));
        }

        co.novu.co.novu.sdk.models.operations.IntegrationsControllerRemoveIntegrationRequest request =
            co.novu.co.novu.sdk.models.operations.IntegrationsControllerRemoveIntegrationRequest
                .builder()
                .integrationId(integrationId)
                .build();
        
        String _baseUrl = this.sdkConfiguration.serverUrl;
        String _url = Utils.generateURL(
                co.novu.co.novu.sdk.models.operations.IntegrationsControllerRemoveIntegrationRequest.class,
                _baseUrl,
                "/v1/integrations/{integrationId}",
                request, null);
        
        HTTPRequest _req = new HTTPRequest(_url, "DELETE");
        _req.addHeader("Accept", "application/json")
            .addHeader("user-agent", 
                this.sdkConfiguration.userAgent);

        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());

        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HTTPRequest _finalReq = _req;
        co.novu.co.novu.sdk.utils.RetryConfig _retryConfig;
        if (options.isPresent() && options.get().retryConfig().isPresent()) {
            _retryConfig = options.get().retryConfig().get();
        } else if (this.sdkConfiguration.retryConfig.isPresent()) {
            _retryConfig = this.sdkConfiguration.retryConfig.get();
        } else {
            _retryConfig = co.novu.co.novu.sdk.utils.RetryConfig.builder()
                .backoff(co.novu.co.novu.sdk.utils.BackoffStrategy.builder()
                            .initialInterval(500, java.util.concurrent.TimeUnit.MILLISECONDS)
                            .maxInterval(30000, java.util.concurrent.TimeUnit.MILLISECONDS)
                            .baseFactor((double)(1.5))
                            .maxElapsedTime(3600000, java.util.concurrent.TimeUnit.MILLISECONDS)
                            .retryConnectError(true)
                            .build())
                .build();
        }
        List<String> _statusCodes = new java.util.ArrayList<>();
        _statusCodes.add("408");
        _statusCodes.add("409");
        _statusCodes.add("429");
        _statusCodes.add("5XX");
        co.novu.co.novu.sdk.utils.Retries _retries = co.novu.co.novu.sdk.utils.Retries.builder()
            .action(() -> {
                HttpRequest _r = null;
                try {
                    _r = sdkConfiguration.hooks()
                        .beforeRequest(
                            new BeforeRequestContextImpl("IntegrationsController_removeIntegration", Optional.empty(), sdkConfiguration.securitySource()),
                            _finalReq.build());
                } catch (Exception _e) {
                    throw new NonRetryableException(_e);
                }
                try {
                    return _client.send(_r);
                } catch (Exception _e) {
                    return sdkConfiguration.hooks()
                        .afterError(
                            new AfterErrorContextImpl("IntegrationsController_removeIntegration", Optional.empty(), sdkConfiguration.securitySource()), 
                            Optional.empty(),
                            Optional.of(_e));
                }
            })
            .retryConfig(_retryConfig)
            .statusCodes(_statusCodes)
            .build();
        HttpResponse<InputStream> _httpRes = sdkConfiguration.hooks()
                 .afterSuccess(
                     new AfterSuccessContextImpl("IntegrationsController_removeIntegration", Optional.empty(), sdkConfiguration.securitySource()),
                     _retries.run());
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        co.novu.co.novu.sdk.models.operations.IntegrationsControllerRemoveIntegrationResponse.Builder _resBuilder = 
            co.novu.co.novu.sdk.models.operations.IntegrationsControllerRemoveIntegrationResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        co.novu.co.novu.sdk.models.operations.IntegrationsControllerRemoveIntegrationResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "200")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                java.util.List<co.novu.co.novu.sdk.models.components.IntegrationResponseDto> _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<java.util.List<co.novu.co.novu.sdk.models.components.IntegrationResponseDto>>() {});
                _res.withIntegrationResponseDtos(java.util.Optional.ofNullable(_out));
                return _res;
            } else {
                throw new SDKError(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.toByteArrayAndClose(_httpRes.body()));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "409", "429", "4XX", "503", "5XX")) {
            // no content 
            throw new SDKError(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.toByteArrayAndClose(_httpRes.body()));
        }
        throw new SDKError(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.toByteArrayAndClose(_httpRes.body()));
    }



    /**
     * Get integrations
     * Return all the integrations the user has created for that organization. Review v.0.17.0 changelog for a breaking change
     * @return The call builder
     */
    public co.novu.co.novu.sdk.models.operations.IntegrationsControllerListIntegrationsRequestBuilder list() {
        return new co.novu.co.novu.sdk.models.operations.IntegrationsControllerListIntegrationsRequestBuilder(this);
    }

    /**
     * Get integrations
     * Return all the integrations the user has created for that organization. Review v.0.17.0 changelog for a breaking change
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public co.novu.co.novu.sdk.models.operations.IntegrationsControllerListIntegrationsResponse listDirect() throws Exception {
        return list(Optional.empty());
    }
    /**
     * Get integrations
     * Return all the integrations the user has created for that organization. Review v.0.17.0 changelog for a breaking change
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public co.novu.co.novu.sdk.models.operations.IntegrationsControllerListIntegrationsResponse list(
            Optional<Options> options) throws Exception {

        if (options.isPresent()) {
          options.get().validate(Arrays.asList(Options.Option.RETRY_CONFIG));
        }

        String _baseUrl = this.sdkConfiguration.serverUrl;
        String _url = Utils.generateURL(
                _baseUrl,
                "/v1/integrations");
        
        HTTPRequest _req = new HTTPRequest(_url, "GET");
        _req.addHeader("Accept", "application/json")
            .addHeader("user-agent", 
                this.sdkConfiguration.userAgent);

        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());

        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HTTPRequest _finalReq = _req;
        co.novu.co.novu.sdk.utils.RetryConfig _retryConfig;
        if (options.isPresent() && options.get().retryConfig().isPresent()) {
            _retryConfig = options.get().retryConfig().get();
        } else if (this.sdkConfiguration.retryConfig.isPresent()) {
            _retryConfig = this.sdkConfiguration.retryConfig.get();
        } else {
            _retryConfig = co.novu.co.novu.sdk.utils.RetryConfig.builder()
                .backoff(co.novu.co.novu.sdk.utils.BackoffStrategy.builder()
                            .initialInterval(500, java.util.concurrent.TimeUnit.MILLISECONDS)
                            .maxInterval(30000, java.util.concurrent.TimeUnit.MILLISECONDS)
                            .baseFactor((double)(1.5))
                            .maxElapsedTime(3600000, java.util.concurrent.TimeUnit.MILLISECONDS)
                            .retryConnectError(true)
                            .build())
                .build();
        }
        List<String> _statusCodes = new java.util.ArrayList<>();
        _statusCodes.add("408");
        _statusCodes.add("409");
        _statusCodes.add("429");
        _statusCodes.add("5XX");
        co.novu.co.novu.sdk.utils.Retries _retries = co.novu.co.novu.sdk.utils.Retries.builder()
            .action(() -> {
                HttpRequest _r = null;
                try {
                    _r = sdkConfiguration.hooks()
                        .beforeRequest(
                            new BeforeRequestContextImpl("IntegrationsController_listIntegrations", Optional.empty(), sdkConfiguration.securitySource()),
                            _finalReq.build());
                } catch (Exception _e) {
                    throw new NonRetryableException(_e);
                }
                try {
                    return _client.send(_r);
                } catch (Exception _e) {
                    return sdkConfiguration.hooks()
                        .afterError(
                            new AfterErrorContextImpl("IntegrationsController_listIntegrations", Optional.empty(), sdkConfiguration.securitySource()), 
                            Optional.empty(),
                            Optional.of(_e));
                }
            })
            .retryConfig(_retryConfig)
            .statusCodes(_statusCodes)
            .build();
        HttpResponse<InputStream> _httpRes = sdkConfiguration.hooks()
                 .afterSuccess(
                     new AfterSuccessContextImpl("IntegrationsController_listIntegrations", Optional.empty(), sdkConfiguration.securitySource()),
                     _retries.run());
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        co.novu.co.novu.sdk.models.operations.IntegrationsControllerListIntegrationsResponse.Builder _resBuilder = 
            co.novu.co.novu.sdk.models.operations.IntegrationsControllerListIntegrationsResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        co.novu.co.novu.sdk.models.operations.IntegrationsControllerListIntegrationsResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "200")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                java.util.List<co.novu.co.novu.sdk.models.components.IntegrationResponseDto> _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<java.util.List<co.novu.co.novu.sdk.models.components.IntegrationResponseDto>>() {});
                _res.withIntegrationResponseDtos(java.util.Optional.ofNullable(_out));
                return _res;
            } else {
                throw new SDKError(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.toByteArrayAndClose(_httpRes.body()));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "409", "429", "4XX", "503", "5XX")) {
            // no content 
            throw new SDKError(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.toByteArrayAndClose(_httpRes.body()));
        }
        throw new SDKError(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.toByteArrayAndClose(_httpRes.body()));
    }



    /**
     * Get active integrations
     * Return all the active integrations the user has created for that organization. Review v.0.17.0 changelog for a breaking change
     * @return The call builder
     */
    public co.novu.co.novu.sdk.models.operations.IntegrationsControllerGetActiveIntegrationsRequestBuilder listActive() {
        return new co.novu.co.novu.sdk.models.operations.IntegrationsControllerGetActiveIntegrationsRequestBuilder(this);
    }

    /**
     * Get active integrations
     * Return all the active integrations the user has created for that organization. Review v.0.17.0 changelog for a breaking change
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public co.novu.co.novu.sdk.models.operations.IntegrationsControllerGetActiveIntegrationsResponse listActiveDirect() throws Exception {
        return listActive(Optional.empty());
    }
    /**
     * Get active integrations
     * Return all the active integrations the user has created for that organization. Review v.0.17.0 changelog for a breaking change
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public co.novu.co.novu.sdk.models.operations.IntegrationsControllerGetActiveIntegrationsResponse listActive(
            Optional<Options> options) throws Exception {

        if (options.isPresent()) {
          options.get().validate(Arrays.asList(Options.Option.RETRY_CONFIG));
        }

        String _baseUrl = this.sdkConfiguration.serverUrl;
        String _url = Utils.generateURL(
                _baseUrl,
                "/v1/integrations/active");
        
        HTTPRequest _req = new HTTPRequest(_url, "GET");
        _req.addHeader("Accept", "application/json")
            .addHeader("user-agent", 
                this.sdkConfiguration.userAgent);

        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());

        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HTTPRequest _finalReq = _req;
        co.novu.co.novu.sdk.utils.RetryConfig _retryConfig;
        if (options.isPresent() && options.get().retryConfig().isPresent()) {
            _retryConfig = options.get().retryConfig().get();
        } else if (this.sdkConfiguration.retryConfig.isPresent()) {
            _retryConfig = this.sdkConfiguration.retryConfig.get();
        } else {
            _retryConfig = co.novu.co.novu.sdk.utils.RetryConfig.builder()
                .backoff(co.novu.co.novu.sdk.utils.BackoffStrategy.builder()
                            .initialInterval(500, java.util.concurrent.TimeUnit.MILLISECONDS)
                            .maxInterval(30000, java.util.concurrent.TimeUnit.MILLISECONDS)
                            .baseFactor((double)(1.5))
                            .maxElapsedTime(3600000, java.util.concurrent.TimeUnit.MILLISECONDS)
                            .retryConnectError(true)
                            .build())
                .build();
        }
        List<String> _statusCodes = new java.util.ArrayList<>();
        _statusCodes.add("408");
        _statusCodes.add("409");
        _statusCodes.add("429");
        _statusCodes.add("5XX");
        co.novu.co.novu.sdk.utils.Retries _retries = co.novu.co.novu.sdk.utils.Retries.builder()
            .action(() -> {
                HttpRequest _r = null;
                try {
                    _r = sdkConfiguration.hooks()
                        .beforeRequest(
                            new BeforeRequestContextImpl("IntegrationsController_getActiveIntegrations", Optional.empty(), sdkConfiguration.securitySource()),
                            _finalReq.build());
                } catch (Exception _e) {
                    throw new NonRetryableException(_e);
                }
                try {
                    return _client.send(_r);
                } catch (Exception _e) {
                    return sdkConfiguration.hooks()
                        .afterError(
                            new AfterErrorContextImpl("IntegrationsController_getActiveIntegrations", Optional.empty(), sdkConfiguration.securitySource()), 
                            Optional.empty(),
                            Optional.of(_e));
                }
            })
            .retryConfig(_retryConfig)
            .statusCodes(_statusCodes)
            .build();
        HttpResponse<InputStream> _httpRes = sdkConfiguration.hooks()
                 .afterSuccess(
                     new AfterSuccessContextImpl("IntegrationsController_getActiveIntegrations", Optional.empty(), sdkConfiguration.securitySource()),
                     _retries.run());
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        co.novu.co.novu.sdk.models.operations.IntegrationsControllerGetActiveIntegrationsResponse.Builder _resBuilder = 
            co.novu.co.novu.sdk.models.operations.IntegrationsControllerGetActiveIntegrationsResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        co.novu.co.novu.sdk.models.operations.IntegrationsControllerGetActiveIntegrationsResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "200")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                java.util.List<co.novu.co.novu.sdk.models.components.IntegrationResponseDto> _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<java.util.List<co.novu.co.novu.sdk.models.components.IntegrationResponseDto>>() {});
                _res.withIntegrationResponseDtos(java.util.Optional.ofNullable(_out));
                return _res;
            } else {
                throw new SDKError(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.toByteArrayAndClose(_httpRes.body()));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "409", "429", "4XX", "503", "5XX")) {
            // no content 
            throw new SDKError(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.toByteArrayAndClose(_httpRes.body()));
        }
        throw new SDKError(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.toByteArrayAndClose(_httpRes.body()));
    }



    /**
     * Set integration as primary
     * @return The call builder
     */
    public co.novu.co.novu.sdk.models.operations.IntegrationsControllerSetIntegrationAsPrimaryRequestBuilder setAsPrimary() {
        return new co.novu.co.novu.sdk.models.operations.IntegrationsControllerSetIntegrationAsPrimaryRequestBuilder(this);
    }

    /**
     * Set integration as primary
     * @param integrationId
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public co.novu.co.novu.sdk.models.operations.IntegrationsControllerSetIntegrationAsPrimaryResponse setAsPrimary(
            String integrationId) throws Exception {
        return setAsPrimary(integrationId, Optional.empty());
    }
    /**
     * Set integration as primary
     * @param integrationId
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public co.novu.co.novu.sdk.models.operations.IntegrationsControllerSetIntegrationAsPrimaryResponse setAsPrimary(
            String integrationId,
            Optional<Options> options) throws Exception {

        if (options.isPresent()) {
          options.get().validate(Arrays.asList(Options.Option.RETRY_CONFIG));
        }

        co.novu.co.novu.sdk.models.operations.IntegrationsControllerSetIntegrationAsPrimaryRequest request =
            co.novu.co.novu.sdk.models.operations.IntegrationsControllerSetIntegrationAsPrimaryRequest
                .builder()
                .integrationId(integrationId)
                .build();
        
        String _baseUrl = this.sdkConfiguration.serverUrl;
        String _url = Utils.generateURL(
                co.novu.co.novu.sdk.models.operations.IntegrationsControllerSetIntegrationAsPrimaryRequest.class,
                _baseUrl,
                "/v1/integrations/{integrationId}/set-primary",
                request, null);
        
        HTTPRequest _req = new HTTPRequest(_url, "POST");
        _req.addHeader("Accept", "application/json")
            .addHeader("user-agent", 
                this.sdkConfiguration.userAgent);

        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());

        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HTTPRequest _finalReq = _req;
        co.novu.co.novu.sdk.utils.RetryConfig _retryConfig;
        if (options.isPresent() && options.get().retryConfig().isPresent()) {
            _retryConfig = options.get().retryConfig().get();
        } else if (this.sdkConfiguration.retryConfig.isPresent()) {
            _retryConfig = this.sdkConfiguration.retryConfig.get();
        } else {
            _retryConfig = co.novu.co.novu.sdk.utils.RetryConfig.builder()
                .backoff(co.novu.co.novu.sdk.utils.BackoffStrategy.builder()
                            .initialInterval(500, java.util.concurrent.TimeUnit.MILLISECONDS)
                            .maxInterval(30000, java.util.concurrent.TimeUnit.MILLISECONDS)
                            .baseFactor((double)(1.5))
                            .maxElapsedTime(3600000, java.util.concurrent.TimeUnit.MILLISECONDS)
                            .retryConnectError(true)
                            .build())
                .build();
        }
        List<String> _statusCodes = new java.util.ArrayList<>();
        _statusCodes.add("408");
        _statusCodes.add("409");
        _statusCodes.add("429");
        _statusCodes.add("5XX");
        co.novu.co.novu.sdk.utils.Retries _retries = co.novu.co.novu.sdk.utils.Retries.builder()
            .action(() -> {
                HttpRequest _r = null;
                try {
                    _r = sdkConfiguration.hooks()
                        .beforeRequest(
                            new BeforeRequestContextImpl("IntegrationsController_setIntegrationAsPrimary", Optional.empty(), sdkConfiguration.securitySource()),
                            _finalReq.build());
                } catch (Exception _e) {
                    throw new NonRetryableException(_e);
                }
                try {
                    return _client.send(_r);
                } catch (Exception _e) {
                    return sdkConfiguration.hooks()
                        .afterError(
                            new AfterErrorContextImpl("IntegrationsController_setIntegrationAsPrimary", Optional.empty(), sdkConfiguration.securitySource()), 
                            Optional.empty(),
                            Optional.of(_e));
                }
            })
            .retryConfig(_retryConfig)
            .statusCodes(_statusCodes)
            .build();
        HttpResponse<InputStream> _httpRes = sdkConfiguration.hooks()
                 .afterSuccess(
                     new AfterSuccessContextImpl("IntegrationsController_setIntegrationAsPrimary", Optional.empty(), sdkConfiguration.securitySource()),
                     _retries.run());
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        co.novu.co.novu.sdk.models.operations.IntegrationsControllerSetIntegrationAsPrimaryResponse.Builder _resBuilder = 
            co.novu.co.novu.sdk.models.operations.IntegrationsControllerSetIntegrationAsPrimaryResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        co.novu.co.novu.sdk.models.operations.IntegrationsControllerSetIntegrationAsPrimaryResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "200", "201")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                co.novu.co.novu.sdk.models.components.IntegrationResponseDto _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<co.novu.co.novu.sdk.models.components.IntegrationResponseDto>() {});
                _res.withIntegrationResponseDto(java.util.Optional.ofNullable(_out));
                return _res;
            } else {
                throw new SDKError(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.toByteArrayAndClose(_httpRes.body()));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "409", "429", "4XX", "503", "5XX")) {
            // no content 
            throw new SDKError(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.toByteArrayAndClose(_httpRes.body()));
        }
        throw new SDKError(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.toByteArrayAndClose(_httpRes.body()));
    }



    /**
     * Update integration
     * @return The call builder
     */
    public co.novu.co.novu.sdk.models.operations.IntegrationsControllerUpdateIntegrationByIdRequestBuilder update() {
        return new co.novu.co.novu.sdk.models.operations.IntegrationsControllerUpdateIntegrationByIdRequestBuilder(this);
    }

    /**
     * Update integration
     * @param integrationId
     * @param updateIntegrationRequestDto
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public co.novu.co.novu.sdk.models.operations.IntegrationsControllerUpdateIntegrationByIdResponse update(
            String integrationId,
            co.novu.co.novu.sdk.models.components.UpdateIntegrationRequestDto updateIntegrationRequestDto) throws Exception {
        return update(integrationId, updateIntegrationRequestDto, Optional.empty());
    }
    /**
     * Update integration
     * @param integrationId
     * @param updateIntegrationRequestDto
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public co.novu.co.novu.sdk.models.operations.IntegrationsControllerUpdateIntegrationByIdResponse update(
            String integrationId,
            co.novu.co.novu.sdk.models.components.UpdateIntegrationRequestDto updateIntegrationRequestDto,
            Optional<Options> options) throws Exception {

        if (options.isPresent()) {
          options.get().validate(Arrays.asList(Options.Option.RETRY_CONFIG));
        }

        co.novu.co.novu.sdk.models.operations.IntegrationsControllerUpdateIntegrationByIdRequest request =
            co.novu.co.novu.sdk.models.operations.IntegrationsControllerUpdateIntegrationByIdRequest
                .builder()
                .integrationId(integrationId)
                .updateIntegrationRequestDto(updateIntegrationRequestDto)
                .build();
        
        String _baseUrl = this.sdkConfiguration.serverUrl;
        String _url = Utils.generateURL(
                co.novu.co.novu.sdk.models.operations.IntegrationsControllerUpdateIntegrationByIdRequest.class,
                _baseUrl,
                "/v1/integrations/{integrationId}",
                request, null);
        
        HTTPRequest _req = new HTTPRequest(_url, "PUT");
        Object _convertedRequest = Utils.convertToShape(request, Utils.JsonShape.DEFAULT,
            new TypeReference<java.lang.Object>() {});
        SerializedBody _serializedRequestBody = Utils.serializeRequestBody(
                _convertedRequest, "updateIntegrationRequestDto", "json", false);
        if (_serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        _req.setBody(Optional.ofNullable(_serializedRequestBody));
        _req.addHeader("Accept", "application/json")
            .addHeader("user-agent", 
                this.sdkConfiguration.userAgent);

        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());

        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HTTPRequest _finalReq = _req;
        co.novu.co.novu.sdk.utils.RetryConfig _retryConfig;
        if (options.isPresent() && options.get().retryConfig().isPresent()) {
            _retryConfig = options.get().retryConfig().get();
        } else if (this.sdkConfiguration.retryConfig.isPresent()) {
            _retryConfig = this.sdkConfiguration.retryConfig.get();
        } else {
            _retryConfig = co.novu.co.novu.sdk.utils.RetryConfig.builder()
                .backoff(co.novu.co.novu.sdk.utils.BackoffStrategy.builder()
                            .initialInterval(500, java.util.concurrent.TimeUnit.MILLISECONDS)
                            .maxInterval(30000, java.util.concurrent.TimeUnit.MILLISECONDS)
                            .baseFactor((double)(1.5))
                            .maxElapsedTime(3600000, java.util.concurrent.TimeUnit.MILLISECONDS)
                            .retryConnectError(true)
                            .build())
                .build();
        }
        List<String> _statusCodes = new java.util.ArrayList<>();
        _statusCodes.add("408");
        _statusCodes.add("409");
        _statusCodes.add("429");
        _statusCodes.add("5XX");
        co.novu.co.novu.sdk.utils.Retries _retries = co.novu.co.novu.sdk.utils.Retries.builder()
            .action(() -> {
                HttpRequest _r = null;
                try {
                    _r = sdkConfiguration.hooks()
                        .beforeRequest(
                            new BeforeRequestContextImpl("IntegrationsController_updateIntegrationById", Optional.empty(), sdkConfiguration.securitySource()),
                            _finalReq.build());
                } catch (Exception _e) {
                    throw new NonRetryableException(_e);
                }
                try {
                    return _client.send(_r);
                } catch (Exception _e) {
                    return sdkConfiguration.hooks()
                        .afterError(
                            new AfterErrorContextImpl("IntegrationsController_updateIntegrationById", Optional.empty(), sdkConfiguration.securitySource()), 
                            Optional.empty(),
                            Optional.of(_e));
                }
            })
            .retryConfig(_retryConfig)
            .statusCodes(_statusCodes)
            .build();
        HttpResponse<InputStream> _httpRes = sdkConfiguration.hooks()
                 .afterSuccess(
                     new AfterSuccessContextImpl("IntegrationsController_updateIntegrationById", Optional.empty(), sdkConfiguration.securitySource()),
                     _retries.run());
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        co.novu.co.novu.sdk.models.operations.IntegrationsControllerUpdateIntegrationByIdResponse.Builder _resBuilder = 
            co.novu.co.novu.sdk.models.operations.IntegrationsControllerUpdateIntegrationByIdResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        co.novu.co.novu.sdk.models.operations.IntegrationsControllerUpdateIntegrationByIdResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "200")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                co.novu.co.novu.sdk.models.components.IntegrationResponseDto _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<co.novu.co.novu.sdk.models.components.IntegrationResponseDto>() {});
                _res.withIntegrationResponseDto(java.util.Optional.ofNullable(_out));
                return _res;
            } else {
                throw new SDKError(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.toByteArrayAndClose(_httpRes.body()));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "409", "429", "4XX", "503", "5XX")) {
            // no content 
            throw new SDKError(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.toByteArrayAndClose(_httpRes.body()));
        }
        throw new SDKError(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.toByteArrayAndClose(_httpRes.body()));
    }

}
