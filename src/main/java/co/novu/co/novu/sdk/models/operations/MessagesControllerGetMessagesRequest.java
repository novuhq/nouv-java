/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package co.novu.co.novu.sdk.models.operations;

import co.novu.co.novu.sdk.utils.LazySingletonValue;
import co.novu.co.novu.sdk.utils.SpeakeasyMetadata;
import co.novu.co.novu.sdk.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;

public class MessagesControllerGetMessagesRequest {

    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=channel")
    private Optional<? extends QueryParamChannel> channel;

    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=subscriberId")
    private Optional<? extends String> subscriberId;

    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=transactionId")
    private Optional<? extends java.util.List<String>> transactionId;

    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=page")
    private Optional<? extends Double> page;

    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=limit")
    private Optional<? extends Double> limit;

    @JsonCreator
    public MessagesControllerGetMessagesRequest(
            Optional<? extends QueryParamChannel> channel,
            Optional<? extends String> subscriberId,
            Optional<? extends java.util.List<String>> transactionId,
            Optional<? extends Double> page,
            Optional<? extends Double> limit) {
        Utils.checkNotNull(channel, "channel");
        Utils.checkNotNull(subscriberId, "subscriberId");
        Utils.checkNotNull(transactionId, "transactionId");
        Utils.checkNotNull(page, "page");
        Utils.checkNotNull(limit, "limit");
        this.channel = channel;
        this.subscriberId = subscriberId;
        this.transactionId = transactionId;
        this.page = page;
        this.limit = limit;
    }
    
    public MessagesControllerGetMessagesRequest() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<QueryParamChannel> channel() {
        return (Optional<QueryParamChannel>) channel;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> subscriberId() {
        return (Optional<String>) subscriberId;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<java.util.List<String>> transactionId() {
        return (Optional<java.util.List<String>>) transactionId;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Double> page() {
        return (Optional<Double>) page;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Double> limit() {
        return (Optional<Double>) limit;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public MessagesControllerGetMessagesRequest withChannel(QueryParamChannel channel) {
        Utils.checkNotNull(channel, "channel");
        this.channel = Optional.ofNullable(channel);
        return this;
    }

    public MessagesControllerGetMessagesRequest withChannel(Optional<? extends QueryParamChannel> channel) {
        Utils.checkNotNull(channel, "channel");
        this.channel = channel;
        return this;
    }

    public MessagesControllerGetMessagesRequest withSubscriberId(String subscriberId) {
        Utils.checkNotNull(subscriberId, "subscriberId");
        this.subscriberId = Optional.ofNullable(subscriberId);
        return this;
    }

    public MessagesControllerGetMessagesRequest withSubscriberId(Optional<? extends String> subscriberId) {
        Utils.checkNotNull(subscriberId, "subscriberId");
        this.subscriberId = subscriberId;
        return this;
    }

    public MessagesControllerGetMessagesRequest withTransactionId(java.util.List<String> transactionId) {
        Utils.checkNotNull(transactionId, "transactionId");
        this.transactionId = Optional.ofNullable(transactionId);
        return this;
    }

    public MessagesControllerGetMessagesRequest withTransactionId(Optional<? extends java.util.List<String>> transactionId) {
        Utils.checkNotNull(transactionId, "transactionId");
        this.transactionId = transactionId;
        return this;
    }

    public MessagesControllerGetMessagesRequest withPage(double page) {
        Utils.checkNotNull(page, "page");
        this.page = Optional.ofNullable(page);
        return this;
    }

    public MessagesControllerGetMessagesRequest withPage(Optional<? extends Double> page) {
        Utils.checkNotNull(page, "page");
        this.page = page;
        return this;
    }

    public MessagesControllerGetMessagesRequest withLimit(double limit) {
        Utils.checkNotNull(limit, "limit");
        this.limit = Optional.ofNullable(limit);
        return this;
    }

    public MessagesControllerGetMessagesRequest withLimit(Optional<? extends Double> limit) {
        Utils.checkNotNull(limit, "limit");
        this.limit = limit;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        MessagesControllerGetMessagesRequest other = (MessagesControllerGetMessagesRequest) o;
        return 
            java.util.Objects.deepEquals(this.channel, other.channel) &&
            java.util.Objects.deepEquals(this.subscriberId, other.subscriberId) &&
            java.util.Objects.deepEquals(this.transactionId, other.transactionId) &&
            java.util.Objects.deepEquals(this.page, other.page) &&
            java.util.Objects.deepEquals(this.limit, other.limit);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            channel,
            subscriberId,
            transactionId,
            page,
            limit);
    }
    
    @Override
    public String toString() {
        return Utils.toString(MessagesControllerGetMessagesRequest.class,
                "channel", channel,
                "subscriberId", subscriberId,
                "transactionId", transactionId,
                "page", page,
                "limit", limit);
    }
    
    public final static class Builder {
 
        private Optional<? extends QueryParamChannel> channel = Optional.empty();
 
        private Optional<? extends String> subscriberId = Optional.empty();
 
        private Optional<? extends java.util.List<String>> transactionId = Optional.empty();
 
        private Optional<? extends Double> page;
 
        private Optional<? extends Double> limit;  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder channel(QueryParamChannel channel) {
            Utils.checkNotNull(channel, "channel");
            this.channel = Optional.ofNullable(channel);
            return this;
        }

        public Builder channel(Optional<? extends QueryParamChannel> channel) {
            Utils.checkNotNull(channel, "channel");
            this.channel = channel;
            return this;
        }

        public Builder subscriberId(String subscriberId) {
            Utils.checkNotNull(subscriberId, "subscriberId");
            this.subscriberId = Optional.ofNullable(subscriberId);
            return this;
        }

        public Builder subscriberId(Optional<? extends String> subscriberId) {
            Utils.checkNotNull(subscriberId, "subscriberId");
            this.subscriberId = subscriberId;
            return this;
        }

        public Builder transactionId(java.util.List<String> transactionId) {
            Utils.checkNotNull(transactionId, "transactionId");
            this.transactionId = Optional.ofNullable(transactionId);
            return this;
        }

        public Builder transactionId(Optional<? extends java.util.List<String>> transactionId) {
            Utils.checkNotNull(transactionId, "transactionId");
            this.transactionId = transactionId;
            return this;
        }

        public Builder page(double page) {
            Utils.checkNotNull(page, "page");
            this.page = Optional.ofNullable(page);
            return this;
        }

        public Builder page(Optional<? extends Double> page) {
            Utils.checkNotNull(page, "page");
            this.page = page;
            return this;
        }

        public Builder limit(double limit) {
            Utils.checkNotNull(limit, "limit");
            this.limit = Optional.ofNullable(limit);
            return this;
        }

        public Builder limit(Optional<? extends Double> limit) {
            Utils.checkNotNull(limit, "limit");
            this.limit = limit;
            return this;
        }
        
        public MessagesControllerGetMessagesRequest build() {
            if (page == null) {
                page = _SINGLETON_VALUE_Page.value();
            }
            if (limit == null) {
                limit = _SINGLETON_VALUE_Limit.value();
            }
            return new MessagesControllerGetMessagesRequest(
                channel,
                subscriberId,
                transactionId,
                page,
                limit);
        }

        private static final LazySingletonValue<Optional<? extends Double>> _SINGLETON_VALUE_Page =
                new LazySingletonValue<>(
                        "page",
                        "0",
                        new TypeReference<Optional<? extends Double>>() {});

        private static final LazySingletonValue<Optional<? extends Double>> _SINGLETON_VALUE_Limit =
                new LazySingletonValue<>(
                        "limit",
                        "10",
                        new TypeReference<Optional<? extends Double>>() {});
    }
}

