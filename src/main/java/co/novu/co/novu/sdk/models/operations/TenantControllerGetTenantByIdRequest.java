/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package co.novu.co.novu.sdk.models.operations;

import co.novu.co.novu.sdk.utils.SpeakeasyMetadata;
import co.novu.co.novu.sdk.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;

public class TenantControllerGetTenantByIdRequest {

    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=identifier")
    private String identifier;

    @JsonCreator
    public TenantControllerGetTenantByIdRequest(
            String identifier) {
        Utils.checkNotNull(identifier, "identifier");
        this.identifier = identifier;
    }

    @JsonIgnore
    public String identifier() {
        return identifier;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public TenantControllerGetTenantByIdRequest withIdentifier(String identifier) {
        Utils.checkNotNull(identifier, "identifier");
        this.identifier = identifier;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        TenantControllerGetTenantByIdRequest other = (TenantControllerGetTenantByIdRequest) o;
        return 
            java.util.Objects.deepEquals(this.identifier, other.identifier);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            identifier);
    }
    
    @Override
    public String toString() {
        return Utils.toString(TenantControllerGetTenantByIdRequest.class,
                "identifier", identifier);
    }
    
    public final static class Builder {
 
        private String identifier;  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder identifier(String identifier) {
            Utils.checkNotNull(identifier, "identifier");
            this.identifier = identifier;
            return this;
        }
        
        public TenantControllerGetTenantByIdRequest build() {
            return new TenantControllerGetTenantByIdRequest(
                identifier);
        }
    }
}

