/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package co.novu.co.novu.sdk.models.operations;

import co.novu.co.novu.sdk.utils.SpeakeasyMetadata;
import co.novu.co.novu.sdk.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;

public class LayoutsControllerListLayoutsRequest {

    /**
     * Number of page for pagination
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=page")
    private Optional<? extends Double> page;

    /**
     * Size of page for pagination
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=pageSize")
    private Optional<? extends Double> pageSize;

    /**
     * Sort field. Currently only supported `createdAt`
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=sortBy")
    private Optional<? extends String> sortBy;

    /**
     * Direction of the sorting query param
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=orderBy")
    private Optional<? extends OrderBy> orderBy;

    @JsonCreator
    public LayoutsControllerListLayoutsRequest(
            Optional<? extends Double> page,
            Optional<? extends Double> pageSize,
            Optional<? extends String> sortBy,
            Optional<? extends OrderBy> orderBy) {
        Utils.checkNotNull(page, "page");
        Utils.checkNotNull(pageSize, "pageSize");
        Utils.checkNotNull(sortBy, "sortBy");
        Utils.checkNotNull(orderBy, "orderBy");
        this.page = page;
        this.pageSize = pageSize;
        this.sortBy = sortBy;
        this.orderBy = orderBy;
    }
    
    public LayoutsControllerListLayoutsRequest() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * Number of page for pagination
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Double> page() {
        return (Optional<Double>) page;
    }

    /**
     * Size of page for pagination
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Double> pageSize() {
        return (Optional<Double>) pageSize;
    }

    /**
     * Sort field. Currently only supported `createdAt`
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> sortBy() {
        return (Optional<String>) sortBy;
    }

    /**
     * Direction of the sorting query param
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<OrderBy> orderBy() {
        return (Optional<OrderBy>) orderBy;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Number of page for pagination
     */
    public LayoutsControllerListLayoutsRequest withPage(double page) {
        Utils.checkNotNull(page, "page");
        this.page = Optional.ofNullable(page);
        return this;
    }

    /**
     * Number of page for pagination
     */
    public LayoutsControllerListLayoutsRequest withPage(Optional<? extends Double> page) {
        Utils.checkNotNull(page, "page");
        this.page = page;
        return this;
    }

    /**
     * Size of page for pagination
     */
    public LayoutsControllerListLayoutsRequest withPageSize(double pageSize) {
        Utils.checkNotNull(pageSize, "pageSize");
        this.pageSize = Optional.ofNullable(pageSize);
        return this;
    }

    /**
     * Size of page for pagination
     */
    public LayoutsControllerListLayoutsRequest withPageSize(Optional<? extends Double> pageSize) {
        Utils.checkNotNull(pageSize, "pageSize");
        this.pageSize = pageSize;
        return this;
    }

    /**
     * Sort field. Currently only supported `createdAt`
     */
    public LayoutsControllerListLayoutsRequest withSortBy(String sortBy) {
        Utils.checkNotNull(sortBy, "sortBy");
        this.sortBy = Optional.ofNullable(sortBy);
        return this;
    }

    /**
     * Sort field. Currently only supported `createdAt`
     */
    public LayoutsControllerListLayoutsRequest withSortBy(Optional<? extends String> sortBy) {
        Utils.checkNotNull(sortBy, "sortBy");
        this.sortBy = sortBy;
        return this;
    }

    /**
     * Direction of the sorting query param
     */
    public LayoutsControllerListLayoutsRequest withOrderBy(OrderBy orderBy) {
        Utils.checkNotNull(orderBy, "orderBy");
        this.orderBy = Optional.ofNullable(orderBy);
        return this;
    }

    /**
     * Direction of the sorting query param
     */
    public LayoutsControllerListLayoutsRequest withOrderBy(Optional<? extends OrderBy> orderBy) {
        Utils.checkNotNull(orderBy, "orderBy");
        this.orderBy = orderBy;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        LayoutsControllerListLayoutsRequest other = (LayoutsControllerListLayoutsRequest) o;
        return 
            java.util.Objects.deepEquals(this.page, other.page) &&
            java.util.Objects.deepEquals(this.pageSize, other.pageSize) &&
            java.util.Objects.deepEquals(this.sortBy, other.sortBy) &&
            java.util.Objects.deepEquals(this.orderBy, other.orderBy);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            page,
            pageSize,
            sortBy,
            orderBy);
    }
    
    @Override
    public String toString() {
        return Utils.toString(LayoutsControllerListLayoutsRequest.class,
                "page", page,
                "pageSize", pageSize,
                "sortBy", sortBy,
                "orderBy", orderBy);
    }
    
    public final static class Builder {
 
        private Optional<? extends Double> page = Optional.empty();
 
        private Optional<? extends Double> pageSize = Optional.empty();
 
        private Optional<? extends String> sortBy = Optional.empty();
 
        private Optional<? extends OrderBy> orderBy = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Number of page for pagination
         */
        public Builder page(double page) {
            Utils.checkNotNull(page, "page");
            this.page = Optional.ofNullable(page);
            return this;
        }

        /**
         * Number of page for pagination
         */
        public Builder page(Optional<? extends Double> page) {
            Utils.checkNotNull(page, "page");
            this.page = page;
            return this;
        }

        /**
         * Size of page for pagination
         */
        public Builder pageSize(double pageSize) {
            Utils.checkNotNull(pageSize, "pageSize");
            this.pageSize = Optional.ofNullable(pageSize);
            return this;
        }

        /**
         * Size of page for pagination
         */
        public Builder pageSize(Optional<? extends Double> pageSize) {
            Utils.checkNotNull(pageSize, "pageSize");
            this.pageSize = pageSize;
            return this;
        }

        /**
         * Sort field. Currently only supported `createdAt`
         */
        public Builder sortBy(String sortBy) {
            Utils.checkNotNull(sortBy, "sortBy");
            this.sortBy = Optional.ofNullable(sortBy);
            return this;
        }

        /**
         * Sort field. Currently only supported `createdAt`
         */
        public Builder sortBy(Optional<? extends String> sortBy) {
            Utils.checkNotNull(sortBy, "sortBy");
            this.sortBy = sortBy;
            return this;
        }

        /**
         * Direction of the sorting query param
         */
        public Builder orderBy(OrderBy orderBy) {
            Utils.checkNotNull(orderBy, "orderBy");
            this.orderBy = Optional.ofNullable(orderBy);
            return this;
        }

        /**
         * Direction of the sorting query param
         */
        public Builder orderBy(Optional<? extends OrderBy> orderBy) {
            Utils.checkNotNull(orderBy, "orderBy");
            this.orderBy = orderBy;
            return this;
        }
        
        public LayoutsControllerListLayoutsRequest build() {
            return new LayoutsControllerListLayoutsRequest(
                page,
                pageSize,
                sortBy,
                orderBy);
        }
    }
}

