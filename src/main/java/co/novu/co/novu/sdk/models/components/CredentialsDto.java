/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package co.novu.co.novu.sdk.models.components;

import co.novu.co.novu.sdk.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;

public class CredentialsDto {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("accountSid")
    private Optional<? extends String> accountSid;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("alertUid")
    private Optional<? extends String> alertUid;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("apiKey")
    private Optional<? extends String> apiKey;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("apiKeyRequestHeader")
    private Optional<? extends String> apiKeyRequestHeader;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("apiToken")
    private Optional<? extends String> apiToken;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("applicationId")
    private Optional<? extends String> applicationId;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("authenticateByToken")
    private Optional<? extends Boolean> authenticateByToken;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("authenticationTokenKey")
    private Optional<? extends String> authenticationTokenKey;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("baseUrl")
    private Optional<? extends String> baseUrl;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("channelId")
    private Optional<? extends String> channelId;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("clientId")
    private Optional<? extends String> clientId;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("datePath")
    private Optional<? extends String> datePath;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("domain")
    private Optional<? extends String> domain;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("externalLink")
    private Optional<? extends String> externalLink;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("from")
    private Optional<? extends String> from;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("hmac")
    private Optional<? extends Boolean> hmac;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("host")
    private Optional<? extends String> host;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("idPath")
    private Optional<? extends String> idPath;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ignoreTls")
    private Optional<? extends Boolean> ignoreTls;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("imageUrl")
    private Optional<? extends String> imageUrl;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("instanceId")
    private Optional<? extends String> instanceId;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ipPoolName")
    private Optional<? extends String> ipPoolName;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("messageProfileId")
    private Optional<? extends String> messageProfileId;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("password")
    private Optional<? extends String> password;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("phoneNumberIdentification")
    private Optional<? extends String> phoneNumberIdentification;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("port")
    private Optional<? extends String> port;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("projectName")
    private Optional<? extends String> projectName;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("redirectUrl")
    private Optional<? extends String> redirectUrl;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("region")
    private Optional<? extends String> region;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("requireTls")
    private Optional<? extends Boolean> requireTls;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("secretKey")
    private Optional<? extends String> secretKey;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("secretKeyRequestHeader")
    private Optional<? extends String> secretKeyRequestHeader;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("secure")
    private Optional<? extends Boolean> secure;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("senderName")
    private Optional<? extends String> senderName;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("serviceAccount")
    private Optional<? extends String> serviceAccount;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("state")
    private Optional<? extends String> state;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("title")
    private Optional<? extends String> title;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tlsOptions")
    private Optional<? extends TlsOptions> tlsOptions;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("token")
    private Optional<? extends String> token;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("user")
    private Optional<? extends String> user;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("webhookUrl")
    private Optional<? extends String> webhookUrl;

    @JsonCreator
    public CredentialsDto(
            @JsonProperty("accountSid") Optional<? extends String> accountSid,
            @JsonProperty("alertUid") Optional<? extends String> alertUid,
            @JsonProperty("apiKey") Optional<? extends String> apiKey,
            @JsonProperty("apiKeyRequestHeader") Optional<? extends String> apiKeyRequestHeader,
            @JsonProperty("apiToken") Optional<? extends String> apiToken,
            @JsonProperty("applicationId") Optional<? extends String> applicationId,
            @JsonProperty("authenticateByToken") Optional<? extends Boolean> authenticateByToken,
            @JsonProperty("authenticationTokenKey") Optional<? extends String> authenticationTokenKey,
            @JsonProperty("baseUrl") Optional<? extends String> baseUrl,
            @JsonProperty("channelId") Optional<? extends String> channelId,
            @JsonProperty("clientId") Optional<? extends String> clientId,
            @JsonProperty("datePath") Optional<? extends String> datePath,
            @JsonProperty("domain") Optional<? extends String> domain,
            @JsonProperty("externalLink") Optional<? extends String> externalLink,
            @JsonProperty("from") Optional<? extends String> from,
            @JsonProperty("hmac") Optional<? extends Boolean> hmac,
            @JsonProperty("host") Optional<? extends String> host,
            @JsonProperty("idPath") Optional<? extends String> idPath,
            @JsonProperty("ignoreTls") Optional<? extends Boolean> ignoreTls,
            @JsonProperty("imageUrl") Optional<? extends String> imageUrl,
            @JsonProperty("instanceId") Optional<? extends String> instanceId,
            @JsonProperty("ipPoolName") Optional<? extends String> ipPoolName,
            @JsonProperty("messageProfileId") Optional<? extends String> messageProfileId,
            @JsonProperty("password") Optional<? extends String> password,
            @JsonProperty("phoneNumberIdentification") Optional<? extends String> phoneNumberIdentification,
            @JsonProperty("port") Optional<? extends String> port,
            @JsonProperty("projectName") Optional<? extends String> projectName,
            @JsonProperty("redirectUrl") Optional<? extends String> redirectUrl,
            @JsonProperty("region") Optional<? extends String> region,
            @JsonProperty("requireTls") Optional<? extends Boolean> requireTls,
            @JsonProperty("secretKey") Optional<? extends String> secretKey,
            @JsonProperty("secretKeyRequestHeader") Optional<? extends String> secretKeyRequestHeader,
            @JsonProperty("secure") Optional<? extends Boolean> secure,
            @JsonProperty("senderName") Optional<? extends String> senderName,
            @JsonProperty("serviceAccount") Optional<? extends String> serviceAccount,
            @JsonProperty("state") Optional<? extends String> state,
            @JsonProperty("title") Optional<? extends String> title,
            @JsonProperty("tlsOptions") Optional<? extends TlsOptions> tlsOptions,
            @JsonProperty("token") Optional<? extends String> token,
            @JsonProperty("user") Optional<? extends String> user,
            @JsonProperty("webhookUrl") Optional<? extends String> webhookUrl) {
        Utils.checkNotNull(accountSid, "accountSid");
        Utils.checkNotNull(alertUid, "alertUid");
        Utils.checkNotNull(apiKey, "apiKey");
        Utils.checkNotNull(apiKeyRequestHeader, "apiKeyRequestHeader");
        Utils.checkNotNull(apiToken, "apiToken");
        Utils.checkNotNull(applicationId, "applicationId");
        Utils.checkNotNull(authenticateByToken, "authenticateByToken");
        Utils.checkNotNull(authenticationTokenKey, "authenticationTokenKey");
        Utils.checkNotNull(baseUrl, "baseUrl");
        Utils.checkNotNull(channelId, "channelId");
        Utils.checkNotNull(clientId, "clientId");
        Utils.checkNotNull(datePath, "datePath");
        Utils.checkNotNull(domain, "domain");
        Utils.checkNotNull(externalLink, "externalLink");
        Utils.checkNotNull(from, "from");
        Utils.checkNotNull(hmac, "hmac");
        Utils.checkNotNull(host, "host");
        Utils.checkNotNull(idPath, "idPath");
        Utils.checkNotNull(ignoreTls, "ignoreTls");
        Utils.checkNotNull(imageUrl, "imageUrl");
        Utils.checkNotNull(instanceId, "instanceId");
        Utils.checkNotNull(ipPoolName, "ipPoolName");
        Utils.checkNotNull(messageProfileId, "messageProfileId");
        Utils.checkNotNull(password, "password");
        Utils.checkNotNull(phoneNumberIdentification, "phoneNumberIdentification");
        Utils.checkNotNull(port, "port");
        Utils.checkNotNull(projectName, "projectName");
        Utils.checkNotNull(redirectUrl, "redirectUrl");
        Utils.checkNotNull(region, "region");
        Utils.checkNotNull(requireTls, "requireTls");
        Utils.checkNotNull(secretKey, "secretKey");
        Utils.checkNotNull(secretKeyRequestHeader, "secretKeyRequestHeader");
        Utils.checkNotNull(secure, "secure");
        Utils.checkNotNull(senderName, "senderName");
        Utils.checkNotNull(serviceAccount, "serviceAccount");
        Utils.checkNotNull(state, "state");
        Utils.checkNotNull(title, "title");
        Utils.checkNotNull(tlsOptions, "tlsOptions");
        Utils.checkNotNull(token, "token");
        Utils.checkNotNull(user, "user");
        Utils.checkNotNull(webhookUrl, "webhookUrl");
        this.accountSid = accountSid;
        this.alertUid = alertUid;
        this.apiKey = apiKey;
        this.apiKeyRequestHeader = apiKeyRequestHeader;
        this.apiToken = apiToken;
        this.applicationId = applicationId;
        this.authenticateByToken = authenticateByToken;
        this.authenticationTokenKey = authenticationTokenKey;
        this.baseUrl = baseUrl;
        this.channelId = channelId;
        this.clientId = clientId;
        this.datePath = datePath;
        this.domain = domain;
        this.externalLink = externalLink;
        this.from = from;
        this.hmac = hmac;
        this.host = host;
        this.idPath = idPath;
        this.ignoreTls = ignoreTls;
        this.imageUrl = imageUrl;
        this.instanceId = instanceId;
        this.ipPoolName = ipPoolName;
        this.messageProfileId = messageProfileId;
        this.password = password;
        this.phoneNumberIdentification = phoneNumberIdentification;
        this.port = port;
        this.projectName = projectName;
        this.redirectUrl = redirectUrl;
        this.region = region;
        this.requireTls = requireTls;
        this.secretKey = secretKey;
        this.secretKeyRequestHeader = secretKeyRequestHeader;
        this.secure = secure;
        this.senderName = senderName;
        this.serviceAccount = serviceAccount;
        this.state = state;
        this.title = title;
        this.tlsOptions = tlsOptions;
        this.token = token;
        this.user = user;
        this.webhookUrl = webhookUrl;
    }
    
    public CredentialsDto() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> accountSid() {
        return (Optional<String>) accountSid;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> alertUid() {
        return (Optional<String>) alertUid;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> apiKey() {
        return (Optional<String>) apiKey;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> apiKeyRequestHeader() {
        return (Optional<String>) apiKeyRequestHeader;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> apiToken() {
        return (Optional<String>) apiToken;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> applicationId() {
        return (Optional<String>) applicationId;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Boolean> authenticateByToken() {
        return (Optional<Boolean>) authenticateByToken;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> authenticationTokenKey() {
        return (Optional<String>) authenticationTokenKey;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> baseUrl() {
        return (Optional<String>) baseUrl;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> channelId() {
        return (Optional<String>) channelId;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> clientId() {
        return (Optional<String>) clientId;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> datePath() {
        return (Optional<String>) datePath;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> domain() {
        return (Optional<String>) domain;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> externalLink() {
        return (Optional<String>) externalLink;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> from() {
        return (Optional<String>) from;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Boolean> hmac() {
        return (Optional<Boolean>) hmac;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> host() {
        return (Optional<String>) host;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> idPath() {
        return (Optional<String>) idPath;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Boolean> ignoreTls() {
        return (Optional<Boolean>) ignoreTls;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> imageUrl() {
        return (Optional<String>) imageUrl;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> instanceId() {
        return (Optional<String>) instanceId;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> ipPoolName() {
        return (Optional<String>) ipPoolName;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> messageProfileId() {
        return (Optional<String>) messageProfileId;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> password() {
        return (Optional<String>) password;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> phoneNumberIdentification() {
        return (Optional<String>) phoneNumberIdentification;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> port() {
        return (Optional<String>) port;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> projectName() {
        return (Optional<String>) projectName;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> redirectUrl() {
        return (Optional<String>) redirectUrl;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> region() {
        return (Optional<String>) region;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Boolean> requireTls() {
        return (Optional<Boolean>) requireTls;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> secretKey() {
        return (Optional<String>) secretKey;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> secretKeyRequestHeader() {
        return (Optional<String>) secretKeyRequestHeader;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Boolean> secure() {
        return (Optional<Boolean>) secure;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> senderName() {
        return (Optional<String>) senderName;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> serviceAccount() {
        return (Optional<String>) serviceAccount;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> state() {
        return (Optional<String>) state;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> title() {
        return (Optional<String>) title;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<TlsOptions> tlsOptions() {
        return (Optional<TlsOptions>) tlsOptions;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> token() {
        return (Optional<String>) token;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> user() {
        return (Optional<String>) user;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> webhookUrl() {
        return (Optional<String>) webhookUrl;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public CredentialsDto withAccountSid(String accountSid) {
        Utils.checkNotNull(accountSid, "accountSid");
        this.accountSid = Optional.ofNullable(accountSid);
        return this;
    }

    public CredentialsDto withAccountSid(Optional<? extends String> accountSid) {
        Utils.checkNotNull(accountSid, "accountSid");
        this.accountSid = accountSid;
        return this;
    }

    public CredentialsDto withAlertUid(String alertUid) {
        Utils.checkNotNull(alertUid, "alertUid");
        this.alertUid = Optional.ofNullable(alertUid);
        return this;
    }

    public CredentialsDto withAlertUid(Optional<? extends String> alertUid) {
        Utils.checkNotNull(alertUid, "alertUid");
        this.alertUid = alertUid;
        return this;
    }

    public CredentialsDto withApiKey(String apiKey) {
        Utils.checkNotNull(apiKey, "apiKey");
        this.apiKey = Optional.ofNullable(apiKey);
        return this;
    }

    public CredentialsDto withApiKey(Optional<? extends String> apiKey) {
        Utils.checkNotNull(apiKey, "apiKey");
        this.apiKey = apiKey;
        return this;
    }

    public CredentialsDto withApiKeyRequestHeader(String apiKeyRequestHeader) {
        Utils.checkNotNull(apiKeyRequestHeader, "apiKeyRequestHeader");
        this.apiKeyRequestHeader = Optional.ofNullable(apiKeyRequestHeader);
        return this;
    }

    public CredentialsDto withApiKeyRequestHeader(Optional<? extends String> apiKeyRequestHeader) {
        Utils.checkNotNull(apiKeyRequestHeader, "apiKeyRequestHeader");
        this.apiKeyRequestHeader = apiKeyRequestHeader;
        return this;
    }

    public CredentialsDto withApiToken(String apiToken) {
        Utils.checkNotNull(apiToken, "apiToken");
        this.apiToken = Optional.ofNullable(apiToken);
        return this;
    }

    public CredentialsDto withApiToken(Optional<? extends String> apiToken) {
        Utils.checkNotNull(apiToken, "apiToken");
        this.apiToken = apiToken;
        return this;
    }

    public CredentialsDto withApplicationId(String applicationId) {
        Utils.checkNotNull(applicationId, "applicationId");
        this.applicationId = Optional.ofNullable(applicationId);
        return this;
    }

    public CredentialsDto withApplicationId(Optional<? extends String> applicationId) {
        Utils.checkNotNull(applicationId, "applicationId");
        this.applicationId = applicationId;
        return this;
    }

    public CredentialsDto withAuthenticateByToken(boolean authenticateByToken) {
        Utils.checkNotNull(authenticateByToken, "authenticateByToken");
        this.authenticateByToken = Optional.ofNullable(authenticateByToken);
        return this;
    }

    public CredentialsDto withAuthenticateByToken(Optional<? extends Boolean> authenticateByToken) {
        Utils.checkNotNull(authenticateByToken, "authenticateByToken");
        this.authenticateByToken = authenticateByToken;
        return this;
    }

    public CredentialsDto withAuthenticationTokenKey(String authenticationTokenKey) {
        Utils.checkNotNull(authenticationTokenKey, "authenticationTokenKey");
        this.authenticationTokenKey = Optional.ofNullable(authenticationTokenKey);
        return this;
    }

    public CredentialsDto withAuthenticationTokenKey(Optional<? extends String> authenticationTokenKey) {
        Utils.checkNotNull(authenticationTokenKey, "authenticationTokenKey");
        this.authenticationTokenKey = authenticationTokenKey;
        return this;
    }

    public CredentialsDto withBaseUrl(String baseUrl) {
        Utils.checkNotNull(baseUrl, "baseUrl");
        this.baseUrl = Optional.ofNullable(baseUrl);
        return this;
    }

    public CredentialsDto withBaseUrl(Optional<? extends String> baseUrl) {
        Utils.checkNotNull(baseUrl, "baseUrl");
        this.baseUrl = baseUrl;
        return this;
    }

    public CredentialsDto withChannelId(String channelId) {
        Utils.checkNotNull(channelId, "channelId");
        this.channelId = Optional.ofNullable(channelId);
        return this;
    }

    public CredentialsDto withChannelId(Optional<? extends String> channelId) {
        Utils.checkNotNull(channelId, "channelId");
        this.channelId = channelId;
        return this;
    }

    public CredentialsDto withClientId(String clientId) {
        Utils.checkNotNull(clientId, "clientId");
        this.clientId = Optional.ofNullable(clientId);
        return this;
    }

    public CredentialsDto withClientId(Optional<? extends String> clientId) {
        Utils.checkNotNull(clientId, "clientId");
        this.clientId = clientId;
        return this;
    }

    public CredentialsDto withDatePath(String datePath) {
        Utils.checkNotNull(datePath, "datePath");
        this.datePath = Optional.ofNullable(datePath);
        return this;
    }

    public CredentialsDto withDatePath(Optional<? extends String> datePath) {
        Utils.checkNotNull(datePath, "datePath");
        this.datePath = datePath;
        return this;
    }

    public CredentialsDto withDomain(String domain) {
        Utils.checkNotNull(domain, "domain");
        this.domain = Optional.ofNullable(domain);
        return this;
    }

    public CredentialsDto withDomain(Optional<? extends String> domain) {
        Utils.checkNotNull(domain, "domain");
        this.domain = domain;
        return this;
    }

    public CredentialsDto withExternalLink(String externalLink) {
        Utils.checkNotNull(externalLink, "externalLink");
        this.externalLink = Optional.ofNullable(externalLink);
        return this;
    }

    public CredentialsDto withExternalLink(Optional<? extends String> externalLink) {
        Utils.checkNotNull(externalLink, "externalLink");
        this.externalLink = externalLink;
        return this;
    }

    public CredentialsDto withFrom(String from) {
        Utils.checkNotNull(from, "from");
        this.from = Optional.ofNullable(from);
        return this;
    }

    public CredentialsDto withFrom(Optional<? extends String> from) {
        Utils.checkNotNull(from, "from");
        this.from = from;
        return this;
    }

    public CredentialsDto withHmac(boolean hmac) {
        Utils.checkNotNull(hmac, "hmac");
        this.hmac = Optional.ofNullable(hmac);
        return this;
    }

    public CredentialsDto withHmac(Optional<? extends Boolean> hmac) {
        Utils.checkNotNull(hmac, "hmac");
        this.hmac = hmac;
        return this;
    }

    public CredentialsDto withHost(String host) {
        Utils.checkNotNull(host, "host");
        this.host = Optional.ofNullable(host);
        return this;
    }

    public CredentialsDto withHost(Optional<? extends String> host) {
        Utils.checkNotNull(host, "host");
        this.host = host;
        return this;
    }

    public CredentialsDto withIdPath(String idPath) {
        Utils.checkNotNull(idPath, "idPath");
        this.idPath = Optional.ofNullable(idPath);
        return this;
    }

    public CredentialsDto withIdPath(Optional<? extends String> idPath) {
        Utils.checkNotNull(idPath, "idPath");
        this.idPath = idPath;
        return this;
    }

    public CredentialsDto withIgnoreTls(boolean ignoreTls) {
        Utils.checkNotNull(ignoreTls, "ignoreTls");
        this.ignoreTls = Optional.ofNullable(ignoreTls);
        return this;
    }

    public CredentialsDto withIgnoreTls(Optional<? extends Boolean> ignoreTls) {
        Utils.checkNotNull(ignoreTls, "ignoreTls");
        this.ignoreTls = ignoreTls;
        return this;
    }

    public CredentialsDto withImageUrl(String imageUrl) {
        Utils.checkNotNull(imageUrl, "imageUrl");
        this.imageUrl = Optional.ofNullable(imageUrl);
        return this;
    }

    public CredentialsDto withImageUrl(Optional<? extends String> imageUrl) {
        Utils.checkNotNull(imageUrl, "imageUrl");
        this.imageUrl = imageUrl;
        return this;
    }

    public CredentialsDto withInstanceId(String instanceId) {
        Utils.checkNotNull(instanceId, "instanceId");
        this.instanceId = Optional.ofNullable(instanceId);
        return this;
    }

    public CredentialsDto withInstanceId(Optional<? extends String> instanceId) {
        Utils.checkNotNull(instanceId, "instanceId");
        this.instanceId = instanceId;
        return this;
    }

    public CredentialsDto withIpPoolName(String ipPoolName) {
        Utils.checkNotNull(ipPoolName, "ipPoolName");
        this.ipPoolName = Optional.ofNullable(ipPoolName);
        return this;
    }

    public CredentialsDto withIpPoolName(Optional<? extends String> ipPoolName) {
        Utils.checkNotNull(ipPoolName, "ipPoolName");
        this.ipPoolName = ipPoolName;
        return this;
    }

    public CredentialsDto withMessageProfileId(String messageProfileId) {
        Utils.checkNotNull(messageProfileId, "messageProfileId");
        this.messageProfileId = Optional.ofNullable(messageProfileId);
        return this;
    }

    public CredentialsDto withMessageProfileId(Optional<? extends String> messageProfileId) {
        Utils.checkNotNull(messageProfileId, "messageProfileId");
        this.messageProfileId = messageProfileId;
        return this;
    }

    public CredentialsDto withPassword(String password) {
        Utils.checkNotNull(password, "password");
        this.password = Optional.ofNullable(password);
        return this;
    }

    public CredentialsDto withPassword(Optional<? extends String> password) {
        Utils.checkNotNull(password, "password");
        this.password = password;
        return this;
    }

    public CredentialsDto withPhoneNumberIdentification(String phoneNumberIdentification) {
        Utils.checkNotNull(phoneNumberIdentification, "phoneNumberIdentification");
        this.phoneNumberIdentification = Optional.ofNullable(phoneNumberIdentification);
        return this;
    }

    public CredentialsDto withPhoneNumberIdentification(Optional<? extends String> phoneNumberIdentification) {
        Utils.checkNotNull(phoneNumberIdentification, "phoneNumberIdentification");
        this.phoneNumberIdentification = phoneNumberIdentification;
        return this;
    }

    public CredentialsDto withPort(String port) {
        Utils.checkNotNull(port, "port");
        this.port = Optional.ofNullable(port);
        return this;
    }

    public CredentialsDto withPort(Optional<? extends String> port) {
        Utils.checkNotNull(port, "port");
        this.port = port;
        return this;
    }

    public CredentialsDto withProjectName(String projectName) {
        Utils.checkNotNull(projectName, "projectName");
        this.projectName = Optional.ofNullable(projectName);
        return this;
    }

    public CredentialsDto withProjectName(Optional<? extends String> projectName) {
        Utils.checkNotNull(projectName, "projectName");
        this.projectName = projectName;
        return this;
    }

    public CredentialsDto withRedirectUrl(String redirectUrl) {
        Utils.checkNotNull(redirectUrl, "redirectUrl");
        this.redirectUrl = Optional.ofNullable(redirectUrl);
        return this;
    }

    public CredentialsDto withRedirectUrl(Optional<? extends String> redirectUrl) {
        Utils.checkNotNull(redirectUrl, "redirectUrl");
        this.redirectUrl = redirectUrl;
        return this;
    }

    public CredentialsDto withRegion(String region) {
        Utils.checkNotNull(region, "region");
        this.region = Optional.ofNullable(region);
        return this;
    }

    public CredentialsDto withRegion(Optional<? extends String> region) {
        Utils.checkNotNull(region, "region");
        this.region = region;
        return this;
    }

    public CredentialsDto withRequireTls(boolean requireTls) {
        Utils.checkNotNull(requireTls, "requireTls");
        this.requireTls = Optional.ofNullable(requireTls);
        return this;
    }

    public CredentialsDto withRequireTls(Optional<? extends Boolean> requireTls) {
        Utils.checkNotNull(requireTls, "requireTls");
        this.requireTls = requireTls;
        return this;
    }

    public CredentialsDto withSecretKey(String secretKey) {
        Utils.checkNotNull(secretKey, "secretKey");
        this.secretKey = Optional.ofNullable(secretKey);
        return this;
    }

    public CredentialsDto withSecretKey(Optional<? extends String> secretKey) {
        Utils.checkNotNull(secretKey, "secretKey");
        this.secretKey = secretKey;
        return this;
    }

    public CredentialsDto withSecretKeyRequestHeader(String secretKeyRequestHeader) {
        Utils.checkNotNull(secretKeyRequestHeader, "secretKeyRequestHeader");
        this.secretKeyRequestHeader = Optional.ofNullable(secretKeyRequestHeader);
        return this;
    }

    public CredentialsDto withSecretKeyRequestHeader(Optional<? extends String> secretKeyRequestHeader) {
        Utils.checkNotNull(secretKeyRequestHeader, "secretKeyRequestHeader");
        this.secretKeyRequestHeader = secretKeyRequestHeader;
        return this;
    }

    public CredentialsDto withSecure(boolean secure) {
        Utils.checkNotNull(secure, "secure");
        this.secure = Optional.ofNullable(secure);
        return this;
    }

    public CredentialsDto withSecure(Optional<? extends Boolean> secure) {
        Utils.checkNotNull(secure, "secure");
        this.secure = secure;
        return this;
    }

    public CredentialsDto withSenderName(String senderName) {
        Utils.checkNotNull(senderName, "senderName");
        this.senderName = Optional.ofNullable(senderName);
        return this;
    }

    public CredentialsDto withSenderName(Optional<? extends String> senderName) {
        Utils.checkNotNull(senderName, "senderName");
        this.senderName = senderName;
        return this;
    }

    public CredentialsDto withServiceAccount(String serviceAccount) {
        Utils.checkNotNull(serviceAccount, "serviceAccount");
        this.serviceAccount = Optional.ofNullable(serviceAccount);
        return this;
    }

    public CredentialsDto withServiceAccount(Optional<? extends String> serviceAccount) {
        Utils.checkNotNull(serviceAccount, "serviceAccount");
        this.serviceAccount = serviceAccount;
        return this;
    }

    public CredentialsDto withState(String state) {
        Utils.checkNotNull(state, "state");
        this.state = Optional.ofNullable(state);
        return this;
    }

    public CredentialsDto withState(Optional<? extends String> state) {
        Utils.checkNotNull(state, "state");
        this.state = state;
        return this;
    }

    public CredentialsDto withTitle(String title) {
        Utils.checkNotNull(title, "title");
        this.title = Optional.ofNullable(title);
        return this;
    }

    public CredentialsDto withTitle(Optional<? extends String> title) {
        Utils.checkNotNull(title, "title");
        this.title = title;
        return this;
    }

    public CredentialsDto withTlsOptions(TlsOptions tlsOptions) {
        Utils.checkNotNull(tlsOptions, "tlsOptions");
        this.tlsOptions = Optional.ofNullable(tlsOptions);
        return this;
    }

    public CredentialsDto withTlsOptions(Optional<? extends TlsOptions> tlsOptions) {
        Utils.checkNotNull(tlsOptions, "tlsOptions");
        this.tlsOptions = tlsOptions;
        return this;
    }

    public CredentialsDto withToken(String token) {
        Utils.checkNotNull(token, "token");
        this.token = Optional.ofNullable(token);
        return this;
    }

    public CredentialsDto withToken(Optional<? extends String> token) {
        Utils.checkNotNull(token, "token");
        this.token = token;
        return this;
    }

    public CredentialsDto withUser(String user) {
        Utils.checkNotNull(user, "user");
        this.user = Optional.ofNullable(user);
        return this;
    }

    public CredentialsDto withUser(Optional<? extends String> user) {
        Utils.checkNotNull(user, "user");
        this.user = user;
        return this;
    }

    public CredentialsDto withWebhookUrl(String webhookUrl) {
        Utils.checkNotNull(webhookUrl, "webhookUrl");
        this.webhookUrl = Optional.ofNullable(webhookUrl);
        return this;
    }

    public CredentialsDto withWebhookUrl(Optional<? extends String> webhookUrl) {
        Utils.checkNotNull(webhookUrl, "webhookUrl");
        this.webhookUrl = webhookUrl;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CredentialsDto other = (CredentialsDto) o;
        return 
            java.util.Objects.deepEquals(this.accountSid, other.accountSid) &&
            java.util.Objects.deepEquals(this.alertUid, other.alertUid) &&
            java.util.Objects.deepEquals(this.apiKey, other.apiKey) &&
            java.util.Objects.deepEquals(this.apiKeyRequestHeader, other.apiKeyRequestHeader) &&
            java.util.Objects.deepEquals(this.apiToken, other.apiToken) &&
            java.util.Objects.deepEquals(this.applicationId, other.applicationId) &&
            java.util.Objects.deepEquals(this.authenticateByToken, other.authenticateByToken) &&
            java.util.Objects.deepEquals(this.authenticationTokenKey, other.authenticationTokenKey) &&
            java.util.Objects.deepEquals(this.baseUrl, other.baseUrl) &&
            java.util.Objects.deepEquals(this.channelId, other.channelId) &&
            java.util.Objects.deepEquals(this.clientId, other.clientId) &&
            java.util.Objects.deepEquals(this.datePath, other.datePath) &&
            java.util.Objects.deepEquals(this.domain, other.domain) &&
            java.util.Objects.deepEquals(this.externalLink, other.externalLink) &&
            java.util.Objects.deepEquals(this.from, other.from) &&
            java.util.Objects.deepEquals(this.hmac, other.hmac) &&
            java.util.Objects.deepEquals(this.host, other.host) &&
            java.util.Objects.deepEquals(this.idPath, other.idPath) &&
            java.util.Objects.deepEquals(this.ignoreTls, other.ignoreTls) &&
            java.util.Objects.deepEquals(this.imageUrl, other.imageUrl) &&
            java.util.Objects.deepEquals(this.instanceId, other.instanceId) &&
            java.util.Objects.deepEquals(this.ipPoolName, other.ipPoolName) &&
            java.util.Objects.deepEquals(this.messageProfileId, other.messageProfileId) &&
            java.util.Objects.deepEquals(this.password, other.password) &&
            java.util.Objects.deepEquals(this.phoneNumberIdentification, other.phoneNumberIdentification) &&
            java.util.Objects.deepEquals(this.port, other.port) &&
            java.util.Objects.deepEquals(this.projectName, other.projectName) &&
            java.util.Objects.deepEquals(this.redirectUrl, other.redirectUrl) &&
            java.util.Objects.deepEquals(this.region, other.region) &&
            java.util.Objects.deepEquals(this.requireTls, other.requireTls) &&
            java.util.Objects.deepEquals(this.secretKey, other.secretKey) &&
            java.util.Objects.deepEquals(this.secretKeyRequestHeader, other.secretKeyRequestHeader) &&
            java.util.Objects.deepEquals(this.secure, other.secure) &&
            java.util.Objects.deepEquals(this.senderName, other.senderName) &&
            java.util.Objects.deepEquals(this.serviceAccount, other.serviceAccount) &&
            java.util.Objects.deepEquals(this.state, other.state) &&
            java.util.Objects.deepEquals(this.title, other.title) &&
            java.util.Objects.deepEquals(this.tlsOptions, other.tlsOptions) &&
            java.util.Objects.deepEquals(this.token, other.token) &&
            java.util.Objects.deepEquals(this.user, other.user) &&
            java.util.Objects.deepEquals(this.webhookUrl, other.webhookUrl);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            accountSid,
            alertUid,
            apiKey,
            apiKeyRequestHeader,
            apiToken,
            applicationId,
            authenticateByToken,
            authenticationTokenKey,
            baseUrl,
            channelId,
            clientId,
            datePath,
            domain,
            externalLink,
            from,
            hmac,
            host,
            idPath,
            ignoreTls,
            imageUrl,
            instanceId,
            ipPoolName,
            messageProfileId,
            password,
            phoneNumberIdentification,
            port,
            projectName,
            redirectUrl,
            region,
            requireTls,
            secretKey,
            secretKeyRequestHeader,
            secure,
            senderName,
            serviceAccount,
            state,
            title,
            tlsOptions,
            token,
            user,
            webhookUrl);
    }
    
    @Override
    public String toString() {
        return Utils.toString(CredentialsDto.class,
                "accountSid", accountSid,
                "alertUid", alertUid,
                "apiKey", apiKey,
                "apiKeyRequestHeader", apiKeyRequestHeader,
                "apiToken", apiToken,
                "applicationId", applicationId,
                "authenticateByToken", authenticateByToken,
                "authenticationTokenKey", authenticationTokenKey,
                "baseUrl", baseUrl,
                "channelId", channelId,
                "clientId", clientId,
                "datePath", datePath,
                "domain", domain,
                "externalLink", externalLink,
                "from", from,
                "hmac", hmac,
                "host", host,
                "idPath", idPath,
                "ignoreTls", ignoreTls,
                "imageUrl", imageUrl,
                "instanceId", instanceId,
                "ipPoolName", ipPoolName,
                "messageProfileId", messageProfileId,
                "password", password,
                "phoneNumberIdentification", phoneNumberIdentification,
                "port", port,
                "projectName", projectName,
                "redirectUrl", redirectUrl,
                "region", region,
                "requireTls", requireTls,
                "secretKey", secretKey,
                "secretKeyRequestHeader", secretKeyRequestHeader,
                "secure", secure,
                "senderName", senderName,
                "serviceAccount", serviceAccount,
                "state", state,
                "title", title,
                "tlsOptions", tlsOptions,
                "token", token,
                "user", user,
                "webhookUrl", webhookUrl);
    }
    
    public final static class Builder {
 
        private Optional<? extends String> accountSid = Optional.empty();
 
        private Optional<? extends String> alertUid = Optional.empty();
 
        private Optional<? extends String> apiKey = Optional.empty();
 
        private Optional<? extends String> apiKeyRequestHeader = Optional.empty();
 
        private Optional<? extends String> apiToken = Optional.empty();
 
        private Optional<? extends String> applicationId = Optional.empty();
 
        private Optional<? extends Boolean> authenticateByToken = Optional.empty();
 
        private Optional<? extends String> authenticationTokenKey = Optional.empty();
 
        private Optional<? extends String> baseUrl = Optional.empty();
 
        private Optional<? extends String> channelId = Optional.empty();
 
        private Optional<? extends String> clientId = Optional.empty();
 
        private Optional<? extends String> datePath = Optional.empty();
 
        private Optional<? extends String> domain = Optional.empty();
 
        private Optional<? extends String> externalLink = Optional.empty();
 
        private Optional<? extends String> from = Optional.empty();
 
        private Optional<? extends Boolean> hmac = Optional.empty();
 
        private Optional<? extends String> host = Optional.empty();
 
        private Optional<? extends String> idPath = Optional.empty();
 
        private Optional<? extends Boolean> ignoreTls = Optional.empty();
 
        private Optional<? extends String> imageUrl = Optional.empty();
 
        private Optional<? extends String> instanceId = Optional.empty();
 
        private Optional<? extends String> ipPoolName = Optional.empty();
 
        private Optional<? extends String> messageProfileId = Optional.empty();
 
        private Optional<? extends String> password = Optional.empty();
 
        private Optional<? extends String> phoneNumberIdentification = Optional.empty();
 
        private Optional<? extends String> port = Optional.empty();
 
        private Optional<? extends String> projectName = Optional.empty();
 
        private Optional<? extends String> redirectUrl = Optional.empty();
 
        private Optional<? extends String> region = Optional.empty();
 
        private Optional<? extends Boolean> requireTls = Optional.empty();
 
        private Optional<? extends String> secretKey = Optional.empty();
 
        private Optional<? extends String> secretKeyRequestHeader = Optional.empty();
 
        private Optional<? extends Boolean> secure = Optional.empty();
 
        private Optional<? extends String> senderName = Optional.empty();
 
        private Optional<? extends String> serviceAccount = Optional.empty();
 
        private Optional<? extends String> state = Optional.empty();
 
        private Optional<? extends String> title = Optional.empty();
 
        private Optional<? extends TlsOptions> tlsOptions = Optional.empty();
 
        private Optional<? extends String> token = Optional.empty();
 
        private Optional<? extends String> user = Optional.empty();
 
        private Optional<? extends String> webhookUrl = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder accountSid(String accountSid) {
            Utils.checkNotNull(accountSid, "accountSid");
            this.accountSid = Optional.ofNullable(accountSid);
            return this;
        }

        public Builder accountSid(Optional<? extends String> accountSid) {
            Utils.checkNotNull(accountSid, "accountSid");
            this.accountSid = accountSid;
            return this;
        }

        public Builder alertUid(String alertUid) {
            Utils.checkNotNull(alertUid, "alertUid");
            this.alertUid = Optional.ofNullable(alertUid);
            return this;
        }

        public Builder alertUid(Optional<? extends String> alertUid) {
            Utils.checkNotNull(alertUid, "alertUid");
            this.alertUid = alertUid;
            return this;
        }

        public Builder apiKey(String apiKey) {
            Utils.checkNotNull(apiKey, "apiKey");
            this.apiKey = Optional.ofNullable(apiKey);
            return this;
        }

        public Builder apiKey(Optional<? extends String> apiKey) {
            Utils.checkNotNull(apiKey, "apiKey");
            this.apiKey = apiKey;
            return this;
        }

        public Builder apiKeyRequestHeader(String apiKeyRequestHeader) {
            Utils.checkNotNull(apiKeyRequestHeader, "apiKeyRequestHeader");
            this.apiKeyRequestHeader = Optional.ofNullable(apiKeyRequestHeader);
            return this;
        }

        public Builder apiKeyRequestHeader(Optional<? extends String> apiKeyRequestHeader) {
            Utils.checkNotNull(apiKeyRequestHeader, "apiKeyRequestHeader");
            this.apiKeyRequestHeader = apiKeyRequestHeader;
            return this;
        }

        public Builder apiToken(String apiToken) {
            Utils.checkNotNull(apiToken, "apiToken");
            this.apiToken = Optional.ofNullable(apiToken);
            return this;
        }

        public Builder apiToken(Optional<? extends String> apiToken) {
            Utils.checkNotNull(apiToken, "apiToken");
            this.apiToken = apiToken;
            return this;
        }

        public Builder applicationId(String applicationId) {
            Utils.checkNotNull(applicationId, "applicationId");
            this.applicationId = Optional.ofNullable(applicationId);
            return this;
        }

        public Builder applicationId(Optional<? extends String> applicationId) {
            Utils.checkNotNull(applicationId, "applicationId");
            this.applicationId = applicationId;
            return this;
        }

        public Builder authenticateByToken(boolean authenticateByToken) {
            Utils.checkNotNull(authenticateByToken, "authenticateByToken");
            this.authenticateByToken = Optional.ofNullable(authenticateByToken);
            return this;
        }

        public Builder authenticateByToken(Optional<? extends Boolean> authenticateByToken) {
            Utils.checkNotNull(authenticateByToken, "authenticateByToken");
            this.authenticateByToken = authenticateByToken;
            return this;
        }

        public Builder authenticationTokenKey(String authenticationTokenKey) {
            Utils.checkNotNull(authenticationTokenKey, "authenticationTokenKey");
            this.authenticationTokenKey = Optional.ofNullable(authenticationTokenKey);
            return this;
        }

        public Builder authenticationTokenKey(Optional<? extends String> authenticationTokenKey) {
            Utils.checkNotNull(authenticationTokenKey, "authenticationTokenKey");
            this.authenticationTokenKey = authenticationTokenKey;
            return this;
        }

        public Builder baseUrl(String baseUrl) {
            Utils.checkNotNull(baseUrl, "baseUrl");
            this.baseUrl = Optional.ofNullable(baseUrl);
            return this;
        }

        public Builder baseUrl(Optional<? extends String> baseUrl) {
            Utils.checkNotNull(baseUrl, "baseUrl");
            this.baseUrl = baseUrl;
            return this;
        }

        public Builder channelId(String channelId) {
            Utils.checkNotNull(channelId, "channelId");
            this.channelId = Optional.ofNullable(channelId);
            return this;
        }

        public Builder channelId(Optional<? extends String> channelId) {
            Utils.checkNotNull(channelId, "channelId");
            this.channelId = channelId;
            return this;
        }

        public Builder clientId(String clientId) {
            Utils.checkNotNull(clientId, "clientId");
            this.clientId = Optional.ofNullable(clientId);
            return this;
        }

        public Builder clientId(Optional<? extends String> clientId) {
            Utils.checkNotNull(clientId, "clientId");
            this.clientId = clientId;
            return this;
        }

        public Builder datePath(String datePath) {
            Utils.checkNotNull(datePath, "datePath");
            this.datePath = Optional.ofNullable(datePath);
            return this;
        }

        public Builder datePath(Optional<? extends String> datePath) {
            Utils.checkNotNull(datePath, "datePath");
            this.datePath = datePath;
            return this;
        }

        public Builder domain(String domain) {
            Utils.checkNotNull(domain, "domain");
            this.domain = Optional.ofNullable(domain);
            return this;
        }

        public Builder domain(Optional<? extends String> domain) {
            Utils.checkNotNull(domain, "domain");
            this.domain = domain;
            return this;
        }

        public Builder externalLink(String externalLink) {
            Utils.checkNotNull(externalLink, "externalLink");
            this.externalLink = Optional.ofNullable(externalLink);
            return this;
        }

        public Builder externalLink(Optional<? extends String> externalLink) {
            Utils.checkNotNull(externalLink, "externalLink");
            this.externalLink = externalLink;
            return this;
        }

        public Builder from(String from) {
            Utils.checkNotNull(from, "from");
            this.from = Optional.ofNullable(from);
            return this;
        }

        public Builder from(Optional<? extends String> from) {
            Utils.checkNotNull(from, "from");
            this.from = from;
            return this;
        }

        public Builder hmac(boolean hmac) {
            Utils.checkNotNull(hmac, "hmac");
            this.hmac = Optional.ofNullable(hmac);
            return this;
        }

        public Builder hmac(Optional<? extends Boolean> hmac) {
            Utils.checkNotNull(hmac, "hmac");
            this.hmac = hmac;
            return this;
        }

        public Builder host(String host) {
            Utils.checkNotNull(host, "host");
            this.host = Optional.ofNullable(host);
            return this;
        }

        public Builder host(Optional<? extends String> host) {
            Utils.checkNotNull(host, "host");
            this.host = host;
            return this;
        }

        public Builder idPath(String idPath) {
            Utils.checkNotNull(idPath, "idPath");
            this.idPath = Optional.ofNullable(idPath);
            return this;
        }

        public Builder idPath(Optional<? extends String> idPath) {
            Utils.checkNotNull(idPath, "idPath");
            this.idPath = idPath;
            return this;
        }

        public Builder ignoreTls(boolean ignoreTls) {
            Utils.checkNotNull(ignoreTls, "ignoreTls");
            this.ignoreTls = Optional.ofNullable(ignoreTls);
            return this;
        }

        public Builder ignoreTls(Optional<? extends Boolean> ignoreTls) {
            Utils.checkNotNull(ignoreTls, "ignoreTls");
            this.ignoreTls = ignoreTls;
            return this;
        }

        public Builder imageUrl(String imageUrl) {
            Utils.checkNotNull(imageUrl, "imageUrl");
            this.imageUrl = Optional.ofNullable(imageUrl);
            return this;
        }

        public Builder imageUrl(Optional<? extends String> imageUrl) {
            Utils.checkNotNull(imageUrl, "imageUrl");
            this.imageUrl = imageUrl;
            return this;
        }

        public Builder instanceId(String instanceId) {
            Utils.checkNotNull(instanceId, "instanceId");
            this.instanceId = Optional.ofNullable(instanceId);
            return this;
        }

        public Builder instanceId(Optional<? extends String> instanceId) {
            Utils.checkNotNull(instanceId, "instanceId");
            this.instanceId = instanceId;
            return this;
        }

        public Builder ipPoolName(String ipPoolName) {
            Utils.checkNotNull(ipPoolName, "ipPoolName");
            this.ipPoolName = Optional.ofNullable(ipPoolName);
            return this;
        }

        public Builder ipPoolName(Optional<? extends String> ipPoolName) {
            Utils.checkNotNull(ipPoolName, "ipPoolName");
            this.ipPoolName = ipPoolName;
            return this;
        }

        public Builder messageProfileId(String messageProfileId) {
            Utils.checkNotNull(messageProfileId, "messageProfileId");
            this.messageProfileId = Optional.ofNullable(messageProfileId);
            return this;
        }

        public Builder messageProfileId(Optional<? extends String> messageProfileId) {
            Utils.checkNotNull(messageProfileId, "messageProfileId");
            this.messageProfileId = messageProfileId;
            return this;
        }

        public Builder password(String password) {
            Utils.checkNotNull(password, "password");
            this.password = Optional.ofNullable(password);
            return this;
        }

        public Builder password(Optional<? extends String> password) {
            Utils.checkNotNull(password, "password");
            this.password = password;
            return this;
        }

        public Builder phoneNumberIdentification(String phoneNumberIdentification) {
            Utils.checkNotNull(phoneNumberIdentification, "phoneNumberIdentification");
            this.phoneNumberIdentification = Optional.ofNullable(phoneNumberIdentification);
            return this;
        }

        public Builder phoneNumberIdentification(Optional<? extends String> phoneNumberIdentification) {
            Utils.checkNotNull(phoneNumberIdentification, "phoneNumberIdentification");
            this.phoneNumberIdentification = phoneNumberIdentification;
            return this;
        }

        public Builder port(String port) {
            Utils.checkNotNull(port, "port");
            this.port = Optional.ofNullable(port);
            return this;
        }

        public Builder port(Optional<? extends String> port) {
            Utils.checkNotNull(port, "port");
            this.port = port;
            return this;
        }

        public Builder projectName(String projectName) {
            Utils.checkNotNull(projectName, "projectName");
            this.projectName = Optional.ofNullable(projectName);
            return this;
        }

        public Builder projectName(Optional<? extends String> projectName) {
            Utils.checkNotNull(projectName, "projectName");
            this.projectName = projectName;
            return this;
        }

        public Builder redirectUrl(String redirectUrl) {
            Utils.checkNotNull(redirectUrl, "redirectUrl");
            this.redirectUrl = Optional.ofNullable(redirectUrl);
            return this;
        }

        public Builder redirectUrl(Optional<? extends String> redirectUrl) {
            Utils.checkNotNull(redirectUrl, "redirectUrl");
            this.redirectUrl = redirectUrl;
            return this;
        }

        public Builder region(String region) {
            Utils.checkNotNull(region, "region");
            this.region = Optional.ofNullable(region);
            return this;
        }

        public Builder region(Optional<? extends String> region) {
            Utils.checkNotNull(region, "region");
            this.region = region;
            return this;
        }

        public Builder requireTls(boolean requireTls) {
            Utils.checkNotNull(requireTls, "requireTls");
            this.requireTls = Optional.ofNullable(requireTls);
            return this;
        }

        public Builder requireTls(Optional<? extends Boolean> requireTls) {
            Utils.checkNotNull(requireTls, "requireTls");
            this.requireTls = requireTls;
            return this;
        }

        public Builder secretKey(String secretKey) {
            Utils.checkNotNull(secretKey, "secretKey");
            this.secretKey = Optional.ofNullable(secretKey);
            return this;
        }

        public Builder secretKey(Optional<? extends String> secretKey) {
            Utils.checkNotNull(secretKey, "secretKey");
            this.secretKey = secretKey;
            return this;
        }

        public Builder secretKeyRequestHeader(String secretKeyRequestHeader) {
            Utils.checkNotNull(secretKeyRequestHeader, "secretKeyRequestHeader");
            this.secretKeyRequestHeader = Optional.ofNullable(secretKeyRequestHeader);
            return this;
        }

        public Builder secretKeyRequestHeader(Optional<? extends String> secretKeyRequestHeader) {
            Utils.checkNotNull(secretKeyRequestHeader, "secretKeyRequestHeader");
            this.secretKeyRequestHeader = secretKeyRequestHeader;
            return this;
        }

        public Builder secure(boolean secure) {
            Utils.checkNotNull(secure, "secure");
            this.secure = Optional.ofNullable(secure);
            return this;
        }

        public Builder secure(Optional<? extends Boolean> secure) {
            Utils.checkNotNull(secure, "secure");
            this.secure = secure;
            return this;
        }

        public Builder senderName(String senderName) {
            Utils.checkNotNull(senderName, "senderName");
            this.senderName = Optional.ofNullable(senderName);
            return this;
        }

        public Builder senderName(Optional<? extends String> senderName) {
            Utils.checkNotNull(senderName, "senderName");
            this.senderName = senderName;
            return this;
        }

        public Builder serviceAccount(String serviceAccount) {
            Utils.checkNotNull(serviceAccount, "serviceAccount");
            this.serviceAccount = Optional.ofNullable(serviceAccount);
            return this;
        }

        public Builder serviceAccount(Optional<? extends String> serviceAccount) {
            Utils.checkNotNull(serviceAccount, "serviceAccount");
            this.serviceAccount = serviceAccount;
            return this;
        }

        public Builder state(String state) {
            Utils.checkNotNull(state, "state");
            this.state = Optional.ofNullable(state);
            return this;
        }

        public Builder state(Optional<? extends String> state) {
            Utils.checkNotNull(state, "state");
            this.state = state;
            return this;
        }

        public Builder title(String title) {
            Utils.checkNotNull(title, "title");
            this.title = Optional.ofNullable(title);
            return this;
        }

        public Builder title(Optional<? extends String> title) {
            Utils.checkNotNull(title, "title");
            this.title = title;
            return this;
        }

        public Builder tlsOptions(TlsOptions tlsOptions) {
            Utils.checkNotNull(tlsOptions, "tlsOptions");
            this.tlsOptions = Optional.ofNullable(tlsOptions);
            return this;
        }

        public Builder tlsOptions(Optional<? extends TlsOptions> tlsOptions) {
            Utils.checkNotNull(tlsOptions, "tlsOptions");
            this.tlsOptions = tlsOptions;
            return this;
        }

        public Builder token(String token) {
            Utils.checkNotNull(token, "token");
            this.token = Optional.ofNullable(token);
            return this;
        }

        public Builder token(Optional<? extends String> token) {
            Utils.checkNotNull(token, "token");
            this.token = token;
            return this;
        }

        public Builder user(String user) {
            Utils.checkNotNull(user, "user");
            this.user = Optional.ofNullable(user);
            return this;
        }

        public Builder user(Optional<? extends String> user) {
            Utils.checkNotNull(user, "user");
            this.user = user;
            return this;
        }

        public Builder webhookUrl(String webhookUrl) {
            Utils.checkNotNull(webhookUrl, "webhookUrl");
            this.webhookUrl = Optional.ofNullable(webhookUrl);
            return this;
        }

        public Builder webhookUrl(Optional<? extends String> webhookUrl) {
            Utils.checkNotNull(webhookUrl, "webhookUrl");
            this.webhookUrl = webhookUrl;
            return this;
        }
        
        public CredentialsDto build() {
            return new CredentialsDto(
                accountSid,
                alertUid,
                apiKey,
                apiKeyRequestHeader,
                apiToken,
                applicationId,
                authenticateByToken,
                authenticationTokenKey,
                baseUrl,
                channelId,
                clientId,
                datePath,
                domain,
                externalLink,
                from,
                hmac,
                host,
                idPath,
                ignoreTls,
                imageUrl,
                instanceId,
                ipPoolName,
                messageProfileId,
                password,
                phoneNumberIdentification,
                port,
                projectName,
                redirectUrl,
                region,
                requireTls,
                secretKey,
                secretKeyRequestHeader,
                secure,
                senderName,
                serviceAccount,
                state,
                title,
                tlsOptions,
                token,
                user,
                webhookUrl);
        }
    }
}

