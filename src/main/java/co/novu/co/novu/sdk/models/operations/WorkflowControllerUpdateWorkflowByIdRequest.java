/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package co.novu.co.novu.sdk.models.operations;

import co.novu.co.novu.sdk.utils.SpeakeasyMetadata;
import co.novu.co.novu.sdk.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;

public class WorkflowControllerUpdateWorkflowByIdRequest {

    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=workflowId")
    private String workflowId;

    @SpeakeasyMetadata("request:mediaType=application/json")
    private co.novu.co.novu.sdk.models.components.UpdateWorkflowRequestDto updateWorkflowRequestDto;

    @JsonCreator
    public WorkflowControllerUpdateWorkflowByIdRequest(
            String workflowId,
            co.novu.co.novu.sdk.models.components.UpdateWorkflowRequestDto updateWorkflowRequestDto) {
        Utils.checkNotNull(workflowId, "workflowId");
        Utils.checkNotNull(updateWorkflowRequestDto, "updateWorkflowRequestDto");
        this.workflowId = workflowId;
        this.updateWorkflowRequestDto = updateWorkflowRequestDto;
    }

    @JsonIgnore
    public String workflowId() {
        return workflowId;
    }

    @JsonIgnore
    public co.novu.co.novu.sdk.models.components.UpdateWorkflowRequestDto updateWorkflowRequestDto() {
        return updateWorkflowRequestDto;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public WorkflowControllerUpdateWorkflowByIdRequest withWorkflowId(String workflowId) {
        Utils.checkNotNull(workflowId, "workflowId");
        this.workflowId = workflowId;
        return this;
    }

    public WorkflowControllerUpdateWorkflowByIdRequest withUpdateWorkflowRequestDto(co.novu.co.novu.sdk.models.components.UpdateWorkflowRequestDto updateWorkflowRequestDto) {
        Utils.checkNotNull(updateWorkflowRequestDto, "updateWorkflowRequestDto");
        this.updateWorkflowRequestDto = updateWorkflowRequestDto;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        WorkflowControllerUpdateWorkflowByIdRequest other = (WorkflowControllerUpdateWorkflowByIdRequest) o;
        return 
            java.util.Objects.deepEquals(this.workflowId, other.workflowId) &&
            java.util.Objects.deepEquals(this.updateWorkflowRequestDto, other.updateWorkflowRequestDto);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            workflowId,
            updateWorkflowRequestDto);
    }
    
    @Override
    public String toString() {
        return Utils.toString(WorkflowControllerUpdateWorkflowByIdRequest.class,
                "workflowId", workflowId,
                "updateWorkflowRequestDto", updateWorkflowRequestDto);
    }
    
    public final static class Builder {
 
        private String workflowId;
 
        private co.novu.co.novu.sdk.models.components.UpdateWorkflowRequestDto updateWorkflowRequestDto;  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder workflowId(String workflowId) {
            Utils.checkNotNull(workflowId, "workflowId");
            this.workflowId = workflowId;
            return this;
        }

        public Builder updateWorkflowRequestDto(co.novu.co.novu.sdk.models.components.UpdateWorkflowRequestDto updateWorkflowRequestDto) {
            Utils.checkNotNull(updateWorkflowRequestDto, "updateWorkflowRequestDto");
            this.updateWorkflowRequestDto = updateWorkflowRequestDto;
            return this;
        }
        
        public WorkflowControllerUpdateWorkflowByIdRequest build() {
            return new WorkflowControllerUpdateWorkflowByIdRequest(
                workflowId,
                updateWorkflowRequestDto);
        }
    }
}

