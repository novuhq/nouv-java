/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package co.novu.co.novu.sdk.models.components;

import co.novu.co.novu.sdk.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;

public class FieldFilterPart {

    @JsonProperty("field")
    private String field;

    @JsonProperty("on")
    private On on;

    @JsonProperty("operator")
    private Operator operator;

    @JsonProperty("value")
    private String value;

    @JsonCreator
    public FieldFilterPart(
            @JsonProperty("field") String field,
            @JsonProperty("on") On on,
            @JsonProperty("operator") Operator operator,
            @JsonProperty("value") String value) {
        Utils.checkNotNull(field, "field");
        Utils.checkNotNull(on, "on");
        Utils.checkNotNull(operator, "operator");
        Utils.checkNotNull(value, "value");
        this.field = field;
        this.on = on;
        this.operator = operator;
        this.value = value;
    }

    @JsonIgnore
    public String field() {
        return field;
    }

    @JsonIgnore
    public On on() {
        return on;
    }

    @JsonIgnore
    public Operator operator() {
        return operator;
    }

    @JsonIgnore
    public String value() {
        return value;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public FieldFilterPart withField(String field) {
        Utils.checkNotNull(field, "field");
        this.field = field;
        return this;
    }

    public FieldFilterPart withOn(On on) {
        Utils.checkNotNull(on, "on");
        this.on = on;
        return this;
    }

    public FieldFilterPart withOperator(Operator operator) {
        Utils.checkNotNull(operator, "operator");
        this.operator = operator;
        return this;
    }

    public FieldFilterPart withValue(String value) {
        Utils.checkNotNull(value, "value");
        this.value = value;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        FieldFilterPart other = (FieldFilterPart) o;
        return 
            java.util.Objects.deepEquals(this.field, other.field) &&
            java.util.Objects.deepEquals(this.on, other.on) &&
            java.util.Objects.deepEquals(this.operator, other.operator) &&
            java.util.Objects.deepEquals(this.value, other.value);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            field,
            on,
            operator,
            value);
    }
    
    @Override
    public String toString() {
        return Utils.toString(FieldFilterPart.class,
                "field", field,
                "on", on,
                "operator", operator,
                "value", value);
    }
    
    public final static class Builder {
 
        private String field;
 
        private On on;
 
        private Operator operator;
 
        private String value;  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder field(String field) {
            Utils.checkNotNull(field, "field");
            this.field = field;
            return this;
        }

        public Builder on(On on) {
            Utils.checkNotNull(on, "on");
            this.on = on;
            return this;
        }

        public Builder operator(Operator operator) {
            Utils.checkNotNull(operator, "operator");
            this.operator = operator;
            return this;
        }

        public Builder value(String value) {
            Utils.checkNotNull(value, "value");
            this.value = value;
            return this;
        }
        
        public FieldFilterPart build() {
            return new FieldFilterPart(
                field,
                on,
                operator,
                value);
        }
    }
}

