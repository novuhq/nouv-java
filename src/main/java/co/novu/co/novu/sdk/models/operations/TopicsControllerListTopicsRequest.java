/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package co.novu.co.novu.sdk.models.operations;

import co.novu.co.novu.sdk.utils.LazySingletonValue;
import co.novu.co.novu.sdk.utils.SpeakeasyMetadata;
import co.novu.co.novu.sdk.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;

public class TopicsControllerListTopicsRequest {

    /**
     * Number of page for the pagination
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=page")
    private Optional<? extends Double> page;

    /**
     * Size of page for the pagination
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=pageSize")
    private Optional<? extends Double> pageSize;

    /**
     * Topic key
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=key")
    private Optional<? extends String> key;

    @JsonCreator
    public TopicsControllerListTopicsRequest(
            Optional<? extends Double> page,
            Optional<? extends Double> pageSize,
            Optional<? extends String> key) {
        Utils.checkNotNull(page, "page");
        Utils.checkNotNull(pageSize, "pageSize");
        Utils.checkNotNull(key, "key");
        this.page = page;
        this.pageSize = pageSize;
        this.key = key;
    }
    
    public TopicsControllerListTopicsRequest() {
        this(Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * Number of page for the pagination
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Double> page() {
        return (Optional<Double>) page;
    }

    /**
     * Size of page for the pagination
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Double> pageSize() {
        return (Optional<Double>) pageSize;
    }

    /**
     * Topic key
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> key() {
        return (Optional<String>) key;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Number of page for the pagination
     */
    public TopicsControllerListTopicsRequest withPage(double page) {
        Utils.checkNotNull(page, "page");
        this.page = Optional.ofNullable(page);
        return this;
    }

    /**
     * Number of page for the pagination
     */
    public TopicsControllerListTopicsRequest withPage(Optional<? extends Double> page) {
        Utils.checkNotNull(page, "page");
        this.page = page;
        return this;
    }

    /**
     * Size of page for the pagination
     */
    public TopicsControllerListTopicsRequest withPageSize(double pageSize) {
        Utils.checkNotNull(pageSize, "pageSize");
        this.pageSize = Optional.ofNullable(pageSize);
        return this;
    }

    /**
     * Size of page for the pagination
     */
    public TopicsControllerListTopicsRequest withPageSize(Optional<? extends Double> pageSize) {
        Utils.checkNotNull(pageSize, "pageSize");
        this.pageSize = pageSize;
        return this;
    }

    /**
     * Topic key
     */
    public TopicsControllerListTopicsRequest withKey(String key) {
        Utils.checkNotNull(key, "key");
        this.key = Optional.ofNullable(key);
        return this;
    }

    /**
     * Topic key
     */
    public TopicsControllerListTopicsRequest withKey(Optional<? extends String> key) {
        Utils.checkNotNull(key, "key");
        this.key = key;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        TopicsControllerListTopicsRequest other = (TopicsControllerListTopicsRequest) o;
        return 
            java.util.Objects.deepEquals(this.page, other.page) &&
            java.util.Objects.deepEquals(this.pageSize, other.pageSize) &&
            java.util.Objects.deepEquals(this.key, other.key);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            page,
            pageSize,
            key);
    }
    
    @Override
    public String toString() {
        return Utils.toString(TopicsControllerListTopicsRequest.class,
                "page", page,
                "pageSize", pageSize,
                "key", key);
    }
    
    public final static class Builder {
 
        private Optional<? extends Double> page;
 
        private Optional<? extends Double> pageSize;
 
        private Optional<? extends String> key = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Number of page for the pagination
         */
        public Builder page(double page) {
            Utils.checkNotNull(page, "page");
            this.page = Optional.ofNullable(page);
            return this;
        }

        /**
         * Number of page for the pagination
         */
        public Builder page(Optional<? extends Double> page) {
            Utils.checkNotNull(page, "page");
            this.page = page;
            return this;
        }

        /**
         * Size of page for the pagination
         */
        public Builder pageSize(double pageSize) {
            Utils.checkNotNull(pageSize, "pageSize");
            this.pageSize = Optional.ofNullable(pageSize);
            return this;
        }

        /**
         * Size of page for the pagination
         */
        public Builder pageSize(Optional<? extends Double> pageSize) {
            Utils.checkNotNull(pageSize, "pageSize");
            this.pageSize = pageSize;
            return this;
        }

        /**
         * Topic key
         */
        public Builder key(String key) {
            Utils.checkNotNull(key, "key");
            this.key = Optional.ofNullable(key);
            return this;
        }

        /**
         * Topic key
         */
        public Builder key(Optional<? extends String> key) {
            Utils.checkNotNull(key, "key");
            this.key = key;
            return this;
        }
        
        public TopicsControllerListTopicsRequest build() {
            if (page == null) {
                page = _SINGLETON_VALUE_Page.value();
            }
            if (pageSize == null) {
                pageSize = _SINGLETON_VALUE_PageSize.value();
            }
            return new TopicsControllerListTopicsRequest(
                page,
                pageSize,
                key);
        }

        private static final LazySingletonValue<Optional<? extends Double>> _SINGLETON_VALUE_Page =
                new LazySingletonValue<>(
                        "page",
                        "0",
                        new TypeReference<Optional<? extends Double>>() {});

        private static final LazySingletonValue<Optional<? extends Double>> _SINGLETON_VALUE_PageSize =
                new LazySingletonValue<>(
                        "pageSize",
                        "10",
                        new TypeReference<Optional<? extends Double>>() {});
    }
}

