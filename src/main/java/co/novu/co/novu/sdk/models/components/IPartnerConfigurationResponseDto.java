/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package co.novu.co.novu.sdk.models.components;

import co.novu.co.novu.sdk.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;

public class IPartnerConfigurationResponseDto {

    @JsonProperty("accessToken")
    private String accessToken;

    @JsonProperty("configurationId")
    private String configurationId;

    /**
     * Partner Type Enum
     */
    @JsonProperty("partnerType")
    private PartnerType partnerType;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("projectIds")
    private Optional<? extends java.util.List<String>> projectIds;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("teamId")
    private Optional<? extends String> teamId;

    @JsonCreator
    public IPartnerConfigurationResponseDto(
            @JsonProperty("accessToken") String accessToken,
            @JsonProperty("configurationId") String configurationId,
            @JsonProperty("partnerType") PartnerType partnerType,
            @JsonProperty("projectIds") Optional<? extends java.util.List<String>> projectIds,
            @JsonProperty("teamId") Optional<? extends String> teamId) {
        Utils.checkNotNull(accessToken, "accessToken");
        Utils.checkNotNull(configurationId, "configurationId");
        Utils.checkNotNull(partnerType, "partnerType");
        Utils.checkNotNull(projectIds, "projectIds");
        Utils.checkNotNull(teamId, "teamId");
        this.accessToken = accessToken;
        this.configurationId = configurationId;
        this.partnerType = partnerType;
        this.projectIds = projectIds;
        this.teamId = teamId;
    }
    
    public IPartnerConfigurationResponseDto(
            String accessToken,
            String configurationId,
            PartnerType partnerType) {
        this(accessToken, configurationId, partnerType, Optional.empty(), Optional.empty());
    }

    @JsonIgnore
    public String accessToken() {
        return accessToken;
    }

    @JsonIgnore
    public String configurationId() {
        return configurationId;
    }

    /**
     * Partner Type Enum
     */
    @JsonIgnore
    public PartnerType partnerType() {
        return partnerType;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<java.util.List<String>> projectIds() {
        return (Optional<java.util.List<String>>) projectIds;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> teamId() {
        return (Optional<String>) teamId;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public IPartnerConfigurationResponseDto withAccessToken(String accessToken) {
        Utils.checkNotNull(accessToken, "accessToken");
        this.accessToken = accessToken;
        return this;
    }

    public IPartnerConfigurationResponseDto withConfigurationId(String configurationId) {
        Utils.checkNotNull(configurationId, "configurationId");
        this.configurationId = configurationId;
        return this;
    }

    /**
     * Partner Type Enum
     */
    public IPartnerConfigurationResponseDto withPartnerType(PartnerType partnerType) {
        Utils.checkNotNull(partnerType, "partnerType");
        this.partnerType = partnerType;
        return this;
    }

    public IPartnerConfigurationResponseDto withProjectIds(java.util.List<String> projectIds) {
        Utils.checkNotNull(projectIds, "projectIds");
        this.projectIds = Optional.ofNullable(projectIds);
        return this;
    }

    public IPartnerConfigurationResponseDto withProjectIds(Optional<? extends java.util.List<String>> projectIds) {
        Utils.checkNotNull(projectIds, "projectIds");
        this.projectIds = projectIds;
        return this;
    }

    public IPartnerConfigurationResponseDto withTeamId(String teamId) {
        Utils.checkNotNull(teamId, "teamId");
        this.teamId = Optional.ofNullable(teamId);
        return this;
    }

    public IPartnerConfigurationResponseDto withTeamId(Optional<? extends String> teamId) {
        Utils.checkNotNull(teamId, "teamId");
        this.teamId = teamId;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        IPartnerConfigurationResponseDto other = (IPartnerConfigurationResponseDto) o;
        return 
            java.util.Objects.deepEquals(this.accessToken, other.accessToken) &&
            java.util.Objects.deepEquals(this.configurationId, other.configurationId) &&
            java.util.Objects.deepEquals(this.partnerType, other.partnerType) &&
            java.util.Objects.deepEquals(this.projectIds, other.projectIds) &&
            java.util.Objects.deepEquals(this.teamId, other.teamId);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            accessToken,
            configurationId,
            partnerType,
            projectIds,
            teamId);
    }
    
    @Override
    public String toString() {
        return Utils.toString(IPartnerConfigurationResponseDto.class,
                "accessToken", accessToken,
                "configurationId", configurationId,
                "partnerType", partnerType,
                "projectIds", projectIds,
                "teamId", teamId);
    }
    
    public final static class Builder {
 
        private String accessToken;
 
        private String configurationId;
 
        private PartnerType partnerType;
 
        private Optional<? extends java.util.List<String>> projectIds = Optional.empty();
 
        private Optional<? extends String> teamId = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder accessToken(String accessToken) {
            Utils.checkNotNull(accessToken, "accessToken");
            this.accessToken = accessToken;
            return this;
        }

        public Builder configurationId(String configurationId) {
            Utils.checkNotNull(configurationId, "configurationId");
            this.configurationId = configurationId;
            return this;
        }

        /**
         * Partner Type Enum
         */
        public Builder partnerType(PartnerType partnerType) {
            Utils.checkNotNull(partnerType, "partnerType");
            this.partnerType = partnerType;
            return this;
        }

        public Builder projectIds(java.util.List<String> projectIds) {
            Utils.checkNotNull(projectIds, "projectIds");
            this.projectIds = Optional.ofNullable(projectIds);
            return this;
        }

        public Builder projectIds(Optional<? extends java.util.List<String>> projectIds) {
            Utils.checkNotNull(projectIds, "projectIds");
            this.projectIds = projectIds;
            return this;
        }

        public Builder teamId(String teamId) {
            Utils.checkNotNull(teamId, "teamId");
            this.teamId = Optional.ofNullable(teamId);
            return this;
        }

        public Builder teamId(Optional<? extends String> teamId) {
            Utils.checkNotNull(teamId, "teamId");
            this.teamId = teamId;
            return this;
        }
        
        public IPartnerConfigurationResponseDto build() {
            return new IPartnerConfigurationResponseDto(
                accessToken,
                configurationId,
                partnerType,
                projectIds,
                teamId);
        }
    }
}

