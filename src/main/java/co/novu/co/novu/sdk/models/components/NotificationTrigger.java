/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package co.novu.co.novu.sdk.models.components;

import co.novu.co.novu.sdk.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;

public class NotificationTrigger {

    @JsonProperty("identifier")
    private String identifier;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("subscriberVariables")
    private Optional<? extends java.util.List<NotificationTriggerVariable>> subscriberVariables;

    @JsonProperty("type")
    private NotificationTriggerType type;

    @JsonProperty("variables")
    private java.util.List<NotificationTriggerVariable> variables;

    @JsonCreator
    public NotificationTrigger(
            @JsonProperty("identifier") String identifier,
            @JsonProperty("subscriberVariables") Optional<? extends java.util.List<NotificationTriggerVariable>> subscriberVariables,
            @JsonProperty("type") NotificationTriggerType type,
            @JsonProperty("variables") java.util.List<NotificationTriggerVariable> variables) {
        Utils.checkNotNull(identifier, "identifier");
        Utils.checkNotNull(subscriberVariables, "subscriberVariables");
        Utils.checkNotNull(type, "type");
        Utils.checkNotNull(variables, "variables");
        this.identifier = identifier;
        this.subscriberVariables = subscriberVariables;
        this.type = type;
        this.variables = variables;
    }
    
    public NotificationTrigger(
            String identifier,
            NotificationTriggerType type,
            java.util.List<NotificationTriggerVariable> variables) {
        this(identifier, Optional.empty(), type, variables);
    }

    @JsonIgnore
    public String identifier() {
        return identifier;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<java.util.List<NotificationTriggerVariable>> subscriberVariables() {
        return (Optional<java.util.List<NotificationTriggerVariable>>) subscriberVariables;
    }

    @JsonIgnore
    public NotificationTriggerType type() {
        return type;
    }

    @JsonIgnore
    public java.util.List<NotificationTriggerVariable> variables() {
        return variables;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public NotificationTrigger withIdentifier(String identifier) {
        Utils.checkNotNull(identifier, "identifier");
        this.identifier = identifier;
        return this;
    }

    public NotificationTrigger withSubscriberVariables(java.util.List<NotificationTriggerVariable> subscriberVariables) {
        Utils.checkNotNull(subscriberVariables, "subscriberVariables");
        this.subscriberVariables = Optional.ofNullable(subscriberVariables);
        return this;
    }

    public NotificationTrigger withSubscriberVariables(Optional<? extends java.util.List<NotificationTriggerVariable>> subscriberVariables) {
        Utils.checkNotNull(subscriberVariables, "subscriberVariables");
        this.subscriberVariables = subscriberVariables;
        return this;
    }

    public NotificationTrigger withType(NotificationTriggerType type) {
        Utils.checkNotNull(type, "type");
        this.type = type;
        return this;
    }

    public NotificationTrigger withVariables(java.util.List<NotificationTriggerVariable> variables) {
        Utils.checkNotNull(variables, "variables");
        this.variables = variables;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        NotificationTrigger other = (NotificationTrigger) o;
        return 
            java.util.Objects.deepEquals(this.identifier, other.identifier) &&
            java.util.Objects.deepEquals(this.subscriberVariables, other.subscriberVariables) &&
            java.util.Objects.deepEquals(this.type, other.type) &&
            java.util.Objects.deepEquals(this.variables, other.variables);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            identifier,
            subscriberVariables,
            type,
            variables);
    }
    
    @Override
    public String toString() {
        return Utils.toString(NotificationTrigger.class,
                "identifier", identifier,
                "subscriberVariables", subscriberVariables,
                "type", type,
                "variables", variables);
    }
    
    public final static class Builder {
 
        private String identifier;
 
        private Optional<? extends java.util.List<NotificationTriggerVariable>> subscriberVariables = Optional.empty();
 
        private NotificationTriggerType type;
 
        private java.util.List<NotificationTriggerVariable> variables;  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder identifier(String identifier) {
            Utils.checkNotNull(identifier, "identifier");
            this.identifier = identifier;
            return this;
        }

        public Builder subscriberVariables(java.util.List<NotificationTriggerVariable> subscriberVariables) {
            Utils.checkNotNull(subscriberVariables, "subscriberVariables");
            this.subscriberVariables = Optional.ofNullable(subscriberVariables);
            return this;
        }

        public Builder subscriberVariables(Optional<? extends java.util.List<NotificationTriggerVariable>> subscriberVariables) {
            Utils.checkNotNull(subscriberVariables, "subscriberVariables");
            this.subscriberVariables = subscriberVariables;
            return this;
        }

        public Builder type(NotificationTriggerType type) {
            Utils.checkNotNull(type, "type");
            this.type = type;
            return this;
        }

        public Builder variables(java.util.List<NotificationTriggerVariable> variables) {
            Utils.checkNotNull(variables, "variables");
            this.variables = variables;
            return this;
        }
        
        public NotificationTrigger build() {
            return new NotificationTrigger(
                identifier,
                subscriberVariables,
                type,
                variables);
        }
    }
}

