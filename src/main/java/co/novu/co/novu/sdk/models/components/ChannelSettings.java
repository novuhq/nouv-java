/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package co.novu.co.novu.sdk.models.components;

import co.novu.co.novu.sdk.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;

public class ChannelSettings {

    /**
     * Id of the integration that is used for this channel
     */
    @JsonProperty("_integrationId")
    private String integrationId;

    /**
     * Credentials payload for the specified provider
     */
    @JsonProperty("credentials")
    private ChannelCredentials credentials;

    /**
     * The integration identifier
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("integrationIdentifier")
    private Optional<? extends String> integrationIdentifier;

    /**
     * The provider identifier for the credentials
     */
    @JsonProperty("providerId")
    private ChannelSettingsProviderId providerId;

    @JsonCreator
    public ChannelSettings(
            @JsonProperty("_integrationId") String integrationId,
            @JsonProperty("credentials") ChannelCredentials credentials,
            @JsonProperty("integrationIdentifier") Optional<? extends String> integrationIdentifier,
            @JsonProperty("providerId") ChannelSettingsProviderId providerId) {
        Utils.checkNotNull(integrationId, "integrationId");
        Utils.checkNotNull(credentials, "credentials");
        Utils.checkNotNull(integrationIdentifier, "integrationIdentifier");
        Utils.checkNotNull(providerId, "providerId");
        this.integrationId = integrationId;
        this.credentials = credentials;
        this.integrationIdentifier = integrationIdentifier;
        this.providerId = providerId;
    }
    
    public ChannelSettings(
            String integrationId,
            ChannelCredentials credentials,
            ChannelSettingsProviderId providerId) {
        this(integrationId, credentials, Optional.empty(), providerId);
    }

    /**
     * Id of the integration that is used for this channel
     */
    @JsonIgnore
    public String integrationId() {
        return integrationId;
    }

    /**
     * Credentials payload for the specified provider
     */
    @JsonIgnore
    public ChannelCredentials credentials() {
        return credentials;
    }

    /**
     * The integration identifier
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> integrationIdentifier() {
        return (Optional<String>) integrationIdentifier;
    }

    /**
     * The provider identifier for the credentials
     */
    @JsonIgnore
    public ChannelSettingsProviderId providerId() {
        return providerId;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Id of the integration that is used for this channel
     */
    public ChannelSettings withIntegrationId(String integrationId) {
        Utils.checkNotNull(integrationId, "integrationId");
        this.integrationId = integrationId;
        return this;
    }

    /**
     * Credentials payload for the specified provider
     */
    public ChannelSettings withCredentials(ChannelCredentials credentials) {
        Utils.checkNotNull(credentials, "credentials");
        this.credentials = credentials;
        return this;
    }

    /**
     * The integration identifier
     */
    public ChannelSettings withIntegrationIdentifier(String integrationIdentifier) {
        Utils.checkNotNull(integrationIdentifier, "integrationIdentifier");
        this.integrationIdentifier = Optional.ofNullable(integrationIdentifier);
        return this;
    }

    /**
     * The integration identifier
     */
    public ChannelSettings withIntegrationIdentifier(Optional<? extends String> integrationIdentifier) {
        Utils.checkNotNull(integrationIdentifier, "integrationIdentifier");
        this.integrationIdentifier = integrationIdentifier;
        return this;
    }

    /**
     * The provider identifier for the credentials
     */
    public ChannelSettings withProviderId(ChannelSettingsProviderId providerId) {
        Utils.checkNotNull(providerId, "providerId");
        this.providerId = providerId;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ChannelSettings other = (ChannelSettings) o;
        return 
            java.util.Objects.deepEquals(this.integrationId, other.integrationId) &&
            java.util.Objects.deepEquals(this.credentials, other.credentials) &&
            java.util.Objects.deepEquals(this.integrationIdentifier, other.integrationIdentifier) &&
            java.util.Objects.deepEquals(this.providerId, other.providerId);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            integrationId,
            credentials,
            integrationIdentifier,
            providerId);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ChannelSettings.class,
                "integrationId", integrationId,
                "credentials", credentials,
                "integrationIdentifier", integrationIdentifier,
                "providerId", providerId);
    }
    
    public final static class Builder {
 
        private String integrationId;
 
        private ChannelCredentials credentials;
 
        private Optional<? extends String> integrationIdentifier = Optional.empty();
 
        private ChannelSettingsProviderId providerId;  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Id of the integration that is used for this channel
         */
        public Builder integrationId(String integrationId) {
            Utils.checkNotNull(integrationId, "integrationId");
            this.integrationId = integrationId;
            return this;
        }

        /**
         * Credentials payload for the specified provider
         */
        public Builder credentials(ChannelCredentials credentials) {
            Utils.checkNotNull(credentials, "credentials");
            this.credentials = credentials;
            return this;
        }

        /**
         * The integration identifier
         */
        public Builder integrationIdentifier(String integrationIdentifier) {
            Utils.checkNotNull(integrationIdentifier, "integrationIdentifier");
            this.integrationIdentifier = Optional.ofNullable(integrationIdentifier);
            return this;
        }

        /**
         * The integration identifier
         */
        public Builder integrationIdentifier(Optional<? extends String> integrationIdentifier) {
            Utils.checkNotNull(integrationIdentifier, "integrationIdentifier");
            this.integrationIdentifier = integrationIdentifier;
            return this;
        }

        /**
         * The provider identifier for the credentials
         */
        public Builder providerId(ChannelSettingsProviderId providerId) {
            Utils.checkNotNull(providerId, "providerId");
            this.providerId = providerId;
            return this;
        }
        
        public ChannelSettings build() {
            return new ChannelSettings(
                integrationId,
                credentials,
                integrationIdentifier,
                providerId);
        }
    }
}

