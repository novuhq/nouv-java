/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package co.novu.co.novu.sdk.models.operations;

import co.novu.co.novu.sdk.utils.SpeakeasyMetadata;
import co.novu.co.novu.sdk.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;

public class SubscribersControllerMarkActionAsSeenRequest {

    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=messageId")
    private String messageId;

    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=type")
    private String type;

    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=subscriberId")
    private String subscriberId;

    @SpeakeasyMetadata("request:mediaType=application/json")
    private co.novu.co.novu.sdk.models.components.MarkMessageActionAsSeenDto markMessageActionAsSeenDto;

    @JsonCreator
    public SubscribersControllerMarkActionAsSeenRequest(
            String messageId,
            String type,
            String subscriberId,
            co.novu.co.novu.sdk.models.components.MarkMessageActionAsSeenDto markMessageActionAsSeenDto) {
        Utils.checkNotNull(messageId, "messageId");
        Utils.checkNotNull(type, "type");
        Utils.checkNotNull(subscriberId, "subscriberId");
        Utils.checkNotNull(markMessageActionAsSeenDto, "markMessageActionAsSeenDto");
        this.messageId = messageId;
        this.type = type;
        this.subscriberId = subscriberId;
        this.markMessageActionAsSeenDto = markMessageActionAsSeenDto;
    }

    @JsonIgnore
    public String messageId() {
        return messageId;
    }

    @JsonIgnore
    public String type() {
        return type;
    }

    @JsonIgnore
    public String subscriberId() {
        return subscriberId;
    }

    @JsonIgnore
    public co.novu.co.novu.sdk.models.components.MarkMessageActionAsSeenDto markMessageActionAsSeenDto() {
        return markMessageActionAsSeenDto;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public SubscribersControllerMarkActionAsSeenRequest withMessageId(String messageId) {
        Utils.checkNotNull(messageId, "messageId");
        this.messageId = messageId;
        return this;
    }

    public SubscribersControllerMarkActionAsSeenRequest withType(String type) {
        Utils.checkNotNull(type, "type");
        this.type = type;
        return this;
    }

    public SubscribersControllerMarkActionAsSeenRequest withSubscriberId(String subscriberId) {
        Utils.checkNotNull(subscriberId, "subscriberId");
        this.subscriberId = subscriberId;
        return this;
    }

    public SubscribersControllerMarkActionAsSeenRequest withMarkMessageActionAsSeenDto(co.novu.co.novu.sdk.models.components.MarkMessageActionAsSeenDto markMessageActionAsSeenDto) {
        Utils.checkNotNull(markMessageActionAsSeenDto, "markMessageActionAsSeenDto");
        this.markMessageActionAsSeenDto = markMessageActionAsSeenDto;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SubscribersControllerMarkActionAsSeenRequest other = (SubscribersControllerMarkActionAsSeenRequest) o;
        return 
            java.util.Objects.deepEquals(this.messageId, other.messageId) &&
            java.util.Objects.deepEquals(this.type, other.type) &&
            java.util.Objects.deepEquals(this.subscriberId, other.subscriberId) &&
            java.util.Objects.deepEquals(this.markMessageActionAsSeenDto, other.markMessageActionAsSeenDto);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            messageId,
            type,
            subscriberId,
            markMessageActionAsSeenDto);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SubscribersControllerMarkActionAsSeenRequest.class,
                "messageId", messageId,
                "type", type,
                "subscriberId", subscriberId,
                "markMessageActionAsSeenDto", markMessageActionAsSeenDto);
    }
    
    public final static class Builder {
 
        private String messageId;
 
        private String type;
 
        private String subscriberId;
 
        private co.novu.co.novu.sdk.models.components.MarkMessageActionAsSeenDto markMessageActionAsSeenDto;  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder messageId(String messageId) {
            Utils.checkNotNull(messageId, "messageId");
            this.messageId = messageId;
            return this;
        }

        public Builder type(String type) {
            Utils.checkNotNull(type, "type");
            this.type = type;
            return this;
        }

        public Builder subscriberId(String subscriberId) {
            Utils.checkNotNull(subscriberId, "subscriberId");
            this.subscriberId = subscriberId;
            return this;
        }

        public Builder markMessageActionAsSeenDto(co.novu.co.novu.sdk.models.components.MarkMessageActionAsSeenDto markMessageActionAsSeenDto) {
            Utils.checkNotNull(markMessageActionAsSeenDto, "markMessageActionAsSeenDto");
            this.markMessageActionAsSeenDto = markMessageActionAsSeenDto;
            return this;
        }
        
        public SubscribersControllerMarkActionAsSeenRequest build() {
            return new SubscribersControllerMarkActionAsSeenRequest(
                messageId,
                type,
                subscriberId,
                markMessageActionAsSeenDto);
        }
    }
}

