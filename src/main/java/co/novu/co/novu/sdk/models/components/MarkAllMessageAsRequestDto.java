/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package co.novu.co.novu.sdk.models.components;

import co.novu.co.novu.sdk.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;

public class MarkAllMessageAsRequestDto {

    /**
     * Optional feed identifier or array of feed identifiers
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("feedIdentifier")
    private Optional<? extends FeedIdentifier> feedIdentifier;

    /**
     * Mark all subscriber messages as read, unread, seen or unseen
     */
    @JsonProperty("markAs")
    private MarkAs markAs;

    @JsonCreator
    public MarkAllMessageAsRequestDto(
            @JsonProperty("feedIdentifier") Optional<? extends FeedIdentifier> feedIdentifier,
            @JsonProperty("markAs") MarkAs markAs) {
        Utils.checkNotNull(feedIdentifier, "feedIdentifier");
        Utils.checkNotNull(markAs, "markAs");
        this.feedIdentifier = feedIdentifier;
        this.markAs = markAs;
    }
    
    public MarkAllMessageAsRequestDto(
            MarkAs markAs) {
        this(Optional.empty(), markAs);
    }

    /**
     * Optional feed identifier or array of feed identifiers
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<FeedIdentifier> feedIdentifier() {
        return (Optional<FeedIdentifier>) feedIdentifier;
    }

    /**
     * Mark all subscriber messages as read, unread, seen or unseen
     */
    @JsonIgnore
    public MarkAs markAs() {
        return markAs;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Optional feed identifier or array of feed identifiers
     */
    public MarkAllMessageAsRequestDto withFeedIdentifier(FeedIdentifier feedIdentifier) {
        Utils.checkNotNull(feedIdentifier, "feedIdentifier");
        this.feedIdentifier = Optional.ofNullable(feedIdentifier);
        return this;
    }

    /**
     * Optional feed identifier or array of feed identifiers
     */
    public MarkAllMessageAsRequestDto withFeedIdentifier(Optional<? extends FeedIdentifier> feedIdentifier) {
        Utils.checkNotNull(feedIdentifier, "feedIdentifier");
        this.feedIdentifier = feedIdentifier;
        return this;
    }

    /**
     * Mark all subscriber messages as read, unread, seen or unseen
     */
    public MarkAllMessageAsRequestDto withMarkAs(MarkAs markAs) {
        Utils.checkNotNull(markAs, "markAs");
        this.markAs = markAs;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        MarkAllMessageAsRequestDto other = (MarkAllMessageAsRequestDto) o;
        return 
            java.util.Objects.deepEquals(this.feedIdentifier, other.feedIdentifier) &&
            java.util.Objects.deepEquals(this.markAs, other.markAs);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            feedIdentifier,
            markAs);
    }
    
    @Override
    public String toString() {
        return Utils.toString(MarkAllMessageAsRequestDto.class,
                "feedIdentifier", feedIdentifier,
                "markAs", markAs);
    }
    
    public final static class Builder {
 
        private Optional<? extends FeedIdentifier> feedIdentifier = Optional.empty();
 
        private MarkAs markAs;  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Optional feed identifier or array of feed identifiers
         */
        public Builder feedIdentifier(FeedIdentifier feedIdentifier) {
            Utils.checkNotNull(feedIdentifier, "feedIdentifier");
            this.feedIdentifier = Optional.ofNullable(feedIdentifier);
            return this;
        }

        /**
         * Optional feed identifier or array of feed identifiers
         */
        public Builder feedIdentifier(Optional<? extends FeedIdentifier> feedIdentifier) {
            Utils.checkNotNull(feedIdentifier, "feedIdentifier");
            this.feedIdentifier = feedIdentifier;
            return this;
        }

        /**
         * Mark all subscriber messages as read, unread, seen or unseen
         */
        public Builder markAs(MarkAs markAs) {
            Utils.checkNotNull(markAs, "markAs");
            this.markAs = markAs;
            return this;
        }
        
        public MarkAllMessageAsRequestDto build() {
            return new MarkAllMessageAsRequestDto(
                feedIdentifier,
                markAs);
        }
    }
}

