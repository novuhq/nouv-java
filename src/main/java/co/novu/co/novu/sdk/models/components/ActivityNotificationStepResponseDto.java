/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package co.novu.co.novu.sdk.models.components;

import co.novu.co.novu.sdk.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;

public class ActivityNotificationStepResponseDto {

    @JsonProperty("_id")
    private String id;

    @JsonProperty("active")
    private boolean active;

    @JsonProperty("filters")
    private StepFilter filters;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("template")
    private Optional<? extends MessageTemplateDto> template;

    @JsonCreator
    public ActivityNotificationStepResponseDto(
            @JsonProperty("_id") String id,
            @JsonProperty("active") boolean active,
            @JsonProperty("filters") StepFilter filters,
            @JsonProperty("template") Optional<? extends MessageTemplateDto> template) {
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(active, "active");
        Utils.checkNotNull(filters, "filters");
        Utils.checkNotNull(template, "template");
        this.id = id;
        this.active = active;
        this.filters = filters;
        this.template = template;
    }
    
    public ActivityNotificationStepResponseDto(
            String id,
            boolean active,
            StepFilter filters) {
        this(id, active, filters, Optional.empty());
    }

    @JsonIgnore
    public String id() {
        return id;
    }

    @JsonIgnore
    public boolean active() {
        return active;
    }

    @JsonIgnore
    public StepFilter filters() {
        return filters;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<MessageTemplateDto> template() {
        return (Optional<MessageTemplateDto>) template;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public ActivityNotificationStepResponseDto withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    public ActivityNotificationStepResponseDto withActive(boolean active) {
        Utils.checkNotNull(active, "active");
        this.active = active;
        return this;
    }

    public ActivityNotificationStepResponseDto withFilters(StepFilter filters) {
        Utils.checkNotNull(filters, "filters");
        this.filters = filters;
        return this;
    }

    public ActivityNotificationStepResponseDto withTemplate(MessageTemplateDto template) {
        Utils.checkNotNull(template, "template");
        this.template = Optional.ofNullable(template);
        return this;
    }

    public ActivityNotificationStepResponseDto withTemplate(Optional<? extends MessageTemplateDto> template) {
        Utils.checkNotNull(template, "template");
        this.template = template;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ActivityNotificationStepResponseDto other = (ActivityNotificationStepResponseDto) o;
        return 
            java.util.Objects.deepEquals(this.id, other.id) &&
            java.util.Objects.deepEquals(this.active, other.active) &&
            java.util.Objects.deepEquals(this.filters, other.filters) &&
            java.util.Objects.deepEquals(this.template, other.template);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            id,
            active,
            filters,
            template);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ActivityNotificationStepResponseDto.class,
                "id", id,
                "active", active,
                "filters", filters,
                "template", template);
    }
    
    public final static class Builder {
 
        private String id;
 
        private Boolean active;
 
        private StepFilter filters;
 
        private Optional<? extends MessageTemplateDto> template = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        public Builder active(boolean active) {
            Utils.checkNotNull(active, "active");
            this.active = active;
            return this;
        }

        public Builder filters(StepFilter filters) {
            Utils.checkNotNull(filters, "filters");
            this.filters = filters;
            return this;
        }

        public Builder template(MessageTemplateDto template) {
            Utils.checkNotNull(template, "template");
            this.template = Optional.ofNullable(template);
            return this;
        }

        public Builder template(Optional<? extends MessageTemplateDto> template) {
            Utils.checkNotNull(template, "template");
            this.template = template;
            return this;
        }
        
        public ActivityNotificationStepResponseDto build() {
            return new ActivityNotificationStepResponseDto(
                id,
                active,
                filters,
                template);
        }
    }
}

