/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package co.novu.co.novu.sdk.models.operations;

import co.novu.co.novu.sdk.utils.SpeakeasyMetadata;
import co.novu.co.novu.sdk.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;

public class NotificationsControllerGetNotificationRequest {

    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=notificationId")
    private String notificationId;

    @JsonCreator
    public NotificationsControllerGetNotificationRequest(
            String notificationId) {
        Utils.checkNotNull(notificationId, "notificationId");
        this.notificationId = notificationId;
    }

    @JsonIgnore
    public String notificationId() {
        return notificationId;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public NotificationsControllerGetNotificationRequest withNotificationId(String notificationId) {
        Utils.checkNotNull(notificationId, "notificationId");
        this.notificationId = notificationId;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        NotificationsControllerGetNotificationRequest other = (NotificationsControllerGetNotificationRequest) o;
        return 
            java.util.Objects.deepEquals(this.notificationId, other.notificationId);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            notificationId);
    }
    
    @Override
    public String toString() {
        return Utils.toString(NotificationsControllerGetNotificationRequest.class,
                "notificationId", notificationId);
    }
    
    public final static class Builder {
 
        private String notificationId;  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder notificationId(String notificationId) {
            Utils.checkNotNull(notificationId, "notificationId");
            this.notificationId = notificationId;
            return this;
        }
        
        public NotificationsControllerGetNotificationRequest build() {
            return new NotificationsControllerGetNotificationRequest(
                notificationId);
        }
    }
}

