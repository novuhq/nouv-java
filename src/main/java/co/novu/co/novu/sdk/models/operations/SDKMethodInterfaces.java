/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package co.novu.co.novu.sdk.models.operations;

import co.novu.co.novu.sdk.utils.Options;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class SDKMethodInterfaces {

    public interface MethodCallChangesControllerApplyDiff {
        co.novu.co.novu.sdk.models.operations.ChangesControllerApplyDiffResponse apply(
            String changeId,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallChangesControllerBulkApplyDiff {
        co.novu.co.novu.sdk.models.operations.ChangesControllerBulkApplyDiffResponse applyBulk(
            co.novu.co.novu.sdk.models.components.BulkApplyChangeDto request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallChangesControllerGetChangesCount {
        co.novu.co.novu.sdk.models.operations.ChangesControllerGetChangesCountResponse count(
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallChangesControllerGetChanges {
        co.novu.co.novu.sdk.models.operations.ChangesControllerGetChangesResponse retrieve(
            co.novu.co.novu.sdk.models.operations.ChangesControllerGetChangesRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallEnvironmentsControllerListMyEnvironments {
        co.novu.co.novu.sdk.models.operations.EnvironmentsControllerListMyEnvironmentsResponse list(
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallEnvironmentsControllerGetCurrentEnvironment {
        co.novu.co.novu.sdk.models.operations.EnvironmentsControllerGetCurrentEnvironmentResponse retrieve(
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallEnvironmentsControllerListOrganizationApiKeys {
        co.novu.co.novu.sdk.models.operations.EnvironmentsControllerListOrganizationApiKeysResponse list(
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallEnvironmentsControllerRegenerateOrganizationApiKeys {
        co.novu.co.novu.sdk.models.operations.EnvironmentsControllerRegenerateOrganizationApiKeysResponse regenerate(
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallEventsControllerCancel {
        co.novu.co.novu.sdk.models.operations.EventsControllerCancelResponse cancel(
            String transactionId,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallEventsControllerTrigger {
        co.novu.co.novu.sdk.models.operations.EventsControllerTriggerResponse trigger(
            co.novu.co.novu.sdk.models.components.TriggerEventRequestDto request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallEventsControllerBroadcastEventToAll {
        co.novu.co.novu.sdk.models.operations.EventsControllerBroadcastEventToAllResponse triggerBroadcast(
            co.novu.co.novu.sdk.models.components.TriggerEventToAllRequestDto request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallEventsControllerTriggerBulk {
        co.novu.co.novu.sdk.models.operations.EventsControllerTriggerBulkResponse triggerBulk(
            co.novu.co.novu.sdk.models.components.BulkTriggerEventDto request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallExecutionDetailsControllerGetExecutionDetailsForNotification {
        co.novu.co.novu.sdk.models.operations.ExecutionDetailsControllerGetExecutionDetailsForNotificationResponse retrieve(
            String notificationId,
            String subscriberId,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallFeedsControllerCreateFeed {
        co.novu.co.novu.sdk.models.operations.FeedsControllerCreateFeedResponse create(
            co.novu.co.novu.sdk.models.components.CreateFeedRequestDto request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallFeedsControllerDeleteFeedById {
        co.novu.co.novu.sdk.models.operations.FeedsControllerDeleteFeedByIdResponse delete(
            String feedId,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallFeedsControllerGetFeeds {
        co.novu.co.novu.sdk.models.operations.FeedsControllerGetFeedsResponse retrieve(
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallIntegrationsControllerCreateIntegration {
        co.novu.co.novu.sdk.models.operations.IntegrationsControllerCreateIntegrationResponse create(
            co.novu.co.novu.sdk.models.components.CreateIntegrationRequestDto request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallIntegrationsControllerRemoveIntegration {
        co.novu.co.novu.sdk.models.operations.IntegrationsControllerRemoveIntegrationResponse delete(
            String integrationId,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallIntegrationsControllerListIntegrations {
        co.novu.co.novu.sdk.models.operations.IntegrationsControllerListIntegrationsResponse list(
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallIntegrationsControllerGetActiveIntegrations {
        co.novu.co.novu.sdk.models.operations.IntegrationsControllerGetActiveIntegrationsResponse listActive(
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallIntegrationsControllerSetIntegrationAsPrimary {
        co.novu.co.novu.sdk.models.operations.IntegrationsControllerSetIntegrationAsPrimaryResponse setAsPrimary(
            String integrationId,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallIntegrationsControllerUpdateIntegrationById {
        co.novu.co.novu.sdk.models.operations.IntegrationsControllerUpdateIntegrationByIdResponse update(
            String integrationId,
            co.novu.co.novu.sdk.models.components.UpdateIntegrationRequestDto updateIntegrationRequestDto,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallIntegrationsControllerGetWebhookSupportStatus {
        co.novu.co.novu.sdk.models.operations.IntegrationsControllerGetWebhookSupportStatusResponse retrieve(
            String providerOrIntegrationId,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallLayoutsControllerPropertyDescriptor {
        co.novu.co.novu.sdk.models.operations.LayoutsControllerPropertyDescriptorResponse create(
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallLayoutsControllerDeleteLayout {
        co.novu.co.novu.sdk.models.operations.LayoutsControllerDeleteLayoutResponse delete(
            String layoutId,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallLayoutsControllerListLayouts {
        co.novu.co.novu.sdk.models.operations.LayoutsControllerListLayoutsResponse list(
            co.novu.co.novu.sdk.models.operations.LayoutsControllerListLayoutsRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallLayoutsControllerGetLayout {
        co.novu.co.novu.sdk.models.operations.LayoutsControllerGetLayoutResponse retrieve(
            String layoutId,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallLayoutsControllerSetDefaultLayout {
        co.novu.co.novu.sdk.models.operations.LayoutsControllerSetDefaultLayoutResponse setAsDefault(
            String layoutId,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallLayoutsControllerUpdateLayout {
        co.novu.co.novu.sdk.models.operations.LayoutsControllerUpdateLayoutResponse update(
            String layoutId,
            co.novu.co.novu.sdk.models.components.UpdateLayoutRequestDto updateLayoutRequestDto,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallMessagesControllerDeleteMessage {
        co.novu.co.novu.sdk.models.operations.MessagesControllerDeleteMessageResponse delete(
            String messageId,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallMessagesControllerDeleteMessagesByTransactionId {
        co.novu.co.novu.sdk.models.operations.MessagesControllerDeleteMessagesByTransactionIdResponse deleteByTransactionId(
            Optional<? extends co.novu.co.novu.sdk.models.operations.Channel> channel,
            String transactionId,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallMessagesControllerGetMessages {
        co.novu.co.novu.sdk.models.operations.MessagesControllerGetMessagesResponse retrieve(
            co.novu.co.novu.sdk.models.operations.MessagesControllerGetMessagesRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallNotificationGroupsControllerCreateNotificationGroup {
        co.novu.co.novu.sdk.models.operations.NotificationGroupsControllerCreateNotificationGroupResponse create(
            co.novu.co.novu.sdk.models.components.CreateNotificationGroupRequestDto request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallNotificationGroupsControllerDeleteNotificationGroup {
        co.novu.co.novu.sdk.models.operations.NotificationGroupsControllerDeleteNotificationGroupResponse delete(
            String id,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallNotificationGroupsControllerListNotificationGroups {
        co.novu.co.novu.sdk.models.operations.NotificationGroupsControllerListNotificationGroupsResponse list(
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallNotificationGroupsControllerGetNotificationGroup {
        co.novu.co.novu.sdk.models.operations.NotificationGroupsControllerGetNotificationGroupResponse retrieve(
            String id,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallNotificationGroupsControllerUpdateNotificationGroup {
        co.novu.co.novu.sdk.models.operations.NotificationGroupsControllerUpdateNotificationGroupResponse update(
            String id,
            co.novu.co.novu.sdk.models.components.CreateNotificationGroupRequestDto createNotificationGroupRequestDto,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallNotificationsControllerListNotifications {
        co.novu.co.novu.sdk.models.operations.NotificationsControllerListNotificationsResponse list(
            co.novu.co.novu.sdk.models.operations.NotificationsControllerListNotificationsRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallNotificationsControllerGetNotification {
        co.novu.co.novu.sdk.models.operations.NotificationsControllerGetNotificationResponse retrieve(
            String notificationId,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallNotificationsControllerGetActivityGraphStats {
        co.novu.co.novu.sdk.models.operations.NotificationsControllerGetActivityGraphStatsResponse graph(
            Optional<? extends Double> days,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallNotificationsControllerGetActivityStats {
        co.novu.co.novu.sdk.models.operations.NotificationsControllerGetActivityStatsResponse retrieve(
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallOrganizationControllerCreateOrganization {
        co.novu.co.novu.sdk.models.operations.OrganizationControllerCreateOrganizationResponse create(
            co.novu.co.novu.sdk.models.components.CreateOrganizationDto request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallOrganizationControllerListOrganizations {
        co.novu.co.novu.sdk.models.operations.OrganizationControllerListOrganizationsResponse list(
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallOrganizationControllerRename {
        co.novu.co.novu.sdk.models.operations.OrganizationControllerRenameResponse rename(
            co.novu.co.novu.sdk.models.components.RenameOrganizationDto request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallOrganizationControllerGetSelfOrganizationData {
        co.novu.co.novu.sdk.models.operations.OrganizationControllerGetSelfOrganizationDataResponse retrieve(
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallOrganizationControllerUpdateBrandingDetails {
        co.novu.co.novu.sdk.models.operations.OrganizationControllerUpdateBrandingDetailsResponse update(
            co.novu.co.novu.sdk.models.components.UpdateBrandingDetailsDto request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallOrganizationControllerRemove {
        co.novu.co.novu.sdk.models.operations.OrganizationControllerRemoveResponse delete(
            String memberId,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallOrganizationControllerListOrganizationMembers {
        co.novu.co.novu.sdk.models.operations.OrganizationControllerListOrganizationMembersResponse list(
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallSubscribersControllerCreateSubscriber {
        co.novu.co.novu.sdk.models.operations.SubscribersControllerCreateSubscriberResponse create(
            co.novu.co.novu.sdk.models.components.CreateSubscriberRequestDto request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallSubscribersControllerBulkCreateSubscribers {
        co.novu.co.novu.sdk.models.operations.SubscribersControllerBulkCreateSubscribersResponse createBulk(
            co.novu.co.novu.sdk.models.components.BulkSubscriberCreateDto request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallSubscribersControllerRemoveSubscriber {
        co.novu.co.novu.sdk.models.operations.SubscribersControllerRemoveSubscriberResponse delete(
            String subscriberId,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallSubscribersControllerListSubscribers {
        co.novu.co.novu.sdk.models.operations.SubscribersControllerListSubscribersResponse list(
            Optional<? extends Double> page,
            Optional<? extends Double> limit,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallSubscribersControllerGetSubscriber {
        co.novu.co.novu.sdk.models.operations.SubscribersControllerGetSubscriberResponse retrieve(
            String subscriberId,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallSubscribersControllerUpdateSubscriber {
        co.novu.co.novu.sdk.models.operations.SubscribersControllerUpdateSubscriberResponse update(
            String subscriberId,
            co.novu.co.novu.sdk.models.components.UpdateSubscriberRequestDto updateSubscriberRequestDto,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallSubscribersControllerModifySubscriberChannel {
        co.novu.co.novu.sdk.models.operations.SubscribersControllerModifySubscriberChannelResponse append(
            String subscriberId,
            co.novu.co.novu.sdk.models.components.UpdateSubscriberChannelRequestDto updateSubscriberChannelRequestDto,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallSubscribersControllerDeleteSubscriberCredentials {
        co.novu.co.novu.sdk.models.operations.SubscribersControllerDeleteSubscriberCredentialsResponse delete(
            String subscriberId,
            String providerId,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallSubscribersControllerUpdateSubscriberChannel {
        co.novu.co.novu.sdk.models.operations.SubscribersControllerUpdateSubscriberChannelResponse update(
            String subscriberId,
            co.novu.co.novu.sdk.models.components.UpdateSubscriberChannelRequestDto updateSubscriberChannelRequestDto,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallSubscribersControllerChatAccessOauth {
        co.novu.co.novu.sdk.models.operations.SubscribersControllerChatAccessOauthResponse chatAccessOauth(
            co.novu.co.novu.sdk.models.operations.SubscribersControllerChatAccessOauthRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallSubscribersControllerChatOauthCallback {
        co.novu.co.novu.sdk.models.operations.SubscribersControllerChatOauthCallbackResponse chatAccessOauthCallBack(
            co.novu.co.novu.sdk.models.operations.SubscribersControllerChatOauthCallbackRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallSubscribersControllerMarkAllUnreadAsRead {
        co.novu.co.novu.sdk.models.operations.SubscribersControllerMarkAllUnreadAsReadResponse markAll(
            String subscriberId,
            co.novu.co.novu.sdk.models.components.MarkAllMessageAsRequestDto markAllMessageAsRequestDto,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallSubscribersControllerMarkMessagesAs {
        co.novu.co.novu.sdk.models.operations.SubscribersControllerMarkMessagesAsResponse markAllAs(
            String subscriberId,
            co.novu.co.novu.sdk.models.components.MessageMarkAsRequestDto messageMarkAsRequestDto,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallSubscribersControllerMarkActionAsSeen {
        co.novu.co.novu.sdk.models.operations.SubscribersControllerMarkActionAsSeenResponse updateAsSeen(
            co.novu.co.novu.sdk.models.operations.SubscribersControllerMarkActionAsSeenRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallSubscribersControllerGetNotificationsFeed {
        co.novu.co.novu.sdk.models.operations.SubscribersControllerGetNotificationsFeedResponse retrieve(
            co.novu.co.novu.sdk.models.operations.SubscribersControllerGetNotificationsFeedRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallSubscribersControllerGetUnseenCount {
        co.novu.co.novu.sdk.models.operations.SubscribersControllerGetUnseenCountResponse unseenCount(
            co.novu.co.novu.sdk.models.operations.SubscribersControllerGetUnseenCountRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallSubscribersControllerUpdateSubscriberOnlineFlag {
        co.novu.co.novu.sdk.models.operations.SubscribersControllerUpdateSubscriberOnlineFlagResponse updateOnlineFlag(
            String subscriberId,
            co.novu.co.novu.sdk.models.components.UpdateSubscriberOnlineFlagRequestDto updateSubscriberOnlineFlagRequestDto,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallSubscribersControllerListSubscriberPreferences {
        co.novu.co.novu.sdk.models.operations.SubscribersControllerListSubscriberPreferencesResponse list(
            String subscriberId,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallSubscribersControllerGetSubscriberPreferenceByLevel {
        co.novu.co.novu.sdk.models.operations.SubscribersControllerGetSubscriberPreferenceByLevelResponse retrieveByLevel(
            String parameter,
            String subscriberId,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallSubscribersControllerUpdateSubscriberPreference {
        co.novu.co.novu.sdk.models.operations.SubscribersControllerUpdateSubscriberPreferenceResponse update(
            co.novu.co.novu.sdk.models.operations.SubscribersControllerUpdateSubscriberPreferenceRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallSubscribersControllerUpdateSubscriberGlobalPreferences {
        co.novu.co.novu.sdk.models.operations.SubscribersControllerUpdateSubscriberGlobalPreferencesResponse updateGlobal(
            String subscriberId,
            co.novu.co.novu.sdk.models.components.UpdateSubscriberGlobalPreferencesRequestDto updateSubscriberGlobalPreferencesRequestDto,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallTenantControllerCreateTenant {
        co.novu.co.novu.sdk.models.operations.TenantControllerCreateTenantResponse create(
            co.novu.co.novu.sdk.models.components.CreateTenantRequestDto request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallTenantControllerRemoveTenant {
        co.novu.co.novu.sdk.models.operations.TenantControllerRemoveTenantResponse delete(
            String identifier,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallTenantControllerListTenants {
        co.novu.co.novu.sdk.models.operations.TenantControllerListTenantsResponse list(
            Optional<? extends Double> page,
            Optional<? extends Double> limit,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallTenantControllerGetTenantById {
        co.novu.co.novu.sdk.models.operations.TenantControllerGetTenantByIdResponse retrieve(
            String identifier,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallTenantControllerUpdateTenant {
        co.novu.co.novu.sdk.models.operations.TenantControllerUpdateTenantResponse update(
            String identifier,
            co.novu.co.novu.sdk.models.components.UpdateTenantRequestDto updateTenantRequestDto,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallTopicsControllerCreateTopic {
        co.novu.co.novu.sdk.models.operations.TopicsControllerCreateTopicResponse create(
            co.novu.co.novu.sdk.models.components.CreateTopicRequestDto request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallTopicsControllerDeleteTopic {
        co.novu.co.novu.sdk.models.operations.TopicsControllerDeleteTopicResponse delete(
            String topicKey,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallTopicsControllerListTopics {
        co.novu.co.novu.sdk.models.operations.TopicsControllerListTopicsResponse list(
            co.novu.co.novu.sdk.models.operations.TopicsControllerListTopicsRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallTopicsControllerRenameTopic {
        co.novu.co.novu.sdk.models.operations.TopicsControllerRenameTopicResponse rename(
            String topicKey,
            co.novu.co.novu.sdk.models.components.RenameTopicRequestDto renameTopicRequestDto,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallTopicsControllerGetTopic {
        co.novu.co.novu.sdk.models.operations.TopicsControllerGetTopicResponse retrieve(
            String topicKey,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallTopicsControllerAddSubscribers {
        co.novu.co.novu.sdk.models.operations.TopicsControllerAddSubscribersResponse assign(
            String topicKey,
            co.novu.co.novu.sdk.models.components.AddSubscribersRequestDto addSubscribersRequestDto,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallTopicsControllerRemoveSubscribers {
        co.novu.co.novu.sdk.models.operations.TopicsControllerRemoveSubscribersResponse delete(
            String topicKey,
            co.novu.co.novu.sdk.models.components.RemoveSubscribersRequestDto removeSubscribersRequestDto,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallTopicsControllerGetTopicSubscriber {
        co.novu.co.novu.sdk.models.operations.TopicsControllerGetTopicSubscriberResponse retrieve(
            String topicKey,
            String externalSubscriberId,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallWorkflowControllerCreate {
        co.novu.co.novu.sdk.models.operations.WorkflowControllerCreateResponse create(
            co.novu.co.novu.sdk.models.components.CreateWorkflowRequestDto request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallWorkflowControllerDeleteWorkflowById {
        co.novu.co.novu.sdk.models.operations.WorkflowControllerDeleteWorkflowByIdResponse delete(
            String workflowId,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallWorkflowControllerListWorkflows {
        co.novu.co.novu.sdk.models.operations.WorkflowControllerListWorkflowsResponse list(
            co.novu.co.novu.sdk.models.operations.WorkflowControllerListWorkflowsRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallWorkflowControllerGetWorkflowById {
        co.novu.co.novu.sdk.models.operations.WorkflowControllerGetWorkflowByIdResponse retrieve(
            String workflowId,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallWorkflowControllerUpdateWorkflowById {
        co.novu.co.novu.sdk.models.operations.WorkflowControllerUpdateWorkflowByIdResponse update(
            String workflowId,
            co.novu.co.novu.sdk.models.components.UpdateWorkflowRequestDto updateWorkflowRequestDto,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallWorkflowControllerGetWorkflowVariables {
        co.novu.co.novu.sdk.models.operations.WorkflowControllerGetWorkflowVariablesResponse retrieve(
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallWorkflowControllerUpdateActiveStatus {
        co.novu.co.novu.sdk.models.operations.WorkflowControllerUpdateActiveStatusResponse update(
            String workflowId,
            co.novu.co.novu.sdk.models.components.ChangeWorkflowStatusRequestDto changeWorkflowStatusRequestDto,
            Optional<Options> options) throws Exception;
    }

}
