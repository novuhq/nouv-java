/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package co.novu.co.novu.sdk.models.components;

import co.novu.co.novu.sdk.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;

public class ActivityNotificationJobResponseDto {

    @JsonProperty("_id")
    private String id;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("digest")
    private Optional<? extends Digest> digest;

    @JsonProperty("executionDetails")
    private java.util.List<ActivityNotificationExecutionDetailResponseDto> executionDetails;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("payload")
    private Optional<? extends Payload> payload;

    @JsonProperty("providerId")
    private ActivityNotificationJobResponseDtoProviderId providerId;

    @JsonProperty("status")
    private String status;

    @JsonProperty("step")
    private ActivityNotificationStepResponseDto step;

    @JsonProperty("type")
    private String type;

    @JsonCreator
    public ActivityNotificationJobResponseDto(
            @JsonProperty("_id") String id,
            @JsonProperty("digest") Optional<? extends Digest> digest,
            @JsonProperty("executionDetails") java.util.List<ActivityNotificationExecutionDetailResponseDto> executionDetails,
            @JsonProperty("payload") Optional<? extends Payload> payload,
            @JsonProperty("providerId") ActivityNotificationJobResponseDtoProviderId providerId,
            @JsonProperty("status") String status,
            @JsonProperty("step") ActivityNotificationStepResponseDto step,
            @JsonProperty("type") String type) {
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(digest, "digest");
        Utils.checkNotNull(executionDetails, "executionDetails");
        Utils.checkNotNull(payload, "payload");
        Utils.checkNotNull(providerId, "providerId");
        Utils.checkNotNull(status, "status");
        Utils.checkNotNull(step, "step");
        Utils.checkNotNull(type, "type");
        this.id = id;
        this.digest = digest;
        this.executionDetails = executionDetails;
        this.payload = payload;
        this.providerId = providerId;
        this.status = status;
        this.step = step;
        this.type = type;
    }
    
    public ActivityNotificationJobResponseDto(
            String id,
            java.util.List<ActivityNotificationExecutionDetailResponseDto> executionDetails,
            ActivityNotificationJobResponseDtoProviderId providerId,
            String status,
            ActivityNotificationStepResponseDto step,
            String type) {
        this(id, Optional.empty(), executionDetails, Optional.empty(), providerId, status, step, type);
    }

    @JsonIgnore
    public String id() {
        return id;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Digest> digest() {
        return (Optional<Digest>) digest;
    }

    @JsonIgnore
    public java.util.List<ActivityNotificationExecutionDetailResponseDto> executionDetails() {
        return executionDetails;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Payload> payload() {
        return (Optional<Payload>) payload;
    }

    @JsonIgnore
    public ActivityNotificationJobResponseDtoProviderId providerId() {
        return providerId;
    }

    @JsonIgnore
    public String status() {
        return status;
    }

    @JsonIgnore
    public ActivityNotificationStepResponseDto step() {
        return step;
    }

    @JsonIgnore
    public String type() {
        return type;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public ActivityNotificationJobResponseDto withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    public ActivityNotificationJobResponseDto withDigest(Digest digest) {
        Utils.checkNotNull(digest, "digest");
        this.digest = Optional.ofNullable(digest);
        return this;
    }

    public ActivityNotificationJobResponseDto withDigest(Optional<? extends Digest> digest) {
        Utils.checkNotNull(digest, "digest");
        this.digest = digest;
        return this;
    }

    public ActivityNotificationJobResponseDto withExecutionDetails(java.util.List<ActivityNotificationExecutionDetailResponseDto> executionDetails) {
        Utils.checkNotNull(executionDetails, "executionDetails");
        this.executionDetails = executionDetails;
        return this;
    }

    public ActivityNotificationJobResponseDto withPayload(Payload payload) {
        Utils.checkNotNull(payload, "payload");
        this.payload = Optional.ofNullable(payload);
        return this;
    }

    public ActivityNotificationJobResponseDto withPayload(Optional<? extends Payload> payload) {
        Utils.checkNotNull(payload, "payload");
        this.payload = payload;
        return this;
    }

    public ActivityNotificationJobResponseDto withProviderId(ActivityNotificationJobResponseDtoProviderId providerId) {
        Utils.checkNotNull(providerId, "providerId");
        this.providerId = providerId;
        return this;
    }

    public ActivityNotificationJobResponseDto withStatus(String status) {
        Utils.checkNotNull(status, "status");
        this.status = status;
        return this;
    }

    public ActivityNotificationJobResponseDto withStep(ActivityNotificationStepResponseDto step) {
        Utils.checkNotNull(step, "step");
        this.step = step;
        return this;
    }

    public ActivityNotificationJobResponseDto withType(String type) {
        Utils.checkNotNull(type, "type");
        this.type = type;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ActivityNotificationJobResponseDto other = (ActivityNotificationJobResponseDto) o;
        return 
            java.util.Objects.deepEquals(this.id, other.id) &&
            java.util.Objects.deepEquals(this.digest, other.digest) &&
            java.util.Objects.deepEquals(this.executionDetails, other.executionDetails) &&
            java.util.Objects.deepEquals(this.payload, other.payload) &&
            java.util.Objects.deepEquals(this.providerId, other.providerId) &&
            java.util.Objects.deepEquals(this.status, other.status) &&
            java.util.Objects.deepEquals(this.step, other.step) &&
            java.util.Objects.deepEquals(this.type, other.type);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            id,
            digest,
            executionDetails,
            payload,
            providerId,
            status,
            step,
            type);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ActivityNotificationJobResponseDto.class,
                "id", id,
                "digest", digest,
                "executionDetails", executionDetails,
                "payload", payload,
                "providerId", providerId,
                "status", status,
                "step", step,
                "type", type);
    }
    
    public final static class Builder {
 
        private String id;
 
        private Optional<? extends Digest> digest = Optional.empty();
 
        private java.util.List<ActivityNotificationExecutionDetailResponseDto> executionDetails;
 
        private Optional<? extends Payload> payload = Optional.empty();
 
        private ActivityNotificationJobResponseDtoProviderId providerId;
 
        private String status;
 
        private ActivityNotificationStepResponseDto step;
 
        private String type;  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        public Builder digest(Digest digest) {
            Utils.checkNotNull(digest, "digest");
            this.digest = Optional.ofNullable(digest);
            return this;
        }

        public Builder digest(Optional<? extends Digest> digest) {
            Utils.checkNotNull(digest, "digest");
            this.digest = digest;
            return this;
        }

        public Builder executionDetails(java.util.List<ActivityNotificationExecutionDetailResponseDto> executionDetails) {
            Utils.checkNotNull(executionDetails, "executionDetails");
            this.executionDetails = executionDetails;
            return this;
        }

        public Builder payload(Payload payload) {
            Utils.checkNotNull(payload, "payload");
            this.payload = Optional.ofNullable(payload);
            return this;
        }

        public Builder payload(Optional<? extends Payload> payload) {
            Utils.checkNotNull(payload, "payload");
            this.payload = payload;
            return this;
        }

        public Builder providerId(ActivityNotificationJobResponseDtoProviderId providerId) {
            Utils.checkNotNull(providerId, "providerId");
            this.providerId = providerId;
            return this;
        }

        public Builder status(String status) {
            Utils.checkNotNull(status, "status");
            this.status = status;
            return this;
        }

        public Builder step(ActivityNotificationStepResponseDto step) {
            Utils.checkNotNull(step, "step");
            this.step = step;
            return this;
        }

        public Builder type(String type) {
            Utils.checkNotNull(type, "type");
            this.type = type;
            return this;
        }
        
        public ActivityNotificationJobResponseDto build() {
            return new ActivityNotificationJobResponseDto(
                id,
                digest,
                executionDetails,
                payload,
                providerId,
                status,
                step,
                type);
        }
    }
}

