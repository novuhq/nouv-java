/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package co.novu.co.novu.sdk.models.components;

import co.novu.co.novu.sdk.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;

public class MarkMessageActionAsSeenDto {

    /**
     * Message action payload
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("payload")
    private Optional<? extends MarkMessageActionAsSeenDtoPayload> payload;

    /**
     * Message action status
     */
    @JsonProperty("status")
    private MarkMessageActionAsSeenDtoStatus status;

    @JsonCreator
    public MarkMessageActionAsSeenDto(
            @JsonProperty("payload") Optional<? extends MarkMessageActionAsSeenDtoPayload> payload,
            @JsonProperty("status") MarkMessageActionAsSeenDtoStatus status) {
        Utils.checkNotNull(payload, "payload");
        Utils.checkNotNull(status, "status");
        this.payload = payload;
        this.status = status;
    }
    
    public MarkMessageActionAsSeenDto(
            MarkMessageActionAsSeenDtoStatus status) {
        this(Optional.empty(), status);
    }

    /**
     * Message action payload
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<MarkMessageActionAsSeenDtoPayload> payload() {
        return (Optional<MarkMessageActionAsSeenDtoPayload>) payload;
    }

    /**
     * Message action status
     */
    @JsonIgnore
    public MarkMessageActionAsSeenDtoStatus status() {
        return status;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Message action payload
     */
    public MarkMessageActionAsSeenDto withPayload(MarkMessageActionAsSeenDtoPayload payload) {
        Utils.checkNotNull(payload, "payload");
        this.payload = Optional.ofNullable(payload);
        return this;
    }

    /**
     * Message action payload
     */
    public MarkMessageActionAsSeenDto withPayload(Optional<? extends MarkMessageActionAsSeenDtoPayload> payload) {
        Utils.checkNotNull(payload, "payload");
        this.payload = payload;
        return this;
    }

    /**
     * Message action status
     */
    public MarkMessageActionAsSeenDto withStatus(MarkMessageActionAsSeenDtoStatus status) {
        Utils.checkNotNull(status, "status");
        this.status = status;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        MarkMessageActionAsSeenDto other = (MarkMessageActionAsSeenDto) o;
        return 
            java.util.Objects.deepEquals(this.payload, other.payload) &&
            java.util.Objects.deepEquals(this.status, other.status);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            payload,
            status);
    }
    
    @Override
    public String toString() {
        return Utils.toString(MarkMessageActionAsSeenDto.class,
                "payload", payload,
                "status", status);
    }
    
    public final static class Builder {
 
        private Optional<? extends MarkMessageActionAsSeenDtoPayload> payload = Optional.empty();
 
        private MarkMessageActionAsSeenDtoStatus status;  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Message action payload
         */
        public Builder payload(MarkMessageActionAsSeenDtoPayload payload) {
            Utils.checkNotNull(payload, "payload");
            this.payload = Optional.ofNullable(payload);
            return this;
        }

        /**
         * Message action payload
         */
        public Builder payload(Optional<? extends MarkMessageActionAsSeenDtoPayload> payload) {
            Utils.checkNotNull(payload, "payload");
            this.payload = payload;
            return this;
        }

        /**
         * Message action status
         */
        public Builder status(MarkMessageActionAsSeenDtoStatus status) {
            Utils.checkNotNull(status, "status");
            this.status = status;
            return this;
        }
        
        public MarkMessageActionAsSeenDto build() {
            return new MarkMessageActionAsSeenDto(
                payload,
                status);
        }
    }
}

