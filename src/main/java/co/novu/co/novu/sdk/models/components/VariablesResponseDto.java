/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package co.novu.co.novu.sdk.models.components;

import co.novu.co.novu.sdk.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;

public class VariablesResponseDto {

    @JsonProperty("system")
    private System system;

    @JsonProperty("translations")
    private Translations translations;

    @JsonCreator
    public VariablesResponseDto(
            @JsonProperty("system") System system,
            @JsonProperty("translations") Translations translations) {
        Utils.checkNotNull(system, "system");
        Utils.checkNotNull(translations, "translations");
        this.system = system;
        this.translations = translations;
    }

    @JsonIgnore
    public System system() {
        return system;
    }

    @JsonIgnore
    public Translations translations() {
        return translations;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public VariablesResponseDto withSystem(System system) {
        Utils.checkNotNull(system, "system");
        this.system = system;
        return this;
    }

    public VariablesResponseDto withTranslations(Translations translations) {
        Utils.checkNotNull(translations, "translations");
        this.translations = translations;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        VariablesResponseDto other = (VariablesResponseDto) o;
        return 
            java.util.Objects.deepEquals(this.system, other.system) &&
            java.util.Objects.deepEquals(this.translations, other.translations);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            system,
            translations);
    }
    
    @Override
    public String toString() {
        return Utils.toString(VariablesResponseDto.class,
                "system", system,
                "translations", translations);
    }
    
    public final static class Builder {
 
        private System system;
 
        private Translations translations;  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder system(System system) {
            Utils.checkNotNull(system, "system");
            this.system = system;
            return this;
        }

        public Builder translations(Translations translations) {
            Utils.checkNotNull(translations, "translations");
            this.translations = translations;
            return this;
        }
        
        public VariablesResponseDto build() {
            return new VariablesResponseDto(
                system,
                translations);
        }
    }
}

