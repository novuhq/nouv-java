/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package co.novu.co.novu.sdk.models.components;

import co.novu.co.novu.sdk.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;

public class TopicPayloadDto {

    @JsonProperty("topicKey")
    private String topicKey;

    @JsonProperty("type")
    private TopicPayloadDtoType type;

    @JsonCreator
    public TopicPayloadDto(
            @JsonProperty("topicKey") String topicKey,
            @JsonProperty("type") TopicPayloadDtoType type) {
        Utils.checkNotNull(topicKey, "topicKey");
        Utils.checkNotNull(type, "type");
        this.topicKey = topicKey;
        this.type = type;
    }

    @JsonIgnore
    public String topicKey() {
        return topicKey;
    }

    @JsonIgnore
    public TopicPayloadDtoType type() {
        return type;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public TopicPayloadDto withTopicKey(String topicKey) {
        Utils.checkNotNull(topicKey, "topicKey");
        this.topicKey = topicKey;
        return this;
    }

    public TopicPayloadDto withType(TopicPayloadDtoType type) {
        Utils.checkNotNull(type, "type");
        this.type = type;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        TopicPayloadDto other = (TopicPayloadDto) o;
        return 
            java.util.Objects.deepEquals(this.topicKey, other.topicKey) &&
            java.util.Objects.deepEquals(this.type, other.type);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            topicKey,
            type);
    }
    
    @Override
    public String toString() {
        return Utils.toString(TopicPayloadDto.class,
                "topicKey", topicKey,
                "type", type);
    }
    
    public final static class Builder {
 
        private String topicKey;
 
        private TopicPayloadDtoType type;  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder topicKey(String topicKey) {
            Utils.checkNotNull(topicKey, "topicKey");
            this.topicKey = topicKey;
            return this;
        }

        public Builder type(TopicPayloadDtoType type) {
            Utils.checkNotNull(type, "type");
            this.type = type;
            return this;
        }
        
        public TopicPayloadDto build() {
            return new TopicPayloadDto(
                topicKey,
                type);
        }
    }
}

