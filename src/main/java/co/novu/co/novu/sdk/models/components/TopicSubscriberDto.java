/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package co.novu.co.novu.sdk.models.components;

import co.novu.co.novu.sdk.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;

public class TopicSubscriberDto {

    @JsonProperty("_environmentId")
    private String environmentId;

    @JsonProperty("_organizationId")
    private String organizationId;

    @JsonProperty("_subscriberId")
    private String subscriberId;

    @JsonProperty("_topicId")
    private String topicId;

    @JsonProperty("externalSubscriberId")
    private String externalSubscriberId;

    @JsonProperty("topicKey")
    private String topicKey;

    @JsonCreator
    public TopicSubscriberDto(
            @JsonProperty("_environmentId") String environmentId,
            @JsonProperty("_organizationId") String organizationId,
            @JsonProperty("_subscriberId") String subscriberId,
            @JsonProperty("_topicId") String topicId,
            @JsonProperty("externalSubscriberId") String externalSubscriberId,
            @JsonProperty("topicKey") String topicKey) {
        Utils.checkNotNull(environmentId, "environmentId");
        Utils.checkNotNull(organizationId, "organizationId");
        Utils.checkNotNull(subscriberId, "subscriberId");
        Utils.checkNotNull(topicId, "topicId");
        Utils.checkNotNull(externalSubscriberId, "externalSubscriberId");
        Utils.checkNotNull(topicKey, "topicKey");
        this.environmentId = environmentId;
        this.organizationId = organizationId;
        this.subscriberId = subscriberId;
        this.topicId = topicId;
        this.externalSubscriberId = externalSubscriberId;
        this.topicKey = topicKey;
    }

    @JsonIgnore
    public String environmentId() {
        return environmentId;
    }

    @JsonIgnore
    public String organizationId() {
        return organizationId;
    }

    @JsonIgnore
    public String subscriberId() {
        return subscriberId;
    }

    @JsonIgnore
    public String topicId() {
        return topicId;
    }

    @JsonIgnore
    public String externalSubscriberId() {
        return externalSubscriberId;
    }

    @JsonIgnore
    public String topicKey() {
        return topicKey;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public TopicSubscriberDto withEnvironmentId(String environmentId) {
        Utils.checkNotNull(environmentId, "environmentId");
        this.environmentId = environmentId;
        return this;
    }

    public TopicSubscriberDto withOrganizationId(String organizationId) {
        Utils.checkNotNull(organizationId, "organizationId");
        this.organizationId = organizationId;
        return this;
    }

    public TopicSubscriberDto withSubscriberId(String subscriberId) {
        Utils.checkNotNull(subscriberId, "subscriberId");
        this.subscriberId = subscriberId;
        return this;
    }

    public TopicSubscriberDto withTopicId(String topicId) {
        Utils.checkNotNull(topicId, "topicId");
        this.topicId = topicId;
        return this;
    }

    public TopicSubscriberDto withExternalSubscriberId(String externalSubscriberId) {
        Utils.checkNotNull(externalSubscriberId, "externalSubscriberId");
        this.externalSubscriberId = externalSubscriberId;
        return this;
    }

    public TopicSubscriberDto withTopicKey(String topicKey) {
        Utils.checkNotNull(topicKey, "topicKey");
        this.topicKey = topicKey;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        TopicSubscriberDto other = (TopicSubscriberDto) o;
        return 
            java.util.Objects.deepEquals(this.environmentId, other.environmentId) &&
            java.util.Objects.deepEquals(this.organizationId, other.organizationId) &&
            java.util.Objects.deepEquals(this.subscriberId, other.subscriberId) &&
            java.util.Objects.deepEquals(this.topicId, other.topicId) &&
            java.util.Objects.deepEquals(this.externalSubscriberId, other.externalSubscriberId) &&
            java.util.Objects.deepEquals(this.topicKey, other.topicKey);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            environmentId,
            organizationId,
            subscriberId,
            topicId,
            externalSubscriberId,
            topicKey);
    }
    
    @Override
    public String toString() {
        return Utils.toString(TopicSubscriberDto.class,
                "environmentId", environmentId,
                "organizationId", organizationId,
                "subscriberId", subscriberId,
                "topicId", topicId,
                "externalSubscriberId", externalSubscriberId,
                "topicKey", topicKey);
    }
    
    public final static class Builder {
 
        private String environmentId;
 
        private String organizationId;
 
        private String subscriberId;
 
        private String topicId;
 
        private String externalSubscriberId;
 
        private String topicKey;  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder environmentId(String environmentId) {
            Utils.checkNotNull(environmentId, "environmentId");
            this.environmentId = environmentId;
            return this;
        }

        public Builder organizationId(String organizationId) {
            Utils.checkNotNull(organizationId, "organizationId");
            this.organizationId = organizationId;
            return this;
        }

        public Builder subscriberId(String subscriberId) {
            Utils.checkNotNull(subscriberId, "subscriberId");
            this.subscriberId = subscriberId;
            return this;
        }

        public Builder topicId(String topicId) {
            Utils.checkNotNull(topicId, "topicId");
            this.topicId = topicId;
            return this;
        }

        public Builder externalSubscriberId(String externalSubscriberId) {
            Utils.checkNotNull(externalSubscriberId, "externalSubscriberId");
            this.externalSubscriberId = externalSubscriberId;
            return this;
        }

        public Builder topicKey(String topicKey) {
            Utils.checkNotNull(topicKey, "topicKey");
            this.topicKey = topicKey;
            return this;
        }
        
        public TopicSubscriberDto build() {
            return new TopicSubscriberDto(
                environmentId,
                organizationId,
                subscriberId,
                topicId,
                externalSubscriberId,
                topicKey);
        }
    }
}

