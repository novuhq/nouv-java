/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package co.novu.co.novu.sdk.models.components;

import co.novu.co.novu.sdk.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;

public class TriggerEventResponseDto {

    /**
     * If trigger was acknowledged or not
     */
    @JsonProperty("acknowledged")
    private boolean acknowledged;

    /**
     * In case of an error, this field will contain the error message
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("error")
    private Optional<? extends java.util.List<String>> error;

    /**
     * Status for trigger
     */
    @JsonProperty("status")
    private TriggerEventResponseDtoStatus status;

    /**
     * Transaction id for trigger
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("transactionId")
    private Optional<? extends String> transactionId;

    @JsonCreator
    public TriggerEventResponseDto(
            @JsonProperty("acknowledged") boolean acknowledged,
            @JsonProperty("error") Optional<? extends java.util.List<String>> error,
            @JsonProperty("status") TriggerEventResponseDtoStatus status,
            @JsonProperty("transactionId") Optional<? extends String> transactionId) {
        Utils.checkNotNull(acknowledged, "acknowledged");
        Utils.checkNotNull(error, "error");
        Utils.checkNotNull(status, "status");
        Utils.checkNotNull(transactionId, "transactionId");
        this.acknowledged = acknowledged;
        this.error = error;
        this.status = status;
        this.transactionId = transactionId;
    }
    
    public TriggerEventResponseDto(
            boolean acknowledged,
            TriggerEventResponseDtoStatus status) {
        this(acknowledged, Optional.empty(), status, Optional.empty());
    }

    /**
     * If trigger was acknowledged or not
     */
    @JsonIgnore
    public boolean acknowledged() {
        return acknowledged;
    }

    /**
     * In case of an error, this field will contain the error message
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<java.util.List<String>> error() {
        return (Optional<java.util.List<String>>) error;
    }

    /**
     * Status for trigger
     */
    @JsonIgnore
    public TriggerEventResponseDtoStatus status() {
        return status;
    }

    /**
     * Transaction id for trigger
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> transactionId() {
        return (Optional<String>) transactionId;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * If trigger was acknowledged or not
     */
    public TriggerEventResponseDto withAcknowledged(boolean acknowledged) {
        Utils.checkNotNull(acknowledged, "acknowledged");
        this.acknowledged = acknowledged;
        return this;
    }

    /**
     * In case of an error, this field will contain the error message
     */
    public TriggerEventResponseDto withError(java.util.List<String> error) {
        Utils.checkNotNull(error, "error");
        this.error = Optional.ofNullable(error);
        return this;
    }

    /**
     * In case of an error, this field will contain the error message
     */
    public TriggerEventResponseDto withError(Optional<? extends java.util.List<String>> error) {
        Utils.checkNotNull(error, "error");
        this.error = error;
        return this;
    }

    /**
     * Status for trigger
     */
    public TriggerEventResponseDto withStatus(TriggerEventResponseDtoStatus status) {
        Utils.checkNotNull(status, "status");
        this.status = status;
        return this;
    }

    /**
     * Transaction id for trigger
     */
    public TriggerEventResponseDto withTransactionId(String transactionId) {
        Utils.checkNotNull(transactionId, "transactionId");
        this.transactionId = Optional.ofNullable(transactionId);
        return this;
    }

    /**
     * Transaction id for trigger
     */
    public TriggerEventResponseDto withTransactionId(Optional<? extends String> transactionId) {
        Utils.checkNotNull(transactionId, "transactionId");
        this.transactionId = transactionId;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        TriggerEventResponseDto other = (TriggerEventResponseDto) o;
        return 
            java.util.Objects.deepEquals(this.acknowledged, other.acknowledged) &&
            java.util.Objects.deepEquals(this.error, other.error) &&
            java.util.Objects.deepEquals(this.status, other.status) &&
            java.util.Objects.deepEquals(this.transactionId, other.transactionId);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            acknowledged,
            error,
            status,
            transactionId);
    }
    
    @Override
    public String toString() {
        return Utils.toString(TriggerEventResponseDto.class,
                "acknowledged", acknowledged,
                "error", error,
                "status", status,
                "transactionId", transactionId);
    }
    
    public final static class Builder {
 
        private Boolean acknowledged;
 
        private Optional<? extends java.util.List<String>> error = Optional.empty();
 
        private TriggerEventResponseDtoStatus status;
 
        private Optional<? extends String> transactionId = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * If trigger was acknowledged or not
         */
        public Builder acknowledged(boolean acknowledged) {
            Utils.checkNotNull(acknowledged, "acknowledged");
            this.acknowledged = acknowledged;
            return this;
        }

        /**
         * In case of an error, this field will contain the error message
         */
        public Builder error(java.util.List<String> error) {
            Utils.checkNotNull(error, "error");
            this.error = Optional.ofNullable(error);
            return this;
        }

        /**
         * In case of an error, this field will contain the error message
         */
        public Builder error(Optional<? extends java.util.List<String>> error) {
            Utils.checkNotNull(error, "error");
            this.error = error;
            return this;
        }

        /**
         * Status for trigger
         */
        public Builder status(TriggerEventResponseDtoStatus status) {
            Utils.checkNotNull(status, "status");
            this.status = status;
            return this;
        }

        /**
         * Transaction id for trigger
         */
        public Builder transactionId(String transactionId) {
            Utils.checkNotNull(transactionId, "transactionId");
            this.transactionId = Optional.ofNullable(transactionId);
            return this;
        }

        /**
         * Transaction id for trigger
         */
        public Builder transactionId(Optional<? extends String> transactionId) {
            Utils.checkNotNull(transactionId, "transactionId");
            this.transactionId = transactionId;
            return this;
        }
        
        public TriggerEventResponseDto build() {
            return new TriggerEventResponseDto(
                acknowledged,
                error,
                status,
                transactionId);
        }
    }
}

