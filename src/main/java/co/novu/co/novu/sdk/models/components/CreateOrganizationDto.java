/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package co.novu.co.novu.sdk.models.components;

import co.novu.co.novu.sdk.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;

public class CreateOrganizationDto {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("domain")
    private Optional<? extends String> domain;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("jobTitle")
    private Optional<? extends JobTitle> jobTitle;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("logo")
    private Optional<? extends String> logo;

    @JsonProperty("name")
    private String name;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("productUseCases")
    private Optional<? extends ProductUseCases> productUseCases;

    @JsonCreator
    public CreateOrganizationDto(
            @JsonProperty("domain") Optional<? extends String> domain,
            @JsonProperty("jobTitle") Optional<? extends JobTitle> jobTitle,
            @JsonProperty("logo") Optional<? extends String> logo,
            @JsonProperty("name") String name,
            @JsonProperty("productUseCases") Optional<? extends ProductUseCases> productUseCases) {
        Utils.checkNotNull(domain, "domain");
        Utils.checkNotNull(jobTitle, "jobTitle");
        Utils.checkNotNull(logo, "logo");
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(productUseCases, "productUseCases");
        this.domain = domain;
        this.jobTitle = jobTitle;
        this.logo = logo;
        this.name = name;
        this.productUseCases = productUseCases;
    }
    
    public CreateOrganizationDto(
            String name) {
        this(Optional.empty(), Optional.empty(), Optional.empty(), name, Optional.empty());
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> domain() {
        return (Optional<String>) domain;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<JobTitle> jobTitle() {
        return (Optional<JobTitle>) jobTitle;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> logo() {
        return (Optional<String>) logo;
    }

    @JsonIgnore
    public String name() {
        return name;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<ProductUseCases> productUseCases() {
        return (Optional<ProductUseCases>) productUseCases;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public CreateOrganizationDto withDomain(String domain) {
        Utils.checkNotNull(domain, "domain");
        this.domain = Optional.ofNullable(domain);
        return this;
    }

    public CreateOrganizationDto withDomain(Optional<? extends String> domain) {
        Utils.checkNotNull(domain, "domain");
        this.domain = domain;
        return this;
    }

    public CreateOrganizationDto withJobTitle(JobTitle jobTitle) {
        Utils.checkNotNull(jobTitle, "jobTitle");
        this.jobTitle = Optional.ofNullable(jobTitle);
        return this;
    }

    public CreateOrganizationDto withJobTitle(Optional<? extends JobTitle> jobTitle) {
        Utils.checkNotNull(jobTitle, "jobTitle");
        this.jobTitle = jobTitle;
        return this;
    }

    public CreateOrganizationDto withLogo(String logo) {
        Utils.checkNotNull(logo, "logo");
        this.logo = Optional.ofNullable(logo);
        return this;
    }

    public CreateOrganizationDto withLogo(Optional<? extends String> logo) {
        Utils.checkNotNull(logo, "logo");
        this.logo = logo;
        return this;
    }

    public CreateOrganizationDto withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    public CreateOrganizationDto withProductUseCases(ProductUseCases productUseCases) {
        Utils.checkNotNull(productUseCases, "productUseCases");
        this.productUseCases = Optional.ofNullable(productUseCases);
        return this;
    }

    public CreateOrganizationDto withProductUseCases(Optional<? extends ProductUseCases> productUseCases) {
        Utils.checkNotNull(productUseCases, "productUseCases");
        this.productUseCases = productUseCases;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CreateOrganizationDto other = (CreateOrganizationDto) o;
        return 
            java.util.Objects.deepEquals(this.domain, other.domain) &&
            java.util.Objects.deepEquals(this.jobTitle, other.jobTitle) &&
            java.util.Objects.deepEquals(this.logo, other.logo) &&
            java.util.Objects.deepEquals(this.name, other.name) &&
            java.util.Objects.deepEquals(this.productUseCases, other.productUseCases);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            domain,
            jobTitle,
            logo,
            name,
            productUseCases);
    }
    
    @Override
    public String toString() {
        return Utils.toString(CreateOrganizationDto.class,
                "domain", domain,
                "jobTitle", jobTitle,
                "logo", logo,
                "name", name,
                "productUseCases", productUseCases);
    }
    
    public final static class Builder {
 
        private Optional<? extends String> domain = Optional.empty();
 
        private Optional<? extends JobTitle> jobTitle = Optional.empty();
 
        private Optional<? extends String> logo = Optional.empty();
 
        private String name;
 
        private Optional<? extends ProductUseCases> productUseCases = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder domain(String domain) {
            Utils.checkNotNull(domain, "domain");
            this.domain = Optional.ofNullable(domain);
            return this;
        }

        public Builder domain(Optional<? extends String> domain) {
            Utils.checkNotNull(domain, "domain");
            this.domain = domain;
            return this;
        }

        public Builder jobTitle(JobTitle jobTitle) {
            Utils.checkNotNull(jobTitle, "jobTitle");
            this.jobTitle = Optional.ofNullable(jobTitle);
            return this;
        }

        public Builder jobTitle(Optional<? extends JobTitle> jobTitle) {
            Utils.checkNotNull(jobTitle, "jobTitle");
            this.jobTitle = jobTitle;
            return this;
        }

        public Builder logo(String logo) {
            Utils.checkNotNull(logo, "logo");
            this.logo = Optional.ofNullable(logo);
            return this;
        }

        public Builder logo(Optional<? extends String> logo) {
            Utils.checkNotNull(logo, "logo");
            this.logo = logo;
            return this;
        }

        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }

        public Builder productUseCases(ProductUseCases productUseCases) {
            Utils.checkNotNull(productUseCases, "productUseCases");
            this.productUseCases = Optional.ofNullable(productUseCases);
            return this;
        }

        public Builder productUseCases(Optional<? extends ProductUseCases> productUseCases) {
            Utils.checkNotNull(productUseCases, "productUseCases");
            this.productUseCases = productUseCases;
            return this;
        }
        
        public CreateOrganizationDto build() {
            return new CreateOrganizationDto(
                domain,
                jobTitle,
                logo,
                name,
                productUseCases);
        }
    }
}

