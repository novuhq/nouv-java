/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package co.novu.co.novu.sdk.models.components;

import co.novu.co.novu.sdk.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;

public class UpdateSubscriberRequestDto {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("avatar")
    private Optional<? extends String> avatar;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("data")
    private Optional<? extends UpdateSubscriberRequestDtoData> data;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("email")
    private Optional<? extends String> email;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("firstName")
    private Optional<? extends String> firstName;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("lastName")
    private Optional<? extends String> lastName;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("locale")
    private Optional<? extends String> locale;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("phone")
    private Optional<? extends String> phone;

    @JsonCreator
    public UpdateSubscriberRequestDto(
            @JsonProperty("avatar") Optional<? extends String> avatar,
            @JsonProperty("data") Optional<? extends UpdateSubscriberRequestDtoData> data,
            @JsonProperty("email") Optional<? extends String> email,
            @JsonProperty("firstName") Optional<? extends String> firstName,
            @JsonProperty("lastName") Optional<? extends String> lastName,
            @JsonProperty("locale") Optional<? extends String> locale,
            @JsonProperty("phone") Optional<? extends String> phone) {
        Utils.checkNotNull(avatar, "avatar");
        Utils.checkNotNull(data, "data");
        Utils.checkNotNull(email, "email");
        Utils.checkNotNull(firstName, "firstName");
        Utils.checkNotNull(lastName, "lastName");
        Utils.checkNotNull(locale, "locale");
        Utils.checkNotNull(phone, "phone");
        this.avatar = avatar;
        this.data = data;
        this.email = email;
        this.firstName = firstName;
        this.lastName = lastName;
        this.locale = locale;
        this.phone = phone;
    }
    
    public UpdateSubscriberRequestDto() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> avatar() {
        return (Optional<String>) avatar;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<UpdateSubscriberRequestDtoData> data() {
        return (Optional<UpdateSubscriberRequestDtoData>) data;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> email() {
        return (Optional<String>) email;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> firstName() {
        return (Optional<String>) firstName;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> lastName() {
        return (Optional<String>) lastName;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> locale() {
        return (Optional<String>) locale;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> phone() {
        return (Optional<String>) phone;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public UpdateSubscriberRequestDto withAvatar(String avatar) {
        Utils.checkNotNull(avatar, "avatar");
        this.avatar = Optional.ofNullable(avatar);
        return this;
    }

    public UpdateSubscriberRequestDto withAvatar(Optional<? extends String> avatar) {
        Utils.checkNotNull(avatar, "avatar");
        this.avatar = avatar;
        return this;
    }

    public UpdateSubscriberRequestDto withData(UpdateSubscriberRequestDtoData data) {
        Utils.checkNotNull(data, "data");
        this.data = Optional.ofNullable(data);
        return this;
    }

    public UpdateSubscriberRequestDto withData(Optional<? extends UpdateSubscriberRequestDtoData> data) {
        Utils.checkNotNull(data, "data");
        this.data = data;
        return this;
    }

    public UpdateSubscriberRequestDto withEmail(String email) {
        Utils.checkNotNull(email, "email");
        this.email = Optional.ofNullable(email);
        return this;
    }

    public UpdateSubscriberRequestDto withEmail(Optional<? extends String> email) {
        Utils.checkNotNull(email, "email");
        this.email = email;
        return this;
    }

    public UpdateSubscriberRequestDto withFirstName(String firstName) {
        Utils.checkNotNull(firstName, "firstName");
        this.firstName = Optional.ofNullable(firstName);
        return this;
    }

    public UpdateSubscriberRequestDto withFirstName(Optional<? extends String> firstName) {
        Utils.checkNotNull(firstName, "firstName");
        this.firstName = firstName;
        return this;
    }

    public UpdateSubscriberRequestDto withLastName(String lastName) {
        Utils.checkNotNull(lastName, "lastName");
        this.lastName = Optional.ofNullable(lastName);
        return this;
    }

    public UpdateSubscriberRequestDto withLastName(Optional<? extends String> lastName) {
        Utils.checkNotNull(lastName, "lastName");
        this.lastName = lastName;
        return this;
    }

    public UpdateSubscriberRequestDto withLocale(String locale) {
        Utils.checkNotNull(locale, "locale");
        this.locale = Optional.ofNullable(locale);
        return this;
    }

    public UpdateSubscriberRequestDto withLocale(Optional<? extends String> locale) {
        Utils.checkNotNull(locale, "locale");
        this.locale = locale;
        return this;
    }

    public UpdateSubscriberRequestDto withPhone(String phone) {
        Utils.checkNotNull(phone, "phone");
        this.phone = Optional.ofNullable(phone);
        return this;
    }

    public UpdateSubscriberRequestDto withPhone(Optional<? extends String> phone) {
        Utils.checkNotNull(phone, "phone");
        this.phone = phone;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        UpdateSubscriberRequestDto other = (UpdateSubscriberRequestDto) o;
        return 
            java.util.Objects.deepEquals(this.avatar, other.avatar) &&
            java.util.Objects.deepEquals(this.data, other.data) &&
            java.util.Objects.deepEquals(this.email, other.email) &&
            java.util.Objects.deepEquals(this.firstName, other.firstName) &&
            java.util.Objects.deepEquals(this.lastName, other.lastName) &&
            java.util.Objects.deepEquals(this.locale, other.locale) &&
            java.util.Objects.deepEquals(this.phone, other.phone);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            avatar,
            data,
            email,
            firstName,
            lastName,
            locale,
            phone);
    }
    
    @Override
    public String toString() {
        return Utils.toString(UpdateSubscriberRequestDto.class,
                "avatar", avatar,
                "data", data,
                "email", email,
                "firstName", firstName,
                "lastName", lastName,
                "locale", locale,
                "phone", phone);
    }
    
    public final static class Builder {
 
        private Optional<? extends String> avatar = Optional.empty();
 
        private Optional<? extends UpdateSubscriberRequestDtoData> data = Optional.empty();
 
        private Optional<? extends String> email = Optional.empty();
 
        private Optional<? extends String> firstName = Optional.empty();
 
        private Optional<? extends String> lastName = Optional.empty();
 
        private Optional<? extends String> locale = Optional.empty();
 
        private Optional<? extends String> phone = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder avatar(String avatar) {
            Utils.checkNotNull(avatar, "avatar");
            this.avatar = Optional.ofNullable(avatar);
            return this;
        }

        public Builder avatar(Optional<? extends String> avatar) {
            Utils.checkNotNull(avatar, "avatar");
            this.avatar = avatar;
            return this;
        }

        public Builder data(UpdateSubscriberRequestDtoData data) {
            Utils.checkNotNull(data, "data");
            this.data = Optional.ofNullable(data);
            return this;
        }

        public Builder data(Optional<? extends UpdateSubscriberRequestDtoData> data) {
            Utils.checkNotNull(data, "data");
            this.data = data;
            return this;
        }

        public Builder email(String email) {
            Utils.checkNotNull(email, "email");
            this.email = Optional.ofNullable(email);
            return this;
        }

        public Builder email(Optional<? extends String> email) {
            Utils.checkNotNull(email, "email");
            this.email = email;
            return this;
        }

        public Builder firstName(String firstName) {
            Utils.checkNotNull(firstName, "firstName");
            this.firstName = Optional.ofNullable(firstName);
            return this;
        }

        public Builder firstName(Optional<? extends String> firstName) {
            Utils.checkNotNull(firstName, "firstName");
            this.firstName = firstName;
            return this;
        }

        public Builder lastName(String lastName) {
            Utils.checkNotNull(lastName, "lastName");
            this.lastName = Optional.ofNullable(lastName);
            return this;
        }

        public Builder lastName(Optional<? extends String> lastName) {
            Utils.checkNotNull(lastName, "lastName");
            this.lastName = lastName;
            return this;
        }

        public Builder locale(String locale) {
            Utils.checkNotNull(locale, "locale");
            this.locale = Optional.ofNullable(locale);
            return this;
        }

        public Builder locale(Optional<? extends String> locale) {
            Utils.checkNotNull(locale, "locale");
            this.locale = locale;
            return this;
        }

        public Builder phone(String phone) {
            Utils.checkNotNull(phone, "phone");
            this.phone = Optional.ofNullable(phone);
            return this;
        }

        public Builder phone(Optional<? extends String> phone) {
            Utils.checkNotNull(phone, "phone");
            this.phone = phone;
            return this;
        }
        
        public UpdateSubscriberRequestDto build() {
            return new UpdateSubscriberRequestDto(
                avatar,
                data,
                email,
                firstName,
                lastName,
                locale,
                phone);
        }
    }
}

