/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package co.novu.co.novu.sdk.models.operations;

import co.novu.co.novu.sdk.utils.SpeakeasyMetadata;
import co.novu.co.novu.sdk.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;

public class SubscribersControllerChatAccessOauthRequest {

    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=subscriberId")
    private String subscriberId;

    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=providerId")
    private String providerId;

    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=hmacHash")
    private String hmacHash;

    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=environmentId")
    private String environmentId;

    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=integrationIdentifier")
    private Optional<? extends String> integrationIdentifier;

    @JsonCreator
    public SubscribersControllerChatAccessOauthRequest(
            String subscriberId,
            String providerId,
            String hmacHash,
            String environmentId,
            Optional<? extends String> integrationIdentifier) {
        Utils.checkNotNull(subscriberId, "subscriberId");
        Utils.checkNotNull(providerId, "providerId");
        Utils.checkNotNull(hmacHash, "hmacHash");
        Utils.checkNotNull(environmentId, "environmentId");
        Utils.checkNotNull(integrationIdentifier, "integrationIdentifier");
        this.subscriberId = subscriberId;
        this.providerId = providerId;
        this.hmacHash = hmacHash;
        this.environmentId = environmentId;
        this.integrationIdentifier = integrationIdentifier;
    }
    
    public SubscribersControllerChatAccessOauthRequest(
            String subscriberId,
            String providerId,
            String hmacHash,
            String environmentId) {
        this(subscriberId, providerId, hmacHash, environmentId, Optional.empty());
    }

    @JsonIgnore
    public String subscriberId() {
        return subscriberId;
    }

    @JsonIgnore
    public String providerId() {
        return providerId;
    }

    @JsonIgnore
    public String hmacHash() {
        return hmacHash;
    }

    @JsonIgnore
    public String environmentId() {
        return environmentId;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> integrationIdentifier() {
        return (Optional<String>) integrationIdentifier;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public SubscribersControllerChatAccessOauthRequest withSubscriberId(String subscriberId) {
        Utils.checkNotNull(subscriberId, "subscriberId");
        this.subscriberId = subscriberId;
        return this;
    }

    public SubscribersControllerChatAccessOauthRequest withProviderId(String providerId) {
        Utils.checkNotNull(providerId, "providerId");
        this.providerId = providerId;
        return this;
    }

    public SubscribersControllerChatAccessOauthRequest withHmacHash(String hmacHash) {
        Utils.checkNotNull(hmacHash, "hmacHash");
        this.hmacHash = hmacHash;
        return this;
    }

    public SubscribersControllerChatAccessOauthRequest withEnvironmentId(String environmentId) {
        Utils.checkNotNull(environmentId, "environmentId");
        this.environmentId = environmentId;
        return this;
    }

    public SubscribersControllerChatAccessOauthRequest withIntegrationIdentifier(String integrationIdentifier) {
        Utils.checkNotNull(integrationIdentifier, "integrationIdentifier");
        this.integrationIdentifier = Optional.ofNullable(integrationIdentifier);
        return this;
    }

    public SubscribersControllerChatAccessOauthRequest withIntegrationIdentifier(Optional<? extends String> integrationIdentifier) {
        Utils.checkNotNull(integrationIdentifier, "integrationIdentifier");
        this.integrationIdentifier = integrationIdentifier;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SubscribersControllerChatAccessOauthRequest other = (SubscribersControllerChatAccessOauthRequest) o;
        return 
            java.util.Objects.deepEquals(this.subscriberId, other.subscriberId) &&
            java.util.Objects.deepEquals(this.providerId, other.providerId) &&
            java.util.Objects.deepEquals(this.hmacHash, other.hmacHash) &&
            java.util.Objects.deepEquals(this.environmentId, other.environmentId) &&
            java.util.Objects.deepEquals(this.integrationIdentifier, other.integrationIdentifier);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            subscriberId,
            providerId,
            hmacHash,
            environmentId,
            integrationIdentifier);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SubscribersControllerChatAccessOauthRequest.class,
                "subscriberId", subscriberId,
                "providerId", providerId,
                "hmacHash", hmacHash,
                "environmentId", environmentId,
                "integrationIdentifier", integrationIdentifier);
    }
    
    public final static class Builder {
 
        private String subscriberId;
 
        private String providerId;
 
        private String hmacHash;
 
        private String environmentId;
 
        private Optional<? extends String> integrationIdentifier = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder subscriberId(String subscriberId) {
            Utils.checkNotNull(subscriberId, "subscriberId");
            this.subscriberId = subscriberId;
            return this;
        }

        public Builder providerId(String providerId) {
            Utils.checkNotNull(providerId, "providerId");
            this.providerId = providerId;
            return this;
        }

        public Builder hmacHash(String hmacHash) {
            Utils.checkNotNull(hmacHash, "hmacHash");
            this.hmacHash = hmacHash;
            return this;
        }

        public Builder environmentId(String environmentId) {
            Utils.checkNotNull(environmentId, "environmentId");
            this.environmentId = environmentId;
            return this;
        }

        public Builder integrationIdentifier(String integrationIdentifier) {
            Utils.checkNotNull(integrationIdentifier, "integrationIdentifier");
            this.integrationIdentifier = Optional.ofNullable(integrationIdentifier);
            return this;
        }

        public Builder integrationIdentifier(Optional<? extends String> integrationIdentifier) {
            Utils.checkNotNull(integrationIdentifier, "integrationIdentifier");
            this.integrationIdentifier = integrationIdentifier;
            return this;
        }
        
        public SubscribersControllerChatAccessOauthRequest build() {
            return new SubscribersControllerChatAccessOauthRequest(
                subscriberId,
                providerId,
                hmacHash,
                environmentId,
                integrationIdentifier);
        }
    }
}

