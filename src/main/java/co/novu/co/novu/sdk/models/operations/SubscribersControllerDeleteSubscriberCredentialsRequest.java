/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package co.novu.co.novu.sdk.models.operations;

import co.novu.co.novu.sdk.utils.SpeakeasyMetadata;
import co.novu.co.novu.sdk.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;

public class SubscribersControllerDeleteSubscriberCredentialsRequest {

    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=subscriberId")
    private String subscriberId;

    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=providerId")
    private String providerId;

    @JsonCreator
    public SubscribersControllerDeleteSubscriberCredentialsRequest(
            String subscriberId,
            String providerId) {
        Utils.checkNotNull(subscriberId, "subscriberId");
        Utils.checkNotNull(providerId, "providerId");
        this.subscriberId = subscriberId;
        this.providerId = providerId;
    }

    @JsonIgnore
    public String subscriberId() {
        return subscriberId;
    }

    @JsonIgnore
    public String providerId() {
        return providerId;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public SubscribersControllerDeleteSubscriberCredentialsRequest withSubscriberId(String subscriberId) {
        Utils.checkNotNull(subscriberId, "subscriberId");
        this.subscriberId = subscriberId;
        return this;
    }

    public SubscribersControllerDeleteSubscriberCredentialsRequest withProviderId(String providerId) {
        Utils.checkNotNull(providerId, "providerId");
        this.providerId = providerId;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SubscribersControllerDeleteSubscriberCredentialsRequest other = (SubscribersControllerDeleteSubscriberCredentialsRequest) o;
        return 
            java.util.Objects.deepEquals(this.subscriberId, other.subscriberId) &&
            java.util.Objects.deepEquals(this.providerId, other.providerId);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            subscriberId,
            providerId);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SubscribersControllerDeleteSubscriberCredentialsRequest.class,
                "subscriberId", subscriberId,
                "providerId", providerId);
    }
    
    public final static class Builder {
 
        private String subscriberId;
 
        private String providerId;  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder subscriberId(String subscriberId) {
            Utils.checkNotNull(subscriberId, "subscriberId");
            this.subscriberId = subscriberId;
            return this;
        }

        public Builder providerId(String providerId) {
            Utils.checkNotNull(providerId, "providerId");
            this.providerId = providerId;
            return this;
        }
        
        public SubscribersControllerDeleteSubscriberCredentialsRequest build() {
            return new SubscribersControllerDeleteSubscriberCredentialsRequest(
                subscriberId,
                providerId);
        }
    }
}

