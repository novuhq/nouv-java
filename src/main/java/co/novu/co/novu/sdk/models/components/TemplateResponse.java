/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package co.novu.co.novu.sdk.models.components;

import co.novu.co.novu.sdk.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;

public class TemplateResponse {

    /**
     * Unique identifier of the workflow
     */
    @JsonProperty("_id")
    private String id;

    /**
     * Critical templates will always be delivered to the end user and should be hidden from the subscriber preferences screen
     */
    @JsonProperty("critical")
    private boolean critical;

    /**
     * Name of the workflow
     */
    @JsonProperty("name")
    private String name;

    /**
     * Triggers are the events that will trigger the workflow.
     */
    @JsonProperty("triggers")
    private java.util.List<String> triggers;

    @JsonCreator
    public TemplateResponse(
            @JsonProperty("_id") String id,
            @JsonProperty("critical") boolean critical,
            @JsonProperty("name") String name,
            @JsonProperty("triggers") java.util.List<String> triggers) {
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(critical, "critical");
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(triggers, "triggers");
        this.id = id;
        this.critical = critical;
        this.name = name;
        this.triggers = triggers;
    }

    /**
     * Unique identifier of the workflow
     */
    @JsonIgnore
    public String id() {
        return id;
    }

    /**
     * Critical templates will always be delivered to the end user and should be hidden from the subscriber preferences screen
     */
    @JsonIgnore
    public boolean critical() {
        return critical;
    }

    /**
     * Name of the workflow
     */
    @JsonIgnore
    public String name() {
        return name;
    }

    /**
     * Triggers are the events that will trigger the workflow.
     */
    @JsonIgnore
    public java.util.List<String> triggers() {
        return triggers;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Unique identifier of the workflow
     */
    public TemplateResponse withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    /**
     * Critical templates will always be delivered to the end user and should be hidden from the subscriber preferences screen
     */
    public TemplateResponse withCritical(boolean critical) {
        Utils.checkNotNull(critical, "critical");
        this.critical = critical;
        return this;
    }

    /**
     * Name of the workflow
     */
    public TemplateResponse withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    /**
     * Triggers are the events that will trigger the workflow.
     */
    public TemplateResponse withTriggers(java.util.List<String> triggers) {
        Utils.checkNotNull(triggers, "triggers");
        this.triggers = triggers;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        TemplateResponse other = (TemplateResponse) o;
        return 
            java.util.Objects.deepEquals(this.id, other.id) &&
            java.util.Objects.deepEquals(this.critical, other.critical) &&
            java.util.Objects.deepEquals(this.name, other.name) &&
            java.util.Objects.deepEquals(this.triggers, other.triggers);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            id,
            critical,
            name,
            triggers);
    }
    
    @Override
    public String toString() {
        return Utils.toString(TemplateResponse.class,
                "id", id,
                "critical", critical,
                "name", name,
                "triggers", triggers);
    }
    
    public final static class Builder {
 
        private String id;
 
        private Boolean critical;
 
        private String name;
 
        private java.util.List<String> triggers;  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Unique identifier of the workflow
         */
        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        /**
         * Critical templates will always be delivered to the end user and should be hidden from the subscriber preferences screen
         */
        public Builder critical(boolean critical) {
            Utils.checkNotNull(critical, "critical");
            this.critical = critical;
            return this;
        }

        /**
         * Name of the workflow
         */
        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }

        /**
         * Triggers are the events that will trigger the workflow.
         */
        public Builder triggers(java.util.List<String> triggers) {
            Utils.checkNotNull(triggers, "triggers");
            this.triggers = triggers;
            return this;
        }
        
        public TemplateResponse build() {
            return new TemplateResponse(
                id,
                critical,
                name,
                triggers);
        }
    }
}

