/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package co.novu.co.novu.sdk.models.components;

import co.novu.co.novu.sdk.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;

public class MessageResponseDto {

    @JsonProperty("_environmentId")
    private String environmentId;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("_feedId")
    private JsonNullable<? extends String> feedId;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("_id")
    private Optional<? extends String> id;

    @JsonProperty("_messageTemplateId")
    private String messageTemplateId;

    @JsonProperty("_notificationId")
    private String notificationId;

    @JsonProperty("_organizationId")
    private String organizationId;

    @JsonProperty("_subscriberId")
    private String subscriberId;

    @JsonProperty("_templateId")
    private String templateId;

    @JsonProperty("channel")
    private MessageResponseDtoChannel channel;

    @JsonProperty("content")
    private Content content;

    @JsonProperty("createdAt")
    private String createdAt;

    @JsonProperty("cta")
    private MessageCTA cta;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("deviceTokens")
    private Optional<? extends java.util.List<String>> deviceTokens;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("directWebhookUrl")
    private Optional<? extends String> directWebhookUrl;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("email")
    private Optional<? extends String> email;

    @JsonProperty("errorId")
    private String errorId;

    @JsonProperty("errorText")
    private String errorText;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("lastReadDate")
    private Optional<? extends String> lastReadDate;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("lastSeenDate")
    private Optional<? extends String> lastSeenDate;

    /**
     * Provider specific overrides used when triggering the notification
     */
    @JsonProperty("overrides")
    private Overrides overrides;

    /**
     * The payload that was used to send the notification trigger
     */
    @JsonProperty("payload")
    private MessageResponseDtoPayload payload;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("phone")
    private Optional<? extends String> phone;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("providerId")
    private Optional<? extends String> providerId;

    @JsonProperty("read")
    private boolean read;

    @JsonProperty("seen")
    private boolean seen;

    @JsonProperty("status")
    private MessageResponseDtoStatus status;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("subject")
    private Optional<? extends String> subject;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("subscriber")
    private Optional<? extends SubscriberResponseDto> subscriber;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("template")
    private Optional<? extends WorkflowResponse> template;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("templateIdentifier")
    private Optional<? extends String> templateIdentifier;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("title")
    private Optional<? extends String> title;

    @JsonProperty("transactionId")
    private String transactionId;

    @JsonCreator
    public MessageResponseDto(
            @JsonProperty("_environmentId") String environmentId,
            @JsonProperty("_feedId") JsonNullable<? extends String> feedId,
            @JsonProperty("_id") Optional<? extends String> id,
            @JsonProperty("_messageTemplateId") String messageTemplateId,
            @JsonProperty("_notificationId") String notificationId,
            @JsonProperty("_organizationId") String organizationId,
            @JsonProperty("_subscriberId") String subscriberId,
            @JsonProperty("_templateId") String templateId,
            @JsonProperty("channel") MessageResponseDtoChannel channel,
            @JsonProperty("content") Content content,
            @JsonProperty("createdAt") String createdAt,
            @JsonProperty("cta") MessageCTA cta,
            @JsonProperty("deviceTokens") Optional<? extends java.util.List<String>> deviceTokens,
            @JsonProperty("directWebhookUrl") Optional<? extends String> directWebhookUrl,
            @JsonProperty("email") Optional<? extends String> email,
            @JsonProperty("errorId") String errorId,
            @JsonProperty("errorText") String errorText,
            @JsonProperty("lastReadDate") Optional<? extends String> lastReadDate,
            @JsonProperty("lastSeenDate") Optional<? extends String> lastSeenDate,
            @JsonProperty("overrides") Overrides overrides,
            @JsonProperty("payload") MessageResponseDtoPayload payload,
            @JsonProperty("phone") Optional<? extends String> phone,
            @JsonProperty("providerId") Optional<? extends String> providerId,
            @JsonProperty("read") boolean read,
            @JsonProperty("seen") boolean seen,
            @JsonProperty("status") MessageResponseDtoStatus status,
            @JsonProperty("subject") Optional<? extends String> subject,
            @JsonProperty("subscriber") Optional<? extends SubscriberResponseDto> subscriber,
            @JsonProperty("template") Optional<? extends WorkflowResponse> template,
            @JsonProperty("templateIdentifier") Optional<? extends String> templateIdentifier,
            @JsonProperty("title") Optional<? extends String> title,
            @JsonProperty("transactionId") String transactionId) {
        Utils.checkNotNull(environmentId, "environmentId");
        Utils.checkNotNull(feedId, "feedId");
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(messageTemplateId, "messageTemplateId");
        Utils.checkNotNull(notificationId, "notificationId");
        Utils.checkNotNull(organizationId, "organizationId");
        Utils.checkNotNull(subscriberId, "subscriberId");
        Utils.checkNotNull(templateId, "templateId");
        Utils.checkNotNull(channel, "channel");
        Utils.checkNotNull(content, "content");
        Utils.checkNotNull(createdAt, "createdAt");
        Utils.checkNotNull(cta, "cta");
        Utils.checkNotNull(deviceTokens, "deviceTokens");
        Utils.checkNotNull(directWebhookUrl, "directWebhookUrl");
        Utils.checkNotNull(email, "email");
        Utils.checkNotNull(errorId, "errorId");
        Utils.checkNotNull(errorText, "errorText");
        Utils.checkNotNull(lastReadDate, "lastReadDate");
        Utils.checkNotNull(lastSeenDate, "lastSeenDate");
        Utils.checkNotNull(overrides, "overrides");
        Utils.checkNotNull(payload, "payload");
        Utils.checkNotNull(phone, "phone");
        Utils.checkNotNull(providerId, "providerId");
        Utils.checkNotNull(read, "read");
        Utils.checkNotNull(seen, "seen");
        Utils.checkNotNull(status, "status");
        Utils.checkNotNull(subject, "subject");
        Utils.checkNotNull(subscriber, "subscriber");
        Utils.checkNotNull(template, "template");
        Utils.checkNotNull(templateIdentifier, "templateIdentifier");
        Utils.checkNotNull(title, "title");
        Utils.checkNotNull(transactionId, "transactionId");
        this.environmentId = environmentId;
        this.feedId = feedId;
        this.id = id;
        this.messageTemplateId = messageTemplateId;
        this.notificationId = notificationId;
        this.organizationId = organizationId;
        this.subscriberId = subscriberId;
        this.templateId = templateId;
        this.channel = channel;
        this.content = content;
        this.createdAt = createdAt;
        this.cta = cta;
        this.deviceTokens = deviceTokens;
        this.directWebhookUrl = directWebhookUrl;
        this.email = email;
        this.errorId = errorId;
        this.errorText = errorText;
        this.lastReadDate = lastReadDate;
        this.lastSeenDate = lastSeenDate;
        this.overrides = overrides;
        this.payload = payload;
        this.phone = phone;
        this.providerId = providerId;
        this.read = read;
        this.seen = seen;
        this.status = status;
        this.subject = subject;
        this.subscriber = subscriber;
        this.template = template;
        this.templateIdentifier = templateIdentifier;
        this.title = title;
        this.transactionId = transactionId;
    }
    
    public MessageResponseDto(
            String environmentId,
            String messageTemplateId,
            String notificationId,
            String organizationId,
            String subscriberId,
            String templateId,
            MessageResponseDtoChannel channel,
            Content content,
            String createdAt,
            MessageCTA cta,
            String errorId,
            String errorText,
            Overrides overrides,
            MessageResponseDtoPayload payload,
            boolean read,
            boolean seen,
            MessageResponseDtoStatus status,
            String transactionId) {
        this(environmentId, JsonNullable.undefined(), Optional.empty(), messageTemplateId, notificationId, organizationId, subscriberId, templateId, channel, content, createdAt, cta, Optional.empty(), Optional.empty(), Optional.empty(), errorId, errorText, Optional.empty(), Optional.empty(), overrides, payload, Optional.empty(), Optional.empty(), read, seen, status, Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), transactionId);
    }

    @JsonIgnore
    public String environmentId() {
        return environmentId;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<String> feedId() {
        return (JsonNullable<String>) feedId;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> id() {
        return (Optional<String>) id;
    }

    @JsonIgnore
    public String messageTemplateId() {
        return messageTemplateId;
    }

    @JsonIgnore
    public String notificationId() {
        return notificationId;
    }

    @JsonIgnore
    public String organizationId() {
        return organizationId;
    }

    @JsonIgnore
    public String subscriberId() {
        return subscriberId;
    }

    @JsonIgnore
    public String templateId() {
        return templateId;
    }

    @JsonIgnore
    public MessageResponseDtoChannel channel() {
        return channel;
    }

    @JsonIgnore
    public Content content() {
        return content;
    }

    @JsonIgnore
    public String createdAt() {
        return createdAt;
    }

    @JsonIgnore
    public MessageCTA cta() {
        return cta;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<java.util.List<String>> deviceTokens() {
        return (Optional<java.util.List<String>>) deviceTokens;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> directWebhookUrl() {
        return (Optional<String>) directWebhookUrl;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> email() {
        return (Optional<String>) email;
    }

    @JsonIgnore
    public String errorId() {
        return errorId;
    }

    @JsonIgnore
    public String errorText() {
        return errorText;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> lastReadDate() {
        return (Optional<String>) lastReadDate;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> lastSeenDate() {
        return (Optional<String>) lastSeenDate;
    }

    /**
     * Provider specific overrides used when triggering the notification
     */
    @JsonIgnore
    public Overrides overrides() {
        return overrides;
    }

    /**
     * The payload that was used to send the notification trigger
     */
    @JsonIgnore
    public MessageResponseDtoPayload payload() {
        return payload;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> phone() {
        return (Optional<String>) phone;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> providerId() {
        return (Optional<String>) providerId;
    }

    @JsonIgnore
    public boolean read() {
        return read;
    }

    @JsonIgnore
    public boolean seen() {
        return seen;
    }

    @JsonIgnore
    public MessageResponseDtoStatus status() {
        return status;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> subject() {
        return (Optional<String>) subject;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<SubscriberResponseDto> subscriber() {
        return (Optional<SubscriberResponseDto>) subscriber;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<WorkflowResponse> template() {
        return (Optional<WorkflowResponse>) template;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> templateIdentifier() {
        return (Optional<String>) templateIdentifier;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> title() {
        return (Optional<String>) title;
    }

    @JsonIgnore
    public String transactionId() {
        return transactionId;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public MessageResponseDto withEnvironmentId(String environmentId) {
        Utils.checkNotNull(environmentId, "environmentId");
        this.environmentId = environmentId;
        return this;
    }

    public MessageResponseDto withFeedId(String feedId) {
        Utils.checkNotNull(feedId, "feedId");
        this.feedId = JsonNullable.of(feedId);
        return this;
    }

    public MessageResponseDto withFeedId(JsonNullable<? extends String> feedId) {
        Utils.checkNotNull(feedId, "feedId");
        this.feedId = feedId;
        return this;
    }

    public MessageResponseDto withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = Optional.ofNullable(id);
        return this;
    }

    public MessageResponseDto withId(Optional<? extends String> id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    public MessageResponseDto withMessageTemplateId(String messageTemplateId) {
        Utils.checkNotNull(messageTemplateId, "messageTemplateId");
        this.messageTemplateId = messageTemplateId;
        return this;
    }

    public MessageResponseDto withNotificationId(String notificationId) {
        Utils.checkNotNull(notificationId, "notificationId");
        this.notificationId = notificationId;
        return this;
    }

    public MessageResponseDto withOrganizationId(String organizationId) {
        Utils.checkNotNull(organizationId, "organizationId");
        this.organizationId = organizationId;
        return this;
    }

    public MessageResponseDto withSubscriberId(String subscriberId) {
        Utils.checkNotNull(subscriberId, "subscriberId");
        this.subscriberId = subscriberId;
        return this;
    }

    public MessageResponseDto withTemplateId(String templateId) {
        Utils.checkNotNull(templateId, "templateId");
        this.templateId = templateId;
        return this;
    }

    public MessageResponseDto withChannel(MessageResponseDtoChannel channel) {
        Utils.checkNotNull(channel, "channel");
        this.channel = channel;
        return this;
    }

    public MessageResponseDto withContent(Content content) {
        Utils.checkNotNull(content, "content");
        this.content = content;
        return this;
    }

    public MessageResponseDto withCreatedAt(String createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = createdAt;
        return this;
    }

    public MessageResponseDto withCta(MessageCTA cta) {
        Utils.checkNotNull(cta, "cta");
        this.cta = cta;
        return this;
    }

    public MessageResponseDto withDeviceTokens(java.util.List<String> deviceTokens) {
        Utils.checkNotNull(deviceTokens, "deviceTokens");
        this.deviceTokens = Optional.ofNullable(deviceTokens);
        return this;
    }

    public MessageResponseDto withDeviceTokens(Optional<? extends java.util.List<String>> deviceTokens) {
        Utils.checkNotNull(deviceTokens, "deviceTokens");
        this.deviceTokens = deviceTokens;
        return this;
    }

    public MessageResponseDto withDirectWebhookUrl(String directWebhookUrl) {
        Utils.checkNotNull(directWebhookUrl, "directWebhookUrl");
        this.directWebhookUrl = Optional.ofNullable(directWebhookUrl);
        return this;
    }

    public MessageResponseDto withDirectWebhookUrl(Optional<? extends String> directWebhookUrl) {
        Utils.checkNotNull(directWebhookUrl, "directWebhookUrl");
        this.directWebhookUrl = directWebhookUrl;
        return this;
    }

    public MessageResponseDto withEmail(String email) {
        Utils.checkNotNull(email, "email");
        this.email = Optional.ofNullable(email);
        return this;
    }

    public MessageResponseDto withEmail(Optional<? extends String> email) {
        Utils.checkNotNull(email, "email");
        this.email = email;
        return this;
    }

    public MessageResponseDto withErrorId(String errorId) {
        Utils.checkNotNull(errorId, "errorId");
        this.errorId = errorId;
        return this;
    }

    public MessageResponseDto withErrorText(String errorText) {
        Utils.checkNotNull(errorText, "errorText");
        this.errorText = errorText;
        return this;
    }

    public MessageResponseDto withLastReadDate(String lastReadDate) {
        Utils.checkNotNull(lastReadDate, "lastReadDate");
        this.lastReadDate = Optional.ofNullable(lastReadDate);
        return this;
    }

    public MessageResponseDto withLastReadDate(Optional<? extends String> lastReadDate) {
        Utils.checkNotNull(lastReadDate, "lastReadDate");
        this.lastReadDate = lastReadDate;
        return this;
    }

    public MessageResponseDto withLastSeenDate(String lastSeenDate) {
        Utils.checkNotNull(lastSeenDate, "lastSeenDate");
        this.lastSeenDate = Optional.ofNullable(lastSeenDate);
        return this;
    }

    public MessageResponseDto withLastSeenDate(Optional<? extends String> lastSeenDate) {
        Utils.checkNotNull(lastSeenDate, "lastSeenDate");
        this.lastSeenDate = lastSeenDate;
        return this;
    }

    /**
     * Provider specific overrides used when triggering the notification
     */
    public MessageResponseDto withOverrides(Overrides overrides) {
        Utils.checkNotNull(overrides, "overrides");
        this.overrides = overrides;
        return this;
    }

    /**
     * The payload that was used to send the notification trigger
     */
    public MessageResponseDto withPayload(MessageResponseDtoPayload payload) {
        Utils.checkNotNull(payload, "payload");
        this.payload = payload;
        return this;
    }

    public MessageResponseDto withPhone(String phone) {
        Utils.checkNotNull(phone, "phone");
        this.phone = Optional.ofNullable(phone);
        return this;
    }

    public MessageResponseDto withPhone(Optional<? extends String> phone) {
        Utils.checkNotNull(phone, "phone");
        this.phone = phone;
        return this;
    }

    public MessageResponseDto withProviderId(String providerId) {
        Utils.checkNotNull(providerId, "providerId");
        this.providerId = Optional.ofNullable(providerId);
        return this;
    }

    public MessageResponseDto withProviderId(Optional<? extends String> providerId) {
        Utils.checkNotNull(providerId, "providerId");
        this.providerId = providerId;
        return this;
    }

    public MessageResponseDto withRead(boolean read) {
        Utils.checkNotNull(read, "read");
        this.read = read;
        return this;
    }

    public MessageResponseDto withSeen(boolean seen) {
        Utils.checkNotNull(seen, "seen");
        this.seen = seen;
        return this;
    }

    public MessageResponseDto withStatus(MessageResponseDtoStatus status) {
        Utils.checkNotNull(status, "status");
        this.status = status;
        return this;
    }

    public MessageResponseDto withSubject(String subject) {
        Utils.checkNotNull(subject, "subject");
        this.subject = Optional.ofNullable(subject);
        return this;
    }

    public MessageResponseDto withSubject(Optional<? extends String> subject) {
        Utils.checkNotNull(subject, "subject");
        this.subject = subject;
        return this;
    }

    public MessageResponseDto withSubscriber(SubscriberResponseDto subscriber) {
        Utils.checkNotNull(subscriber, "subscriber");
        this.subscriber = Optional.ofNullable(subscriber);
        return this;
    }

    public MessageResponseDto withSubscriber(Optional<? extends SubscriberResponseDto> subscriber) {
        Utils.checkNotNull(subscriber, "subscriber");
        this.subscriber = subscriber;
        return this;
    }

    public MessageResponseDto withTemplate(WorkflowResponse template) {
        Utils.checkNotNull(template, "template");
        this.template = Optional.ofNullable(template);
        return this;
    }

    public MessageResponseDto withTemplate(Optional<? extends WorkflowResponse> template) {
        Utils.checkNotNull(template, "template");
        this.template = template;
        return this;
    }

    public MessageResponseDto withTemplateIdentifier(String templateIdentifier) {
        Utils.checkNotNull(templateIdentifier, "templateIdentifier");
        this.templateIdentifier = Optional.ofNullable(templateIdentifier);
        return this;
    }

    public MessageResponseDto withTemplateIdentifier(Optional<? extends String> templateIdentifier) {
        Utils.checkNotNull(templateIdentifier, "templateIdentifier");
        this.templateIdentifier = templateIdentifier;
        return this;
    }

    public MessageResponseDto withTitle(String title) {
        Utils.checkNotNull(title, "title");
        this.title = Optional.ofNullable(title);
        return this;
    }

    public MessageResponseDto withTitle(Optional<? extends String> title) {
        Utils.checkNotNull(title, "title");
        this.title = title;
        return this;
    }

    public MessageResponseDto withTransactionId(String transactionId) {
        Utils.checkNotNull(transactionId, "transactionId");
        this.transactionId = transactionId;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        MessageResponseDto other = (MessageResponseDto) o;
        return 
            java.util.Objects.deepEquals(this.environmentId, other.environmentId) &&
            java.util.Objects.deepEquals(this.feedId, other.feedId) &&
            java.util.Objects.deepEquals(this.id, other.id) &&
            java.util.Objects.deepEquals(this.messageTemplateId, other.messageTemplateId) &&
            java.util.Objects.deepEquals(this.notificationId, other.notificationId) &&
            java.util.Objects.deepEquals(this.organizationId, other.organizationId) &&
            java.util.Objects.deepEquals(this.subscriberId, other.subscriberId) &&
            java.util.Objects.deepEquals(this.templateId, other.templateId) &&
            java.util.Objects.deepEquals(this.channel, other.channel) &&
            java.util.Objects.deepEquals(this.content, other.content) &&
            java.util.Objects.deepEquals(this.createdAt, other.createdAt) &&
            java.util.Objects.deepEquals(this.cta, other.cta) &&
            java.util.Objects.deepEquals(this.deviceTokens, other.deviceTokens) &&
            java.util.Objects.deepEquals(this.directWebhookUrl, other.directWebhookUrl) &&
            java.util.Objects.deepEquals(this.email, other.email) &&
            java.util.Objects.deepEquals(this.errorId, other.errorId) &&
            java.util.Objects.deepEquals(this.errorText, other.errorText) &&
            java.util.Objects.deepEquals(this.lastReadDate, other.lastReadDate) &&
            java.util.Objects.deepEquals(this.lastSeenDate, other.lastSeenDate) &&
            java.util.Objects.deepEquals(this.overrides, other.overrides) &&
            java.util.Objects.deepEquals(this.payload, other.payload) &&
            java.util.Objects.deepEquals(this.phone, other.phone) &&
            java.util.Objects.deepEquals(this.providerId, other.providerId) &&
            java.util.Objects.deepEquals(this.read, other.read) &&
            java.util.Objects.deepEquals(this.seen, other.seen) &&
            java.util.Objects.deepEquals(this.status, other.status) &&
            java.util.Objects.deepEquals(this.subject, other.subject) &&
            java.util.Objects.deepEquals(this.subscriber, other.subscriber) &&
            java.util.Objects.deepEquals(this.template, other.template) &&
            java.util.Objects.deepEquals(this.templateIdentifier, other.templateIdentifier) &&
            java.util.Objects.deepEquals(this.title, other.title) &&
            java.util.Objects.deepEquals(this.transactionId, other.transactionId);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            environmentId,
            feedId,
            id,
            messageTemplateId,
            notificationId,
            organizationId,
            subscriberId,
            templateId,
            channel,
            content,
            createdAt,
            cta,
            deviceTokens,
            directWebhookUrl,
            email,
            errorId,
            errorText,
            lastReadDate,
            lastSeenDate,
            overrides,
            payload,
            phone,
            providerId,
            read,
            seen,
            status,
            subject,
            subscriber,
            template,
            templateIdentifier,
            title,
            transactionId);
    }
    
    @Override
    public String toString() {
        return Utils.toString(MessageResponseDto.class,
                "environmentId", environmentId,
                "feedId", feedId,
                "id", id,
                "messageTemplateId", messageTemplateId,
                "notificationId", notificationId,
                "organizationId", organizationId,
                "subscriberId", subscriberId,
                "templateId", templateId,
                "channel", channel,
                "content", content,
                "createdAt", createdAt,
                "cta", cta,
                "deviceTokens", deviceTokens,
                "directWebhookUrl", directWebhookUrl,
                "email", email,
                "errorId", errorId,
                "errorText", errorText,
                "lastReadDate", lastReadDate,
                "lastSeenDate", lastSeenDate,
                "overrides", overrides,
                "payload", payload,
                "phone", phone,
                "providerId", providerId,
                "read", read,
                "seen", seen,
                "status", status,
                "subject", subject,
                "subscriber", subscriber,
                "template", template,
                "templateIdentifier", templateIdentifier,
                "title", title,
                "transactionId", transactionId);
    }
    
    public final static class Builder {
 
        private String environmentId;
 
        private JsonNullable<? extends String> feedId = JsonNullable.undefined();
 
        private Optional<? extends String> id = Optional.empty();
 
        private String messageTemplateId;
 
        private String notificationId;
 
        private String organizationId;
 
        private String subscriberId;
 
        private String templateId;
 
        private MessageResponseDtoChannel channel;
 
        private Content content;
 
        private String createdAt;
 
        private MessageCTA cta;
 
        private Optional<? extends java.util.List<String>> deviceTokens = Optional.empty();
 
        private Optional<? extends String> directWebhookUrl = Optional.empty();
 
        private Optional<? extends String> email = Optional.empty();
 
        private String errorId;
 
        private String errorText;
 
        private Optional<? extends String> lastReadDate = Optional.empty();
 
        private Optional<? extends String> lastSeenDate = Optional.empty();
 
        private Overrides overrides;
 
        private MessageResponseDtoPayload payload;
 
        private Optional<? extends String> phone = Optional.empty();
 
        private Optional<? extends String> providerId = Optional.empty();
 
        private Boolean read;
 
        private Boolean seen;
 
        private MessageResponseDtoStatus status;
 
        private Optional<? extends String> subject = Optional.empty();
 
        private Optional<? extends SubscriberResponseDto> subscriber = Optional.empty();
 
        private Optional<? extends WorkflowResponse> template = Optional.empty();
 
        private Optional<? extends String> templateIdentifier = Optional.empty();
 
        private Optional<? extends String> title = Optional.empty();
 
        private String transactionId;  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder environmentId(String environmentId) {
            Utils.checkNotNull(environmentId, "environmentId");
            this.environmentId = environmentId;
            return this;
        }

        public Builder feedId(String feedId) {
            Utils.checkNotNull(feedId, "feedId");
            this.feedId = JsonNullable.of(feedId);
            return this;
        }

        public Builder feedId(JsonNullable<? extends String> feedId) {
            Utils.checkNotNull(feedId, "feedId");
            this.feedId = feedId;
            return this;
        }

        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = Optional.ofNullable(id);
            return this;
        }

        public Builder id(Optional<? extends String> id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        public Builder messageTemplateId(String messageTemplateId) {
            Utils.checkNotNull(messageTemplateId, "messageTemplateId");
            this.messageTemplateId = messageTemplateId;
            return this;
        }

        public Builder notificationId(String notificationId) {
            Utils.checkNotNull(notificationId, "notificationId");
            this.notificationId = notificationId;
            return this;
        }

        public Builder organizationId(String organizationId) {
            Utils.checkNotNull(organizationId, "organizationId");
            this.organizationId = organizationId;
            return this;
        }

        public Builder subscriberId(String subscriberId) {
            Utils.checkNotNull(subscriberId, "subscriberId");
            this.subscriberId = subscriberId;
            return this;
        }

        public Builder templateId(String templateId) {
            Utils.checkNotNull(templateId, "templateId");
            this.templateId = templateId;
            return this;
        }

        public Builder channel(MessageResponseDtoChannel channel) {
            Utils.checkNotNull(channel, "channel");
            this.channel = channel;
            return this;
        }

        public Builder content(Content content) {
            Utils.checkNotNull(content, "content");
            this.content = content;
            return this;
        }

        public Builder createdAt(String createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = createdAt;
            return this;
        }

        public Builder cta(MessageCTA cta) {
            Utils.checkNotNull(cta, "cta");
            this.cta = cta;
            return this;
        }

        public Builder deviceTokens(java.util.List<String> deviceTokens) {
            Utils.checkNotNull(deviceTokens, "deviceTokens");
            this.deviceTokens = Optional.ofNullable(deviceTokens);
            return this;
        }

        public Builder deviceTokens(Optional<? extends java.util.List<String>> deviceTokens) {
            Utils.checkNotNull(deviceTokens, "deviceTokens");
            this.deviceTokens = deviceTokens;
            return this;
        }

        public Builder directWebhookUrl(String directWebhookUrl) {
            Utils.checkNotNull(directWebhookUrl, "directWebhookUrl");
            this.directWebhookUrl = Optional.ofNullable(directWebhookUrl);
            return this;
        }

        public Builder directWebhookUrl(Optional<? extends String> directWebhookUrl) {
            Utils.checkNotNull(directWebhookUrl, "directWebhookUrl");
            this.directWebhookUrl = directWebhookUrl;
            return this;
        }

        public Builder email(String email) {
            Utils.checkNotNull(email, "email");
            this.email = Optional.ofNullable(email);
            return this;
        }

        public Builder email(Optional<? extends String> email) {
            Utils.checkNotNull(email, "email");
            this.email = email;
            return this;
        }

        public Builder errorId(String errorId) {
            Utils.checkNotNull(errorId, "errorId");
            this.errorId = errorId;
            return this;
        }

        public Builder errorText(String errorText) {
            Utils.checkNotNull(errorText, "errorText");
            this.errorText = errorText;
            return this;
        }

        public Builder lastReadDate(String lastReadDate) {
            Utils.checkNotNull(lastReadDate, "lastReadDate");
            this.lastReadDate = Optional.ofNullable(lastReadDate);
            return this;
        }

        public Builder lastReadDate(Optional<? extends String> lastReadDate) {
            Utils.checkNotNull(lastReadDate, "lastReadDate");
            this.lastReadDate = lastReadDate;
            return this;
        }

        public Builder lastSeenDate(String lastSeenDate) {
            Utils.checkNotNull(lastSeenDate, "lastSeenDate");
            this.lastSeenDate = Optional.ofNullable(lastSeenDate);
            return this;
        }

        public Builder lastSeenDate(Optional<? extends String> lastSeenDate) {
            Utils.checkNotNull(lastSeenDate, "lastSeenDate");
            this.lastSeenDate = lastSeenDate;
            return this;
        }

        /**
         * Provider specific overrides used when triggering the notification
         */
        public Builder overrides(Overrides overrides) {
            Utils.checkNotNull(overrides, "overrides");
            this.overrides = overrides;
            return this;
        }

        /**
         * The payload that was used to send the notification trigger
         */
        public Builder payload(MessageResponseDtoPayload payload) {
            Utils.checkNotNull(payload, "payload");
            this.payload = payload;
            return this;
        }

        public Builder phone(String phone) {
            Utils.checkNotNull(phone, "phone");
            this.phone = Optional.ofNullable(phone);
            return this;
        }

        public Builder phone(Optional<? extends String> phone) {
            Utils.checkNotNull(phone, "phone");
            this.phone = phone;
            return this;
        }

        public Builder providerId(String providerId) {
            Utils.checkNotNull(providerId, "providerId");
            this.providerId = Optional.ofNullable(providerId);
            return this;
        }

        public Builder providerId(Optional<? extends String> providerId) {
            Utils.checkNotNull(providerId, "providerId");
            this.providerId = providerId;
            return this;
        }

        public Builder read(boolean read) {
            Utils.checkNotNull(read, "read");
            this.read = read;
            return this;
        }

        public Builder seen(boolean seen) {
            Utils.checkNotNull(seen, "seen");
            this.seen = seen;
            return this;
        }

        public Builder status(MessageResponseDtoStatus status) {
            Utils.checkNotNull(status, "status");
            this.status = status;
            return this;
        }

        public Builder subject(String subject) {
            Utils.checkNotNull(subject, "subject");
            this.subject = Optional.ofNullable(subject);
            return this;
        }

        public Builder subject(Optional<? extends String> subject) {
            Utils.checkNotNull(subject, "subject");
            this.subject = subject;
            return this;
        }

        public Builder subscriber(SubscriberResponseDto subscriber) {
            Utils.checkNotNull(subscriber, "subscriber");
            this.subscriber = Optional.ofNullable(subscriber);
            return this;
        }

        public Builder subscriber(Optional<? extends SubscriberResponseDto> subscriber) {
            Utils.checkNotNull(subscriber, "subscriber");
            this.subscriber = subscriber;
            return this;
        }

        public Builder template(WorkflowResponse template) {
            Utils.checkNotNull(template, "template");
            this.template = Optional.ofNullable(template);
            return this;
        }

        public Builder template(Optional<? extends WorkflowResponse> template) {
            Utils.checkNotNull(template, "template");
            this.template = template;
            return this;
        }

        public Builder templateIdentifier(String templateIdentifier) {
            Utils.checkNotNull(templateIdentifier, "templateIdentifier");
            this.templateIdentifier = Optional.ofNullable(templateIdentifier);
            return this;
        }

        public Builder templateIdentifier(Optional<? extends String> templateIdentifier) {
            Utils.checkNotNull(templateIdentifier, "templateIdentifier");
            this.templateIdentifier = templateIdentifier;
            return this;
        }

        public Builder title(String title) {
            Utils.checkNotNull(title, "title");
            this.title = Optional.ofNullable(title);
            return this;
        }

        public Builder title(Optional<? extends String> title) {
            Utils.checkNotNull(title, "title");
            this.title = title;
            return this;
        }

        public Builder transactionId(String transactionId) {
            Utils.checkNotNull(transactionId, "transactionId");
            this.transactionId = transactionId;
            return this;
        }
        
        public MessageResponseDto build() {
            return new MessageResponseDto(
                environmentId,
                feedId,
                id,
                messageTemplateId,
                notificationId,
                organizationId,
                subscriberId,
                templateId,
                channel,
                content,
                createdAt,
                cta,
                deviceTokens,
                directWebhookUrl,
                email,
                errorId,
                errorText,
                lastReadDate,
                lastSeenDate,
                overrides,
                payload,
                phone,
                providerId,
                read,
                seen,
                status,
                subject,
                subscriber,
                template,
                templateIdentifier,
                title,
                transactionId);
        }
    }
}

