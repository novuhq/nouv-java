/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package co.novu.co.novu.sdk.models.components;

import co.novu.co.novu.sdk.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;

public class NotificationStepVariant {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("_id")
    private Optional<? extends String> id;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("_parentId")
    private Optional<? extends NotificationStepVariantParentId> parentId;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("_templateId")
    private Optional<? extends String> templateId;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("active")
    private Optional<? extends Boolean> active;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("filters")
    private Optional<? extends java.util.List<StepFilter>> filters;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("metadata")
    private Optional<? extends NotificationStepVariantMetadata> metadata;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    private Optional<? extends String> name;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("replyCallback")
    private Optional<? extends NotificationStepVariantReplyCallback> replyCallback;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("shouldStopOnFail")
    private Optional<? extends Boolean> shouldStopOnFail;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("template")
    private Optional<? extends MessageTemplate> template;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("uuid")
    private Optional<? extends String> uuid;

    @JsonCreator
    public NotificationStepVariant(
            @JsonProperty("_id") Optional<? extends String> id,
            @JsonProperty("_parentId") Optional<? extends NotificationStepVariantParentId> parentId,
            @JsonProperty("_templateId") Optional<? extends String> templateId,
            @JsonProperty("active") Optional<? extends Boolean> active,
            @JsonProperty("filters") Optional<? extends java.util.List<StepFilter>> filters,
            @JsonProperty("metadata") Optional<? extends NotificationStepVariantMetadata> metadata,
            @JsonProperty("name") Optional<? extends String> name,
            @JsonProperty("replyCallback") Optional<? extends NotificationStepVariantReplyCallback> replyCallback,
            @JsonProperty("shouldStopOnFail") Optional<? extends Boolean> shouldStopOnFail,
            @JsonProperty("template") Optional<? extends MessageTemplate> template,
            @JsonProperty("uuid") Optional<? extends String> uuid) {
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(parentId, "parentId");
        Utils.checkNotNull(templateId, "templateId");
        Utils.checkNotNull(active, "active");
        Utils.checkNotNull(filters, "filters");
        Utils.checkNotNull(metadata, "metadata");
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(replyCallback, "replyCallback");
        Utils.checkNotNull(shouldStopOnFail, "shouldStopOnFail");
        Utils.checkNotNull(template, "template");
        Utils.checkNotNull(uuid, "uuid");
        this.id = id;
        this.parentId = parentId;
        this.templateId = templateId;
        this.active = active;
        this.filters = filters;
        this.metadata = metadata;
        this.name = name;
        this.replyCallback = replyCallback;
        this.shouldStopOnFail = shouldStopOnFail;
        this.template = template;
        this.uuid = uuid;
    }
    
    public NotificationStepVariant() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> id() {
        return (Optional<String>) id;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<NotificationStepVariantParentId> parentId() {
        return (Optional<NotificationStepVariantParentId>) parentId;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> templateId() {
        return (Optional<String>) templateId;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Boolean> active() {
        return (Optional<Boolean>) active;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<java.util.List<StepFilter>> filters() {
        return (Optional<java.util.List<StepFilter>>) filters;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<NotificationStepVariantMetadata> metadata() {
        return (Optional<NotificationStepVariantMetadata>) metadata;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> name() {
        return (Optional<String>) name;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<NotificationStepVariantReplyCallback> replyCallback() {
        return (Optional<NotificationStepVariantReplyCallback>) replyCallback;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Boolean> shouldStopOnFail() {
        return (Optional<Boolean>) shouldStopOnFail;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<MessageTemplate> template() {
        return (Optional<MessageTemplate>) template;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> uuid() {
        return (Optional<String>) uuid;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public NotificationStepVariant withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = Optional.ofNullable(id);
        return this;
    }

    public NotificationStepVariant withId(Optional<? extends String> id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    public NotificationStepVariant withParentId(NotificationStepVariantParentId parentId) {
        Utils.checkNotNull(parentId, "parentId");
        this.parentId = Optional.ofNullable(parentId);
        return this;
    }

    public NotificationStepVariant withParentId(Optional<? extends NotificationStepVariantParentId> parentId) {
        Utils.checkNotNull(parentId, "parentId");
        this.parentId = parentId;
        return this;
    }

    public NotificationStepVariant withTemplateId(String templateId) {
        Utils.checkNotNull(templateId, "templateId");
        this.templateId = Optional.ofNullable(templateId);
        return this;
    }

    public NotificationStepVariant withTemplateId(Optional<? extends String> templateId) {
        Utils.checkNotNull(templateId, "templateId");
        this.templateId = templateId;
        return this;
    }

    public NotificationStepVariant withActive(boolean active) {
        Utils.checkNotNull(active, "active");
        this.active = Optional.ofNullable(active);
        return this;
    }

    public NotificationStepVariant withActive(Optional<? extends Boolean> active) {
        Utils.checkNotNull(active, "active");
        this.active = active;
        return this;
    }

    public NotificationStepVariant withFilters(java.util.List<StepFilter> filters) {
        Utils.checkNotNull(filters, "filters");
        this.filters = Optional.ofNullable(filters);
        return this;
    }

    public NotificationStepVariant withFilters(Optional<? extends java.util.List<StepFilter>> filters) {
        Utils.checkNotNull(filters, "filters");
        this.filters = filters;
        return this;
    }

    public NotificationStepVariant withMetadata(NotificationStepVariantMetadata metadata) {
        Utils.checkNotNull(metadata, "metadata");
        this.metadata = Optional.ofNullable(metadata);
        return this;
    }

    public NotificationStepVariant withMetadata(Optional<? extends NotificationStepVariantMetadata> metadata) {
        Utils.checkNotNull(metadata, "metadata");
        this.metadata = metadata;
        return this;
    }

    public NotificationStepVariant withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = Optional.ofNullable(name);
        return this;
    }

    public NotificationStepVariant withName(Optional<? extends String> name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    public NotificationStepVariant withReplyCallback(NotificationStepVariantReplyCallback replyCallback) {
        Utils.checkNotNull(replyCallback, "replyCallback");
        this.replyCallback = Optional.ofNullable(replyCallback);
        return this;
    }

    public NotificationStepVariant withReplyCallback(Optional<? extends NotificationStepVariantReplyCallback> replyCallback) {
        Utils.checkNotNull(replyCallback, "replyCallback");
        this.replyCallback = replyCallback;
        return this;
    }

    public NotificationStepVariant withShouldStopOnFail(boolean shouldStopOnFail) {
        Utils.checkNotNull(shouldStopOnFail, "shouldStopOnFail");
        this.shouldStopOnFail = Optional.ofNullable(shouldStopOnFail);
        return this;
    }

    public NotificationStepVariant withShouldStopOnFail(Optional<? extends Boolean> shouldStopOnFail) {
        Utils.checkNotNull(shouldStopOnFail, "shouldStopOnFail");
        this.shouldStopOnFail = shouldStopOnFail;
        return this;
    }

    public NotificationStepVariant withTemplate(MessageTemplate template) {
        Utils.checkNotNull(template, "template");
        this.template = Optional.ofNullable(template);
        return this;
    }

    public NotificationStepVariant withTemplate(Optional<? extends MessageTemplate> template) {
        Utils.checkNotNull(template, "template");
        this.template = template;
        return this;
    }

    public NotificationStepVariant withUuid(String uuid) {
        Utils.checkNotNull(uuid, "uuid");
        this.uuid = Optional.ofNullable(uuid);
        return this;
    }

    public NotificationStepVariant withUuid(Optional<? extends String> uuid) {
        Utils.checkNotNull(uuid, "uuid");
        this.uuid = uuid;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        NotificationStepVariant other = (NotificationStepVariant) o;
        return 
            java.util.Objects.deepEquals(this.id, other.id) &&
            java.util.Objects.deepEquals(this.parentId, other.parentId) &&
            java.util.Objects.deepEquals(this.templateId, other.templateId) &&
            java.util.Objects.deepEquals(this.active, other.active) &&
            java.util.Objects.deepEquals(this.filters, other.filters) &&
            java.util.Objects.deepEquals(this.metadata, other.metadata) &&
            java.util.Objects.deepEquals(this.name, other.name) &&
            java.util.Objects.deepEquals(this.replyCallback, other.replyCallback) &&
            java.util.Objects.deepEquals(this.shouldStopOnFail, other.shouldStopOnFail) &&
            java.util.Objects.deepEquals(this.template, other.template) &&
            java.util.Objects.deepEquals(this.uuid, other.uuid);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            id,
            parentId,
            templateId,
            active,
            filters,
            metadata,
            name,
            replyCallback,
            shouldStopOnFail,
            template,
            uuid);
    }
    
    @Override
    public String toString() {
        return Utils.toString(NotificationStepVariant.class,
                "id", id,
                "parentId", parentId,
                "templateId", templateId,
                "active", active,
                "filters", filters,
                "metadata", metadata,
                "name", name,
                "replyCallback", replyCallback,
                "shouldStopOnFail", shouldStopOnFail,
                "template", template,
                "uuid", uuid);
    }
    
    public final static class Builder {
 
        private Optional<? extends String> id = Optional.empty();
 
        private Optional<? extends NotificationStepVariantParentId> parentId = Optional.empty();
 
        private Optional<? extends String> templateId = Optional.empty();
 
        private Optional<? extends Boolean> active = Optional.empty();
 
        private Optional<? extends java.util.List<StepFilter>> filters = Optional.empty();
 
        private Optional<? extends NotificationStepVariantMetadata> metadata = Optional.empty();
 
        private Optional<? extends String> name = Optional.empty();
 
        private Optional<? extends NotificationStepVariantReplyCallback> replyCallback = Optional.empty();
 
        private Optional<? extends Boolean> shouldStopOnFail = Optional.empty();
 
        private Optional<? extends MessageTemplate> template = Optional.empty();
 
        private Optional<? extends String> uuid = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = Optional.ofNullable(id);
            return this;
        }

        public Builder id(Optional<? extends String> id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        public Builder parentId(NotificationStepVariantParentId parentId) {
            Utils.checkNotNull(parentId, "parentId");
            this.parentId = Optional.ofNullable(parentId);
            return this;
        }

        public Builder parentId(Optional<? extends NotificationStepVariantParentId> parentId) {
            Utils.checkNotNull(parentId, "parentId");
            this.parentId = parentId;
            return this;
        }

        public Builder templateId(String templateId) {
            Utils.checkNotNull(templateId, "templateId");
            this.templateId = Optional.ofNullable(templateId);
            return this;
        }

        public Builder templateId(Optional<? extends String> templateId) {
            Utils.checkNotNull(templateId, "templateId");
            this.templateId = templateId;
            return this;
        }

        public Builder active(boolean active) {
            Utils.checkNotNull(active, "active");
            this.active = Optional.ofNullable(active);
            return this;
        }

        public Builder active(Optional<? extends Boolean> active) {
            Utils.checkNotNull(active, "active");
            this.active = active;
            return this;
        }

        public Builder filters(java.util.List<StepFilter> filters) {
            Utils.checkNotNull(filters, "filters");
            this.filters = Optional.ofNullable(filters);
            return this;
        }

        public Builder filters(Optional<? extends java.util.List<StepFilter>> filters) {
            Utils.checkNotNull(filters, "filters");
            this.filters = filters;
            return this;
        }

        public Builder metadata(NotificationStepVariantMetadata metadata) {
            Utils.checkNotNull(metadata, "metadata");
            this.metadata = Optional.ofNullable(metadata);
            return this;
        }

        public Builder metadata(Optional<? extends NotificationStepVariantMetadata> metadata) {
            Utils.checkNotNull(metadata, "metadata");
            this.metadata = metadata;
            return this;
        }

        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = Optional.ofNullable(name);
            return this;
        }

        public Builder name(Optional<? extends String> name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }

        public Builder replyCallback(NotificationStepVariantReplyCallback replyCallback) {
            Utils.checkNotNull(replyCallback, "replyCallback");
            this.replyCallback = Optional.ofNullable(replyCallback);
            return this;
        }

        public Builder replyCallback(Optional<? extends NotificationStepVariantReplyCallback> replyCallback) {
            Utils.checkNotNull(replyCallback, "replyCallback");
            this.replyCallback = replyCallback;
            return this;
        }

        public Builder shouldStopOnFail(boolean shouldStopOnFail) {
            Utils.checkNotNull(shouldStopOnFail, "shouldStopOnFail");
            this.shouldStopOnFail = Optional.ofNullable(shouldStopOnFail);
            return this;
        }

        public Builder shouldStopOnFail(Optional<? extends Boolean> shouldStopOnFail) {
            Utils.checkNotNull(shouldStopOnFail, "shouldStopOnFail");
            this.shouldStopOnFail = shouldStopOnFail;
            return this;
        }

        public Builder template(MessageTemplate template) {
            Utils.checkNotNull(template, "template");
            this.template = Optional.ofNullable(template);
            return this;
        }

        public Builder template(Optional<? extends MessageTemplate> template) {
            Utils.checkNotNull(template, "template");
            this.template = template;
            return this;
        }

        public Builder uuid(String uuid) {
            Utils.checkNotNull(uuid, "uuid");
            this.uuid = Optional.ofNullable(uuid);
            return this;
        }

        public Builder uuid(Optional<? extends String> uuid) {
            Utils.checkNotNull(uuid, "uuid");
            this.uuid = uuid;
            return this;
        }
        
        public NotificationStepVariant build() {
            return new NotificationStepVariant(
                id,
                parentId,
                templateId,
                active,
                filters,
                metadata,
                name,
                replyCallback,
                shouldStopOnFail,
                template,
                uuid);
        }
    }
}

