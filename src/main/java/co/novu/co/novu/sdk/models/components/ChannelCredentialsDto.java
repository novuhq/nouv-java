/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package co.novu.co.novu.sdk.models.components;

import co.novu.co.novu.sdk.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;

public class ChannelCredentialsDto {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("deviceTokens")
    private Optional<? extends java.util.List<String>> deviceTokens;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("webhookUrl")
    private Optional<? extends String> webhookUrl;

    @JsonCreator
    public ChannelCredentialsDto(
            @JsonProperty("deviceTokens") Optional<? extends java.util.List<String>> deviceTokens,
            @JsonProperty("webhookUrl") Optional<? extends String> webhookUrl) {
        Utils.checkNotNull(deviceTokens, "deviceTokens");
        Utils.checkNotNull(webhookUrl, "webhookUrl");
        this.deviceTokens = deviceTokens;
        this.webhookUrl = webhookUrl;
    }
    
    public ChannelCredentialsDto() {
        this(Optional.empty(), Optional.empty());
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<java.util.List<String>> deviceTokens() {
        return (Optional<java.util.List<String>>) deviceTokens;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> webhookUrl() {
        return (Optional<String>) webhookUrl;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public ChannelCredentialsDto withDeviceTokens(java.util.List<String> deviceTokens) {
        Utils.checkNotNull(deviceTokens, "deviceTokens");
        this.deviceTokens = Optional.ofNullable(deviceTokens);
        return this;
    }

    public ChannelCredentialsDto withDeviceTokens(Optional<? extends java.util.List<String>> deviceTokens) {
        Utils.checkNotNull(deviceTokens, "deviceTokens");
        this.deviceTokens = deviceTokens;
        return this;
    }

    public ChannelCredentialsDto withWebhookUrl(String webhookUrl) {
        Utils.checkNotNull(webhookUrl, "webhookUrl");
        this.webhookUrl = Optional.ofNullable(webhookUrl);
        return this;
    }

    public ChannelCredentialsDto withWebhookUrl(Optional<? extends String> webhookUrl) {
        Utils.checkNotNull(webhookUrl, "webhookUrl");
        this.webhookUrl = webhookUrl;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ChannelCredentialsDto other = (ChannelCredentialsDto) o;
        return 
            java.util.Objects.deepEquals(this.deviceTokens, other.deviceTokens) &&
            java.util.Objects.deepEquals(this.webhookUrl, other.webhookUrl);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            deviceTokens,
            webhookUrl);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ChannelCredentialsDto.class,
                "deviceTokens", deviceTokens,
                "webhookUrl", webhookUrl);
    }
    
    public final static class Builder {
 
        private Optional<? extends java.util.List<String>> deviceTokens = Optional.empty();
 
        private Optional<? extends String> webhookUrl = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder deviceTokens(java.util.List<String> deviceTokens) {
            Utils.checkNotNull(deviceTokens, "deviceTokens");
            this.deviceTokens = Optional.ofNullable(deviceTokens);
            return this;
        }

        public Builder deviceTokens(Optional<? extends java.util.List<String>> deviceTokens) {
            Utils.checkNotNull(deviceTokens, "deviceTokens");
            this.deviceTokens = deviceTokens;
            return this;
        }

        public Builder webhookUrl(String webhookUrl) {
            Utils.checkNotNull(webhookUrl, "webhookUrl");
            this.webhookUrl = Optional.ofNullable(webhookUrl);
            return this;
        }

        public Builder webhookUrl(Optional<? extends String> webhookUrl) {
            Utils.checkNotNull(webhookUrl, "webhookUrl");
            this.webhookUrl = webhookUrl;
            return this;
        }
        
        public ChannelCredentialsDto build() {
            return new ChannelCredentialsDto(
                deviceTokens,
                webhookUrl);
        }
    }
}

