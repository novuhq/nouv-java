/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package co.novu.co.novu.sdk.models.components;

import co.novu.co.novu.sdk.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;

public class ActivityNotificationExecutionDetailResponseDto {

    @JsonProperty("_id")
    private String id;

    @JsonProperty("_jobId")
    private String jobId;

    @JsonProperty("detail")
    private String detail;

    @JsonProperty("isRetry")
    private boolean isRetry;

    @JsonProperty("isTest")
    private boolean isTest;

    @JsonProperty("providerId")
    private ProviderId providerId;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("raw")
    private Optional<? extends String> raw;

    @JsonProperty("source")
    private Source source;

    @JsonProperty("status")
    private Status status;

    @JsonCreator
    public ActivityNotificationExecutionDetailResponseDto(
            @JsonProperty("_id") String id,
            @JsonProperty("_jobId") String jobId,
            @JsonProperty("detail") String detail,
            @JsonProperty("isRetry") boolean isRetry,
            @JsonProperty("isTest") boolean isTest,
            @JsonProperty("providerId") ProviderId providerId,
            @JsonProperty("raw") Optional<? extends String> raw,
            @JsonProperty("source") Source source,
            @JsonProperty("status") Status status) {
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(jobId, "jobId");
        Utils.checkNotNull(detail, "detail");
        Utils.checkNotNull(isRetry, "isRetry");
        Utils.checkNotNull(isTest, "isTest");
        Utils.checkNotNull(providerId, "providerId");
        Utils.checkNotNull(raw, "raw");
        Utils.checkNotNull(source, "source");
        Utils.checkNotNull(status, "status");
        this.id = id;
        this.jobId = jobId;
        this.detail = detail;
        this.isRetry = isRetry;
        this.isTest = isTest;
        this.providerId = providerId;
        this.raw = raw;
        this.source = source;
        this.status = status;
    }
    
    public ActivityNotificationExecutionDetailResponseDto(
            String id,
            String jobId,
            String detail,
            boolean isRetry,
            boolean isTest,
            ProviderId providerId,
            Source source,
            Status status) {
        this(id, jobId, detail, isRetry, isTest, providerId, Optional.empty(), source, status);
    }

    @JsonIgnore
    public String id() {
        return id;
    }

    @JsonIgnore
    public String jobId() {
        return jobId;
    }

    @JsonIgnore
    public String detail() {
        return detail;
    }

    @JsonIgnore
    public boolean isRetry() {
        return isRetry;
    }

    @JsonIgnore
    public boolean isTest() {
        return isTest;
    }

    @JsonIgnore
    public ProviderId providerId() {
        return providerId;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> raw() {
        return (Optional<String>) raw;
    }

    @JsonIgnore
    public Source source() {
        return source;
    }

    @JsonIgnore
    public Status status() {
        return status;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public ActivityNotificationExecutionDetailResponseDto withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    public ActivityNotificationExecutionDetailResponseDto withJobId(String jobId) {
        Utils.checkNotNull(jobId, "jobId");
        this.jobId = jobId;
        return this;
    }

    public ActivityNotificationExecutionDetailResponseDto withDetail(String detail) {
        Utils.checkNotNull(detail, "detail");
        this.detail = detail;
        return this;
    }

    public ActivityNotificationExecutionDetailResponseDto withIsRetry(boolean isRetry) {
        Utils.checkNotNull(isRetry, "isRetry");
        this.isRetry = isRetry;
        return this;
    }

    public ActivityNotificationExecutionDetailResponseDto withIsTest(boolean isTest) {
        Utils.checkNotNull(isTest, "isTest");
        this.isTest = isTest;
        return this;
    }

    public ActivityNotificationExecutionDetailResponseDto withProviderId(ProviderId providerId) {
        Utils.checkNotNull(providerId, "providerId");
        this.providerId = providerId;
        return this;
    }

    public ActivityNotificationExecutionDetailResponseDto withRaw(String raw) {
        Utils.checkNotNull(raw, "raw");
        this.raw = Optional.ofNullable(raw);
        return this;
    }

    public ActivityNotificationExecutionDetailResponseDto withRaw(Optional<? extends String> raw) {
        Utils.checkNotNull(raw, "raw");
        this.raw = raw;
        return this;
    }

    public ActivityNotificationExecutionDetailResponseDto withSource(Source source) {
        Utils.checkNotNull(source, "source");
        this.source = source;
        return this;
    }

    public ActivityNotificationExecutionDetailResponseDto withStatus(Status status) {
        Utils.checkNotNull(status, "status");
        this.status = status;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ActivityNotificationExecutionDetailResponseDto other = (ActivityNotificationExecutionDetailResponseDto) o;
        return 
            java.util.Objects.deepEquals(this.id, other.id) &&
            java.util.Objects.deepEquals(this.jobId, other.jobId) &&
            java.util.Objects.deepEquals(this.detail, other.detail) &&
            java.util.Objects.deepEquals(this.isRetry, other.isRetry) &&
            java.util.Objects.deepEquals(this.isTest, other.isTest) &&
            java.util.Objects.deepEquals(this.providerId, other.providerId) &&
            java.util.Objects.deepEquals(this.raw, other.raw) &&
            java.util.Objects.deepEquals(this.source, other.source) &&
            java.util.Objects.deepEquals(this.status, other.status);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            id,
            jobId,
            detail,
            isRetry,
            isTest,
            providerId,
            raw,
            source,
            status);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ActivityNotificationExecutionDetailResponseDto.class,
                "id", id,
                "jobId", jobId,
                "detail", detail,
                "isRetry", isRetry,
                "isTest", isTest,
                "providerId", providerId,
                "raw", raw,
                "source", source,
                "status", status);
    }
    
    public final static class Builder {
 
        private String id;
 
        private String jobId;
 
        private String detail;
 
        private Boolean isRetry;
 
        private Boolean isTest;
 
        private ProviderId providerId;
 
        private Optional<? extends String> raw = Optional.empty();
 
        private Source source;
 
        private Status status;  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        public Builder jobId(String jobId) {
            Utils.checkNotNull(jobId, "jobId");
            this.jobId = jobId;
            return this;
        }

        public Builder detail(String detail) {
            Utils.checkNotNull(detail, "detail");
            this.detail = detail;
            return this;
        }

        public Builder isRetry(boolean isRetry) {
            Utils.checkNotNull(isRetry, "isRetry");
            this.isRetry = isRetry;
            return this;
        }

        public Builder isTest(boolean isTest) {
            Utils.checkNotNull(isTest, "isTest");
            this.isTest = isTest;
            return this;
        }

        public Builder providerId(ProviderId providerId) {
            Utils.checkNotNull(providerId, "providerId");
            this.providerId = providerId;
            return this;
        }

        public Builder raw(String raw) {
            Utils.checkNotNull(raw, "raw");
            this.raw = Optional.ofNullable(raw);
            return this;
        }

        public Builder raw(Optional<? extends String> raw) {
            Utils.checkNotNull(raw, "raw");
            this.raw = raw;
            return this;
        }

        public Builder source(Source source) {
            Utils.checkNotNull(source, "source");
            this.source = source;
            return this;
        }

        public Builder status(Status status) {
            Utils.checkNotNull(status, "status");
            this.status = status;
            return this;
        }
        
        public ActivityNotificationExecutionDetailResponseDto build() {
            return new ActivityNotificationExecutionDetailResponseDto(
                id,
                jobId,
                detail,
                isRetry,
                isTest,
                providerId,
                raw,
                source,
                status);
        }
    }
}

