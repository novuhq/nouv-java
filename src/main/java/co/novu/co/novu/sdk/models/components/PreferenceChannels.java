/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package co.novu.co.novu.sdk.models.components;

import co.novu.co.novu.sdk.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;

public class PreferenceChannels {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("chat")
    private Optional<? extends Boolean> chat;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("email")
    private Optional<? extends Boolean> email;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("in_app")
    private Optional<? extends Boolean> inApp;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("push")
    private Optional<? extends Boolean> push;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sms")
    private Optional<? extends Boolean> sms;

    @JsonCreator
    public PreferenceChannels(
            @JsonProperty("chat") Optional<? extends Boolean> chat,
            @JsonProperty("email") Optional<? extends Boolean> email,
            @JsonProperty("in_app") Optional<? extends Boolean> inApp,
            @JsonProperty("push") Optional<? extends Boolean> push,
            @JsonProperty("sms") Optional<? extends Boolean> sms) {
        Utils.checkNotNull(chat, "chat");
        Utils.checkNotNull(email, "email");
        Utils.checkNotNull(inApp, "inApp");
        Utils.checkNotNull(push, "push");
        Utils.checkNotNull(sms, "sms");
        this.chat = chat;
        this.email = email;
        this.inApp = inApp;
        this.push = push;
        this.sms = sms;
    }
    
    public PreferenceChannels() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Boolean> chat() {
        return (Optional<Boolean>) chat;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Boolean> email() {
        return (Optional<Boolean>) email;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Boolean> inApp() {
        return (Optional<Boolean>) inApp;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Boolean> push() {
        return (Optional<Boolean>) push;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Boolean> sms() {
        return (Optional<Boolean>) sms;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public PreferenceChannels withChat(boolean chat) {
        Utils.checkNotNull(chat, "chat");
        this.chat = Optional.ofNullable(chat);
        return this;
    }

    public PreferenceChannels withChat(Optional<? extends Boolean> chat) {
        Utils.checkNotNull(chat, "chat");
        this.chat = chat;
        return this;
    }

    public PreferenceChannels withEmail(boolean email) {
        Utils.checkNotNull(email, "email");
        this.email = Optional.ofNullable(email);
        return this;
    }

    public PreferenceChannels withEmail(Optional<? extends Boolean> email) {
        Utils.checkNotNull(email, "email");
        this.email = email;
        return this;
    }

    public PreferenceChannels withInApp(boolean inApp) {
        Utils.checkNotNull(inApp, "inApp");
        this.inApp = Optional.ofNullable(inApp);
        return this;
    }

    public PreferenceChannels withInApp(Optional<? extends Boolean> inApp) {
        Utils.checkNotNull(inApp, "inApp");
        this.inApp = inApp;
        return this;
    }

    public PreferenceChannels withPush(boolean push) {
        Utils.checkNotNull(push, "push");
        this.push = Optional.ofNullable(push);
        return this;
    }

    public PreferenceChannels withPush(Optional<? extends Boolean> push) {
        Utils.checkNotNull(push, "push");
        this.push = push;
        return this;
    }

    public PreferenceChannels withSms(boolean sms) {
        Utils.checkNotNull(sms, "sms");
        this.sms = Optional.ofNullable(sms);
        return this;
    }

    public PreferenceChannels withSms(Optional<? extends Boolean> sms) {
        Utils.checkNotNull(sms, "sms");
        this.sms = sms;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        PreferenceChannels other = (PreferenceChannels) o;
        return 
            java.util.Objects.deepEquals(this.chat, other.chat) &&
            java.util.Objects.deepEquals(this.email, other.email) &&
            java.util.Objects.deepEquals(this.inApp, other.inApp) &&
            java.util.Objects.deepEquals(this.push, other.push) &&
            java.util.Objects.deepEquals(this.sms, other.sms);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            chat,
            email,
            inApp,
            push,
            sms);
    }
    
    @Override
    public String toString() {
        return Utils.toString(PreferenceChannels.class,
                "chat", chat,
                "email", email,
                "inApp", inApp,
                "push", push,
                "sms", sms);
    }
    
    public final static class Builder {
 
        private Optional<? extends Boolean> chat = Optional.empty();
 
        private Optional<? extends Boolean> email = Optional.empty();
 
        private Optional<? extends Boolean> inApp = Optional.empty();
 
        private Optional<? extends Boolean> push = Optional.empty();
 
        private Optional<? extends Boolean> sms = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder chat(boolean chat) {
            Utils.checkNotNull(chat, "chat");
            this.chat = Optional.ofNullable(chat);
            return this;
        }

        public Builder chat(Optional<? extends Boolean> chat) {
            Utils.checkNotNull(chat, "chat");
            this.chat = chat;
            return this;
        }

        public Builder email(boolean email) {
            Utils.checkNotNull(email, "email");
            this.email = Optional.ofNullable(email);
            return this;
        }

        public Builder email(Optional<? extends Boolean> email) {
            Utils.checkNotNull(email, "email");
            this.email = email;
            return this;
        }

        public Builder inApp(boolean inApp) {
            Utils.checkNotNull(inApp, "inApp");
            this.inApp = Optional.ofNullable(inApp);
            return this;
        }

        public Builder inApp(Optional<? extends Boolean> inApp) {
            Utils.checkNotNull(inApp, "inApp");
            this.inApp = inApp;
            return this;
        }

        public Builder push(boolean push) {
            Utils.checkNotNull(push, "push");
            this.push = Optional.ofNullable(push);
            return this;
        }

        public Builder push(Optional<? extends Boolean> push) {
            Utils.checkNotNull(push, "push");
            this.push = push;
            return this;
        }

        public Builder sms(boolean sms) {
            Utils.checkNotNull(sms, "sms");
            this.sms = Optional.ofNullable(sms);
            return this;
        }

        public Builder sms(Optional<? extends Boolean> sms) {
            Utils.checkNotNull(sms, "sms");
            this.sms = sms;
            return this;
        }
        
        public PreferenceChannels build() {
            return new PreferenceChannels(
                chat,
                email,
                inApp,
                push,
                sms);
        }
    }
}

