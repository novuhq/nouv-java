/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package co.novu.co.novu.sdk.models.operations;

import co.novu.co.novu.sdk.utils.LazySingletonValue;
import co.novu.co.novu.sdk.utils.SpeakeasyMetadata;
import co.novu.co.novu.sdk.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;

public class NotificationsControllerListNotificationsRequest {

    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=channels")
    private java.util.List<Channels> channels;

    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=templates")
    private java.util.List<String> templates;

    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=emails")
    private java.util.List<String> emails;

    /**
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=search")
    @Deprecated
    private String search;

    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=subscriberIds")
    private java.util.List<String> subscriberIds;

    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=page")
    private Optional<? extends Double> page;

    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=transactionId")
    private Optional<? extends String> transactionId;

    @JsonCreator
    public NotificationsControllerListNotificationsRequest(
            java.util.List<Channels> channels,
            java.util.List<String> templates,
            java.util.List<String> emails,
            String search,
            java.util.List<String> subscriberIds,
            Optional<? extends Double> page,
            Optional<? extends String> transactionId) {
        Utils.checkNotNull(channels, "channels");
        Utils.checkNotNull(templates, "templates");
        Utils.checkNotNull(emails, "emails");
        Utils.checkNotNull(search, "search");
        Utils.checkNotNull(subscriberIds, "subscriberIds");
        Utils.checkNotNull(page, "page");
        Utils.checkNotNull(transactionId, "transactionId");
        this.channels = channels;
        this.templates = templates;
        this.emails = emails;
        this.search = search;
        this.subscriberIds = subscriberIds;
        this.page = page;
        this.transactionId = transactionId;
    }
    
    public NotificationsControllerListNotificationsRequest(
            java.util.List<Channels> channels,
            java.util.List<String> templates,
            java.util.List<String> emails,
            String search,
            java.util.List<String> subscriberIds) {
        this(channels, templates, emails, search, subscriberIds, Optional.empty(), Optional.empty());
    }

    @JsonIgnore
    public java.util.List<Channels> channels() {
        return channels;
    }

    @JsonIgnore
    public java.util.List<String> templates() {
        return templates;
    }

    @JsonIgnore
    public java.util.List<String> emails() {
        return emails;
    }

    /**
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    @JsonIgnore
    public String search() {
        return search;
    }

    @JsonIgnore
    public java.util.List<String> subscriberIds() {
        return subscriberIds;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Double> page() {
        return (Optional<Double>) page;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> transactionId() {
        return (Optional<String>) transactionId;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public NotificationsControllerListNotificationsRequest withChannels(java.util.List<Channels> channels) {
        Utils.checkNotNull(channels, "channels");
        this.channels = channels;
        return this;
    }

    public NotificationsControllerListNotificationsRequest withTemplates(java.util.List<String> templates) {
        Utils.checkNotNull(templates, "templates");
        this.templates = templates;
        return this;
    }

    public NotificationsControllerListNotificationsRequest withEmails(java.util.List<String> emails) {
        Utils.checkNotNull(emails, "emails");
        this.emails = emails;
        return this;
    }

    /**
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public NotificationsControllerListNotificationsRequest withSearch(String search) {
        Utils.checkNotNull(search, "search");
        this.search = search;
        return this;
    }

    public NotificationsControllerListNotificationsRequest withSubscriberIds(java.util.List<String> subscriberIds) {
        Utils.checkNotNull(subscriberIds, "subscriberIds");
        this.subscriberIds = subscriberIds;
        return this;
    }

    public NotificationsControllerListNotificationsRequest withPage(double page) {
        Utils.checkNotNull(page, "page");
        this.page = Optional.ofNullable(page);
        return this;
    }

    public NotificationsControllerListNotificationsRequest withPage(Optional<? extends Double> page) {
        Utils.checkNotNull(page, "page");
        this.page = page;
        return this;
    }

    public NotificationsControllerListNotificationsRequest withTransactionId(String transactionId) {
        Utils.checkNotNull(transactionId, "transactionId");
        this.transactionId = Optional.ofNullable(transactionId);
        return this;
    }

    public NotificationsControllerListNotificationsRequest withTransactionId(Optional<? extends String> transactionId) {
        Utils.checkNotNull(transactionId, "transactionId");
        this.transactionId = transactionId;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        NotificationsControllerListNotificationsRequest other = (NotificationsControllerListNotificationsRequest) o;
        return 
            java.util.Objects.deepEquals(this.channels, other.channels) &&
            java.util.Objects.deepEquals(this.templates, other.templates) &&
            java.util.Objects.deepEquals(this.emails, other.emails) &&
            java.util.Objects.deepEquals(this.search, other.search) &&
            java.util.Objects.deepEquals(this.subscriberIds, other.subscriberIds) &&
            java.util.Objects.deepEquals(this.page, other.page) &&
            java.util.Objects.deepEquals(this.transactionId, other.transactionId);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            channels,
            templates,
            emails,
            search,
            subscriberIds,
            page,
            transactionId);
    }
    
    @Override
    public String toString() {
        return Utils.toString(NotificationsControllerListNotificationsRequest.class,
                "channels", channels,
                "templates", templates,
                "emails", emails,
                "search", search,
                "subscriberIds", subscriberIds,
                "page", page,
                "transactionId", transactionId);
    }
    
    public final static class Builder {
 
        private java.util.List<Channels> channels;
 
        private java.util.List<String> templates;
 
        private java.util.List<String> emails;
 
        @Deprecated
        private String search;
 
        private java.util.List<String> subscriberIds;
 
        private Optional<? extends Double> page;
 
        private Optional<? extends String> transactionId = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder channels(java.util.List<Channels> channels) {
            Utils.checkNotNull(channels, "channels");
            this.channels = channels;
            return this;
        }

        public Builder templates(java.util.List<String> templates) {
            Utils.checkNotNull(templates, "templates");
            this.templates = templates;
            return this;
        }

        public Builder emails(java.util.List<String> emails) {
            Utils.checkNotNull(emails, "emails");
            this.emails = emails;
            return this;
        }

        /**
         * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
         */
        @Deprecated
        public Builder search(String search) {
            Utils.checkNotNull(search, "search");
            this.search = search;
            return this;
        }

        public Builder subscriberIds(java.util.List<String> subscriberIds) {
            Utils.checkNotNull(subscriberIds, "subscriberIds");
            this.subscriberIds = subscriberIds;
            return this;
        }

        public Builder page(double page) {
            Utils.checkNotNull(page, "page");
            this.page = Optional.ofNullable(page);
            return this;
        }

        public Builder page(Optional<? extends Double> page) {
            Utils.checkNotNull(page, "page");
            this.page = page;
            return this;
        }

        public Builder transactionId(String transactionId) {
            Utils.checkNotNull(transactionId, "transactionId");
            this.transactionId = Optional.ofNullable(transactionId);
            return this;
        }

        public Builder transactionId(Optional<? extends String> transactionId) {
            Utils.checkNotNull(transactionId, "transactionId");
            this.transactionId = transactionId;
            return this;
        }
        
        public NotificationsControllerListNotificationsRequest build() {
            if (page == null) {
                page = _SINGLETON_VALUE_Page.value();
            }
            return new NotificationsControllerListNotificationsRequest(
                channels,
                templates,
                emails,
                search,
                subscriberIds,
                page,
                transactionId);
        }

        private static final LazySingletonValue<Optional<? extends Double>> _SINGLETON_VALUE_Page =
                new LazySingletonValue<>(
                        "page",
                        "0",
                        new TypeReference<Optional<? extends Double>>() {});
    }
}

