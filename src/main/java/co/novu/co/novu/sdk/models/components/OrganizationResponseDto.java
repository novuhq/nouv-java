/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package co.novu.co.novu.sdk.models.components;

import co.novu.co.novu.sdk.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;

public class OrganizationResponseDto {

    @JsonProperty("branding")
    private OrganizationBrandingResponseDto branding;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("logo")
    private Optional<? extends String> logo;

    @JsonProperty("name")
    private String name;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("partnerConfigurations")
    private Optional<? extends java.util.List<IPartnerConfigurationResponseDto>> partnerConfigurations;

    @JsonCreator
    public OrganizationResponseDto(
            @JsonProperty("branding") OrganizationBrandingResponseDto branding,
            @JsonProperty("logo") Optional<? extends String> logo,
            @JsonProperty("name") String name,
            @JsonProperty("partnerConfigurations") Optional<? extends java.util.List<IPartnerConfigurationResponseDto>> partnerConfigurations) {
        Utils.checkNotNull(branding, "branding");
        Utils.checkNotNull(logo, "logo");
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(partnerConfigurations, "partnerConfigurations");
        this.branding = branding;
        this.logo = logo;
        this.name = name;
        this.partnerConfigurations = partnerConfigurations;
    }
    
    public OrganizationResponseDto(
            OrganizationBrandingResponseDto branding,
            String name) {
        this(branding, Optional.empty(), name, Optional.empty());
    }

    @JsonIgnore
    public OrganizationBrandingResponseDto branding() {
        return branding;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> logo() {
        return (Optional<String>) logo;
    }

    @JsonIgnore
    public String name() {
        return name;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<java.util.List<IPartnerConfigurationResponseDto>> partnerConfigurations() {
        return (Optional<java.util.List<IPartnerConfigurationResponseDto>>) partnerConfigurations;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public OrganizationResponseDto withBranding(OrganizationBrandingResponseDto branding) {
        Utils.checkNotNull(branding, "branding");
        this.branding = branding;
        return this;
    }

    public OrganizationResponseDto withLogo(String logo) {
        Utils.checkNotNull(logo, "logo");
        this.logo = Optional.ofNullable(logo);
        return this;
    }

    public OrganizationResponseDto withLogo(Optional<? extends String> logo) {
        Utils.checkNotNull(logo, "logo");
        this.logo = logo;
        return this;
    }

    public OrganizationResponseDto withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    public OrganizationResponseDto withPartnerConfigurations(java.util.List<IPartnerConfigurationResponseDto> partnerConfigurations) {
        Utils.checkNotNull(partnerConfigurations, "partnerConfigurations");
        this.partnerConfigurations = Optional.ofNullable(partnerConfigurations);
        return this;
    }

    public OrganizationResponseDto withPartnerConfigurations(Optional<? extends java.util.List<IPartnerConfigurationResponseDto>> partnerConfigurations) {
        Utils.checkNotNull(partnerConfigurations, "partnerConfigurations");
        this.partnerConfigurations = partnerConfigurations;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        OrganizationResponseDto other = (OrganizationResponseDto) o;
        return 
            java.util.Objects.deepEquals(this.branding, other.branding) &&
            java.util.Objects.deepEquals(this.logo, other.logo) &&
            java.util.Objects.deepEquals(this.name, other.name) &&
            java.util.Objects.deepEquals(this.partnerConfigurations, other.partnerConfigurations);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            branding,
            logo,
            name,
            partnerConfigurations);
    }
    
    @Override
    public String toString() {
        return Utils.toString(OrganizationResponseDto.class,
                "branding", branding,
                "logo", logo,
                "name", name,
                "partnerConfigurations", partnerConfigurations);
    }
    
    public final static class Builder {
 
        private OrganizationBrandingResponseDto branding;
 
        private Optional<? extends String> logo = Optional.empty();
 
        private String name;
 
        private Optional<? extends java.util.List<IPartnerConfigurationResponseDto>> partnerConfigurations = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder branding(OrganizationBrandingResponseDto branding) {
            Utils.checkNotNull(branding, "branding");
            this.branding = branding;
            return this;
        }

        public Builder logo(String logo) {
            Utils.checkNotNull(logo, "logo");
            this.logo = Optional.ofNullable(logo);
            return this;
        }

        public Builder logo(Optional<? extends String> logo) {
            Utils.checkNotNull(logo, "logo");
            this.logo = logo;
            return this;
        }

        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }

        public Builder partnerConfigurations(java.util.List<IPartnerConfigurationResponseDto> partnerConfigurations) {
            Utils.checkNotNull(partnerConfigurations, "partnerConfigurations");
            this.partnerConfigurations = Optional.ofNullable(partnerConfigurations);
            return this;
        }

        public Builder partnerConfigurations(Optional<? extends java.util.List<IPartnerConfigurationResponseDto>> partnerConfigurations) {
            Utils.checkNotNull(partnerConfigurations, "partnerConfigurations");
            this.partnerConfigurations = partnerConfigurations;
            return this;
        }
        
        public OrganizationResponseDto build() {
            return new OrganizationResponseDto(
                branding,
                logo,
                name,
                partnerConfigurations);
        }
    }
}

