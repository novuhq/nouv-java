/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package co.novu.co.novu.sdk.models.components;

import co.novu.co.novu.sdk.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;

public class UpdateSubscriberGlobalPreferencesRequestDto {

    /**
     * Enable or disable the subscriber global preferences.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("enabled")
    private Optional<? extends Boolean> enabled;

    /**
     * The subscriber global preferences for every ChannelTypeEnum.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("preferences")
    private Optional<? extends java.util.List<ChannelPreference>> preferences;

    @JsonCreator
    public UpdateSubscriberGlobalPreferencesRequestDto(
            @JsonProperty("enabled") Optional<? extends Boolean> enabled,
            @JsonProperty("preferences") Optional<? extends java.util.List<ChannelPreference>> preferences) {
        Utils.checkNotNull(enabled, "enabled");
        Utils.checkNotNull(preferences, "preferences");
        this.enabled = enabled;
        this.preferences = preferences;
    }
    
    public UpdateSubscriberGlobalPreferencesRequestDto() {
        this(Optional.empty(), Optional.empty());
    }

    /**
     * Enable or disable the subscriber global preferences.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Boolean> enabled() {
        return (Optional<Boolean>) enabled;
    }

    /**
     * The subscriber global preferences for every ChannelTypeEnum.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<java.util.List<ChannelPreference>> preferences() {
        return (Optional<java.util.List<ChannelPreference>>) preferences;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Enable or disable the subscriber global preferences.
     */
    public UpdateSubscriberGlobalPreferencesRequestDto withEnabled(boolean enabled) {
        Utils.checkNotNull(enabled, "enabled");
        this.enabled = Optional.ofNullable(enabled);
        return this;
    }

    /**
     * Enable or disable the subscriber global preferences.
     */
    public UpdateSubscriberGlobalPreferencesRequestDto withEnabled(Optional<? extends Boolean> enabled) {
        Utils.checkNotNull(enabled, "enabled");
        this.enabled = enabled;
        return this;
    }

    /**
     * The subscriber global preferences for every ChannelTypeEnum.
     */
    public UpdateSubscriberGlobalPreferencesRequestDto withPreferences(java.util.List<ChannelPreference> preferences) {
        Utils.checkNotNull(preferences, "preferences");
        this.preferences = Optional.ofNullable(preferences);
        return this;
    }

    /**
     * The subscriber global preferences for every ChannelTypeEnum.
     */
    public UpdateSubscriberGlobalPreferencesRequestDto withPreferences(Optional<? extends java.util.List<ChannelPreference>> preferences) {
        Utils.checkNotNull(preferences, "preferences");
        this.preferences = preferences;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        UpdateSubscriberGlobalPreferencesRequestDto other = (UpdateSubscriberGlobalPreferencesRequestDto) o;
        return 
            java.util.Objects.deepEquals(this.enabled, other.enabled) &&
            java.util.Objects.deepEquals(this.preferences, other.preferences);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            enabled,
            preferences);
    }
    
    @Override
    public String toString() {
        return Utils.toString(UpdateSubscriberGlobalPreferencesRequestDto.class,
                "enabled", enabled,
                "preferences", preferences);
    }
    
    public final static class Builder {
 
        private Optional<? extends Boolean> enabled = Optional.empty();
 
        private Optional<? extends java.util.List<ChannelPreference>> preferences = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Enable or disable the subscriber global preferences.
         */
        public Builder enabled(boolean enabled) {
            Utils.checkNotNull(enabled, "enabled");
            this.enabled = Optional.ofNullable(enabled);
            return this;
        }

        /**
         * Enable or disable the subscriber global preferences.
         */
        public Builder enabled(Optional<? extends Boolean> enabled) {
            Utils.checkNotNull(enabled, "enabled");
            this.enabled = enabled;
            return this;
        }

        /**
         * The subscriber global preferences for every ChannelTypeEnum.
         */
        public Builder preferences(java.util.List<ChannelPreference> preferences) {
            Utils.checkNotNull(preferences, "preferences");
            this.preferences = Optional.ofNullable(preferences);
            return this;
        }

        /**
         * The subscriber global preferences for every ChannelTypeEnum.
         */
        public Builder preferences(Optional<? extends java.util.List<ChannelPreference>> preferences) {
            Utils.checkNotNull(preferences, "preferences");
            this.preferences = preferences;
            return this;
        }
        
        public UpdateSubscriberGlobalPreferencesRequestDto build() {
            return new UpdateSubscriberGlobalPreferencesRequestDto(
                enabled,
                preferences);
        }
    }
}

