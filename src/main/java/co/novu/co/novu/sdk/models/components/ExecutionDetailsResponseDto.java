/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package co.novu.co.novu.sdk.models.components;

import co.novu.co.novu.sdk.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;

public class ExecutionDetailsResponseDto {

    @JsonProperty("_environmentId")
    private String environmentId;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("_id")
    private Optional<? extends String> id;

    @JsonProperty("_jobId")
    private String jobId;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("_messageId")
    private Optional<? extends String> messageId;

    @JsonProperty("_notificationId")
    private String notificationId;

    @JsonProperty("_notificationTemplateId")
    private String notificationTemplateId;

    @JsonProperty("_organizationId")
    private String organizationId;

    @JsonProperty("_subscriberId")
    private String subscriberId;

    @JsonProperty("channel")
    private ExecutionDetailsResponseDtoChannel channel;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("createdAt")
    private Optional<? extends String> createdAt;

    @JsonProperty("detail")
    private String detail;

    @JsonProperty("isRetry")
    private boolean isRetry;

    @JsonProperty("isTest")
    private boolean isTest;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("providerId")
    private Optional<? extends String> providerId;

    @JsonProperty("source")
    private ExecutionDetailsResponseDtoSource source;

    @JsonProperty("status")
    private ExecutionDetailsResponseDtoStatus status;

    @JsonProperty("transactionId")
    private String transactionId;

    @JsonCreator
    public ExecutionDetailsResponseDto(
            @JsonProperty("_environmentId") String environmentId,
            @JsonProperty("_id") Optional<? extends String> id,
            @JsonProperty("_jobId") String jobId,
            @JsonProperty("_messageId") Optional<? extends String> messageId,
            @JsonProperty("_notificationId") String notificationId,
            @JsonProperty("_notificationTemplateId") String notificationTemplateId,
            @JsonProperty("_organizationId") String organizationId,
            @JsonProperty("_subscriberId") String subscriberId,
            @JsonProperty("channel") ExecutionDetailsResponseDtoChannel channel,
            @JsonProperty("createdAt") Optional<? extends String> createdAt,
            @JsonProperty("detail") String detail,
            @JsonProperty("isRetry") boolean isRetry,
            @JsonProperty("isTest") boolean isTest,
            @JsonProperty("providerId") Optional<? extends String> providerId,
            @JsonProperty("source") ExecutionDetailsResponseDtoSource source,
            @JsonProperty("status") ExecutionDetailsResponseDtoStatus status,
            @JsonProperty("transactionId") String transactionId) {
        Utils.checkNotNull(environmentId, "environmentId");
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(jobId, "jobId");
        Utils.checkNotNull(messageId, "messageId");
        Utils.checkNotNull(notificationId, "notificationId");
        Utils.checkNotNull(notificationTemplateId, "notificationTemplateId");
        Utils.checkNotNull(organizationId, "organizationId");
        Utils.checkNotNull(subscriberId, "subscriberId");
        Utils.checkNotNull(channel, "channel");
        Utils.checkNotNull(createdAt, "createdAt");
        Utils.checkNotNull(detail, "detail");
        Utils.checkNotNull(isRetry, "isRetry");
        Utils.checkNotNull(isTest, "isTest");
        Utils.checkNotNull(providerId, "providerId");
        Utils.checkNotNull(source, "source");
        Utils.checkNotNull(status, "status");
        Utils.checkNotNull(transactionId, "transactionId");
        this.environmentId = environmentId;
        this.id = id;
        this.jobId = jobId;
        this.messageId = messageId;
        this.notificationId = notificationId;
        this.notificationTemplateId = notificationTemplateId;
        this.organizationId = organizationId;
        this.subscriberId = subscriberId;
        this.channel = channel;
        this.createdAt = createdAt;
        this.detail = detail;
        this.isRetry = isRetry;
        this.isTest = isTest;
        this.providerId = providerId;
        this.source = source;
        this.status = status;
        this.transactionId = transactionId;
    }
    
    public ExecutionDetailsResponseDto(
            String environmentId,
            String jobId,
            String notificationId,
            String notificationTemplateId,
            String organizationId,
            String subscriberId,
            ExecutionDetailsResponseDtoChannel channel,
            String detail,
            boolean isRetry,
            boolean isTest,
            ExecutionDetailsResponseDtoSource source,
            ExecutionDetailsResponseDtoStatus status,
            String transactionId) {
        this(environmentId, Optional.empty(), jobId, Optional.empty(), notificationId, notificationTemplateId, organizationId, subscriberId, channel, Optional.empty(), detail, isRetry, isTest, Optional.empty(), source, status, transactionId);
    }

    @JsonIgnore
    public String environmentId() {
        return environmentId;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> id() {
        return (Optional<String>) id;
    }

    @JsonIgnore
    public String jobId() {
        return jobId;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> messageId() {
        return (Optional<String>) messageId;
    }

    @JsonIgnore
    public String notificationId() {
        return notificationId;
    }

    @JsonIgnore
    public String notificationTemplateId() {
        return notificationTemplateId;
    }

    @JsonIgnore
    public String organizationId() {
        return organizationId;
    }

    @JsonIgnore
    public String subscriberId() {
        return subscriberId;
    }

    @JsonIgnore
    public ExecutionDetailsResponseDtoChannel channel() {
        return channel;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> createdAt() {
        return (Optional<String>) createdAt;
    }

    @JsonIgnore
    public String detail() {
        return detail;
    }

    @JsonIgnore
    public boolean isRetry() {
        return isRetry;
    }

    @JsonIgnore
    public boolean isTest() {
        return isTest;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> providerId() {
        return (Optional<String>) providerId;
    }

    @JsonIgnore
    public ExecutionDetailsResponseDtoSource source() {
        return source;
    }

    @JsonIgnore
    public ExecutionDetailsResponseDtoStatus status() {
        return status;
    }

    @JsonIgnore
    public String transactionId() {
        return transactionId;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public ExecutionDetailsResponseDto withEnvironmentId(String environmentId) {
        Utils.checkNotNull(environmentId, "environmentId");
        this.environmentId = environmentId;
        return this;
    }

    public ExecutionDetailsResponseDto withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = Optional.ofNullable(id);
        return this;
    }

    public ExecutionDetailsResponseDto withId(Optional<? extends String> id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    public ExecutionDetailsResponseDto withJobId(String jobId) {
        Utils.checkNotNull(jobId, "jobId");
        this.jobId = jobId;
        return this;
    }

    public ExecutionDetailsResponseDto withMessageId(String messageId) {
        Utils.checkNotNull(messageId, "messageId");
        this.messageId = Optional.ofNullable(messageId);
        return this;
    }

    public ExecutionDetailsResponseDto withMessageId(Optional<? extends String> messageId) {
        Utils.checkNotNull(messageId, "messageId");
        this.messageId = messageId;
        return this;
    }

    public ExecutionDetailsResponseDto withNotificationId(String notificationId) {
        Utils.checkNotNull(notificationId, "notificationId");
        this.notificationId = notificationId;
        return this;
    }

    public ExecutionDetailsResponseDto withNotificationTemplateId(String notificationTemplateId) {
        Utils.checkNotNull(notificationTemplateId, "notificationTemplateId");
        this.notificationTemplateId = notificationTemplateId;
        return this;
    }

    public ExecutionDetailsResponseDto withOrganizationId(String organizationId) {
        Utils.checkNotNull(organizationId, "organizationId");
        this.organizationId = organizationId;
        return this;
    }

    public ExecutionDetailsResponseDto withSubscriberId(String subscriberId) {
        Utils.checkNotNull(subscriberId, "subscriberId");
        this.subscriberId = subscriberId;
        return this;
    }

    public ExecutionDetailsResponseDto withChannel(ExecutionDetailsResponseDtoChannel channel) {
        Utils.checkNotNull(channel, "channel");
        this.channel = channel;
        return this;
    }

    public ExecutionDetailsResponseDto withCreatedAt(String createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = Optional.ofNullable(createdAt);
        return this;
    }

    public ExecutionDetailsResponseDto withCreatedAt(Optional<? extends String> createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = createdAt;
        return this;
    }

    public ExecutionDetailsResponseDto withDetail(String detail) {
        Utils.checkNotNull(detail, "detail");
        this.detail = detail;
        return this;
    }

    public ExecutionDetailsResponseDto withIsRetry(boolean isRetry) {
        Utils.checkNotNull(isRetry, "isRetry");
        this.isRetry = isRetry;
        return this;
    }

    public ExecutionDetailsResponseDto withIsTest(boolean isTest) {
        Utils.checkNotNull(isTest, "isTest");
        this.isTest = isTest;
        return this;
    }

    public ExecutionDetailsResponseDto withProviderId(String providerId) {
        Utils.checkNotNull(providerId, "providerId");
        this.providerId = Optional.ofNullable(providerId);
        return this;
    }

    public ExecutionDetailsResponseDto withProviderId(Optional<? extends String> providerId) {
        Utils.checkNotNull(providerId, "providerId");
        this.providerId = providerId;
        return this;
    }

    public ExecutionDetailsResponseDto withSource(ExecutionDetailsResponseDtoSource source) {
        Utils.checkNotNull(source, "source");
        this.source = source;
        return this;
    }

    public ExecutionDetailsResponseDto withStatus(ExecutionDetailsResponseDtoStatus status) {
        Utils.checkNotNull(status, "status");
        this.status = status;
        return this;
    }

    public ExecutionDetailsResponseDto withTransactionId(String transactionId) {
        Utils.checkNotNull(transactionId, "transactionId");
        this.transactionId = transactionId;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ExecutionDetailsResponseDto other = (ExecutionDetailsResponseDto) o;
        return 
            java.util.Objects.deepEquals(this.environmentId, other.environmentId) &&
            java.util.Objects.deepEquals(this.id, other.id) &&
            java.util.Objects.deepEquals(this.jobId, other.jobId) &&
            java.util.Objects.deepEquals(this.messageId, other.messageId) &&
            java.util.Objects.deepEquals(this.notificationId, other.notificationId) &&
            java.util.Objects.deepEquals(this.notificationTemplateId, other.notificationTemplateId) &&
            java.util.Objects.deepEquals(this.organizationId, other.organizationId) &&
            java.util.Objects.deepEquals(this.subscriberId, other.subscriberId) &&
            java.util.Objects.deepEquals(this.channel, other.channel) &&
            java.util.Objects.deepEquals(this.createdAt, other.createdAt) &&
            java.util.Objects.deepEquals(this.detail, other.detail) &&
            java.util.Objects.deepEquals(this.isRetry, other.isRetry) &&
            java.util.Objects.deepEquals(this.isTest, other.isTest) &&
            java.util.Objects.deepEquals(this.providerId, other.providerId) &&
            java.util.Objects.deepEquals(this.source, other.source) &&
            java.util.Objects.deepEquals(this.status, other.status) &&
            java.util.Objects.deepEquals(this.transactionId, other.transactionId);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            environmentId,
            id,
            jobId,
            messageId,
            notificationId,
            notificationTemplateId,
            organizationId,
            subscriberId,
            channel,
            createdAt,
            detail,
            isRetry,
            isTest,
            providerId,
            source,
            status,
            transactionId);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ExecutionDetailsResponseDto.class,
                "environmentId", environmentId,
                "id", id,
                "jobId", jobId,
                "messageId", messageId,
                "notificationId", notificationId,
                "notificationTemplateId", notificationTemplateId,
                "organizationId", organizationId,
                "subscriberId", subscriberId,
                "channel", channel,
                "createdAt", createdAt,
                "detail", detail,
                "isRetry", isRetry,
                "isTest", isTest,
                "providerId", providerId,
                "source", source,
                "status", status,
                "transactionId", transactionId);
    }
    
    public final static class Builder {
 
        private String environmentId;
 
        private Optional<? extends String> id = Optional.empty();
 
        private String jobId;
 
        private Optional<? extends String> messageId = Optional.empty();
 
        private String notificationId;
 
        private String notificationTemplateId;
 
        private String organizationId;
 
        private String subscriberId;
 
        private ExecutionDetailsResponseDtoChannel channel;
 
        private Optional<? extends String> createdAt = Optional.empty();
 
        private String detail;
 
        private Boolean isRetry;
 
        private Boolean isTest;
 
        private Optional<? extends String> providerId = Optional.empty();
 
        private ExecutionDetailsResponseDtoSource source;
 
        private ExecutionDetailsResponseDtoStatus status;
 
        private String transactionId;  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder environmentId(String environmentId) {
            Utils.checkNotNull(environmentId, "environmentId");
            this.environmentId = environmentId;
            return this;
        }

        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = Optional.ofNullable(id);
            return this;
        }

        public Builder id(Optional<? extends String> id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        public Builder jobId(String jobId) {
            Utils.checkNotNull(jobId, "jobId");
            this.jobId = jobId;
            return this;
        }

        public Builder messageId(String messageId) {
            Utils.checkNotNull(messageId, "messageId");
            this.messageId = Optional.ofNullable(messageId);
            return this;
        }

        public Builder messageId(Optional<? extends String> messageId) {
            Utils.checkNotNull(messageId, "messageId");
            this.messageId = messageId;
            return this;
        }

        public Builder notificationId(String notificationId) {
            Utils.checkNotNull(notificationId, "notificationId");
            this.notificationId = notificationId;
            return this;
        }

        public Builder notificationTemplateId(String notificationTemplateId) {
            Utils.checkNotNull(notificationTemplateId, "notificationTemplateId");
            this.notificationTemplateId = notificationTemplateId;
            return this;
        }

        public Builder organizationId(String organizationId) {
            Utils.checkNotNull(organizationId, "organizationId");
            this.organizationId = organizationId;
            return this;
        }

        public Builder subscriberId(String subscriberId) {
            Utils.checkNotNull(subscriberId, "subscriberId");
            this.subscriberId = subscriberId;
            return this;
        }

        public Builder channel(ExecutionDetailsResponseDtoChannel channel) {
            Utils.checkNotNull(channel, "channel");
            this.channel = channel;
            return this;
        }

        public Builder createdAt(String createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = Optional.ofNullable(createdAt);
            return this;
        }

        public Builder createdAt(Optional<? extends String> createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = createdAt;
            return this;
        }

        public Builder detail(String detail) {
            Utils.checkNotNull(detail, "detail");
            this.detail = detail;
            return this;
        }

        public Builder isRetry(boolean isRetry) {
            Utils.checkNotNull(isRetry, "isRetry");
            this.isRetry = isRetry;
            return this;
        }

        public Builder isTest(boolean isTest) {
            Utils.checkNotNull(isTest, "isTest");
            this.isTest = isTest;
            return this;
        }

        public Builder providerId(String providerId) {
            Utils.checkNotNull(providerId, "providerId");
            this.providerId = Optional.ofNullable(providerId);
            return this;
        }

        public Builder providerId(Optional<? extends String> providerId) {
            Utils.checkNotNull(providerId, "providerId");
            this.providerId = providerId;
            return this;
        }

        public Builder source(ExecutionDetailsResponseDtoSource source) {
            Utils.checkNotNull(source, "source");
            this.source = source;
            return this;
        }

        public Builder status(ExecutionDetailsResponseDtoStatus status) {
            Utils.checkNotNull(status, "status");
            this.status = status;
            return this;
        }

        public Builder transactionId(String transactionId) {
            Utils.checkNotNull(transactionId, "transactionId");
            this.transactionId = transactionId;
            return this;
        }
        
        public ExecutionDetailsResponseDto build() {
            return new ExecutionDetailsResponseDto(
                environmentId,
                id,
                jobId,
                messageId,
                notificationId,
                notificationTemplateId,
                organizationId,
                subscriberId,
                channel,
                createdAt,
                detail,
                isRetry,
                isTest,
                providerId,
                source,
                status,
                transactionId);
        }
    }
}

