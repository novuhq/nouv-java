/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package co.novu.co.novu.sdk.models.components;

import co.novu.co.novu.sdk.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.time.OffsetDateTime;
import java.util.Optional;

public class MemberInviteDTO {

    @JsonProperty("_inviterId")
    private String inviterId;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("answerDate")
    private Optional<? extends OffsetDateTime> answerDate;

    @JsonProperty("email")
    private String email;

    @JsonProperty("invitationDate")
    private OffsetDateTime invitationDate;

    @JsonProperty("token")
    private String token;

    @JsonCreator
    public MemberInviteDTO(
            @JsonProperty("_inviterId") String inviterId,
            @JsonProperty("answerDate") Optional<? extends OffsetDateTime> answerDate,
            @JsonProperty("email") String email,
            @JsonProperty("invitationDate") OffsetDateTime invitationDate,
            @JsonProperty("token") String token) {
        Utils.checkNotNull(inviterId, "inviterId");
        Utils.checkNotNull(answerDate, "answerDate");
        Utils.checkNotNull(email, "email");
        Utils.checkNotNull(invitationDate, "invitationDate");
        Utils.checkNotNull(token, "token");
        this.inviterId = inviterId;
        this.answerDate = answerDate;
        this.email = email;
        this.invitationDate = invitationDate;
        this.token = token;
    }
    
    public MemberInviteDTO(
            String inviterId,
            String email,
            OffsetDateTime invitationDate,
            String token) {
        this(inviterId, Optional.empty(), email, invitationDate, token);
    }

    @JsonIgnore
    public String inviterId() {
        return inviterId;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<OffsetDateTime> answerDate() {
        return (Optional<OffsetDateTime>) answerDate;
    }

    @JsonIgnore
    public String email() {
        return email;
    }

    @JsonIgnore
    public OffsetDateTime invitationDate() {
        return invitationDate;
    }

    @JsonIgnore
    public String token() {
        return token;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public MemberInviteDTO withInviterId(String inviterId) {
        Utils.checkNotNull(inviterId, "inviterId");
        this.inviterId = inviterId;
        return this;
    }

    public MemberInviteDTO withAnswerDate(OffsetDateTime answerDate) {
        Utils.checkNotNull(answerDate, "answerDate");
        this.answerDate = Optional.ofNullable(answerDate);
        return this;
    }

    public MemberInviteDTO withAnswerDate(Optional<? extends OffsetDateTime> answerDate) {
        Utils.checkNotNull(answerDate, "answerDate");
        this.answerDate = answerDate;
        return this;
    }

    public MemberInviteDTO withEmail(String email) {
        Utils.checkNotNull(email, "email");
        this.email = email;
        return this;
    }

    public MemberInviteDTO withInvitationDate(OffsetDateTime invitationDate) {
        Utils.checkNotNull(invitationDate, "invitationDate");
        this.invitationDate = invitationDate;
        return this;
    }

    public MemberInviteDTO withToken(String token) {
        Utils.checkNotNull(token, "token");
        this.token = token;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        MemberInviteDTO other = (MemberInviteDTO) o;
        return 
            java.util.Objects.deepEquals(this.inviterId, other.inviterId) &&
            java.util.Objects.deepEquals(this.answerDate, other.answerDate) &&
            java.util.Objects.deepEquals(this.email, other.email) &&
            java.util.Objects.deepEquals(this.invitationDate, other.invitationDate) &&
            java.util.Objects.deepEquals(this.token, other.token);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            inviterId,
            answerDate,
            email,
            invitationDate,
            token);
    }
    
    @Override
    public String toString() {
        return Utils.toString(MemberInviteDTO.class,
                "inviterId", inviterId,
                "answerDate", answerDate,
                "email", email,
                "invitationDate", invitationDate,
                "token", token);
    }
    
    public final static class Builder {
 
        private String inviterId;
 
        private Optional<? extends OffsetDateTime> answerDate = Optional.empty();
 
        private String email;
 
        private OffsetDateTime invitationDate;
 
        private String token;  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder inviterId(String inviterId) {
            Utils.checkNotNull(inviterId, "inviterId");
            this.inviterId = inviterId;
            return this;
        }

        public Builder answerDate(OffsetDateTime answerDate) {
            Utils.checkNotNull(answerDate, "answerDate");
            this.answerDate = Optional.ofNullable(answerDate);
            return this;
        }

        public Builder answerDate(Optional<? extends OffsetDateTime> answerDate) {
            Utils.checkNotNull(answerDate, "answerDate");
            this.answerDate = answerDate;
            return this;
        }

        public Builder email(String email) {
            Utils.checkNotNull(email, "email");
            this.email = email;
            return this;
        }

        public Builder invitationDate(OffsetDateTime invitationDate) {
            Utils.checkNotNull(invitationDate, "invitationDate");
            this.invitationDate = invitationDate;
            return this;
        }

        public Builder token(String token) {
            Utils.checkNotNull(token, "token");
            this.token = token;
            return this;
        }
        
        public MemberInviteDTO build() {
            return new MemberInviteDTO(
                inviterId,
                answerDate,
                email,
                invitationDate,
                token);
        }
    }
}

