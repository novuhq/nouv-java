/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package co.novu.co.novu.sdk.models.components;

import co.novu.co.novu.sdk.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;

public class CreateWorkflowRequestDto {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("active")
    private Optional<? extends Boolean> active;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("blueprintId")
    private Optional<? extends String> blueprintId;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("critical")
    private Optional<? extends Boolean> critical;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("data")
    private Optional<? extends CreateWorkflowRequestDtoData> data;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    private Optional<? extends String> description;

    /**
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("draft")
    @Deprecated
    private Optional<? extends Boolean> draft;

    @JsonProperty("name")
    private String name;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("notificationGroup")
    private Optional<? extends CreateWorkflowRequestDtoNotificationGroup> notificationGroup;

    @JsonProperty("notificationGroupId")
    private String notificationGroupId;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("preferenceSettings")
    private Optional<? extends PreferenceChannels> preferenceSettings;

    @JsonProperty("steps")
    private java.util.List<NotificationStep> steps;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tags")
    private Optional<? extends java.util.List<String>> tags;

    @JsonCreator
    public CreateWorkflowRequestDto(
            @JsonProperty("active") Optional<? extends Boolean> active,
            @JsonProperty("blueprintId") Optional<? extends String> blueprintId,
            @JsonProperty("critical") Optional<? extends Boolean> critical,
            @JsonProperty("data") Optional<? extends CreateWorkflowRequestDtoData> data,
            @JsonProperty("description") Optional<? extends String> description,
            @JsonProperty("draft") Optional<? extends Boolean> draft,
            @JsonProperty("name") String name,
            @JsonProperty("notificationGroup") Optional<? extends CreateWorkflowRequestDtoNotificationGroup> notificationGroup,
            @JsonProperty("notificationGroupId") String notificationGroupId,
            @JsonProperty("preferenceSettings") Optional<? extends PreferenceChannels> preferenceSettings,
            @JsonProperty("steps") java.util.List<NotificationStep> steps,
            @JsonProperty("tags") Optional<? extends java.util.List<String>> tags) {
        Utils.checkNotNull(active, "active");
        Utils.checkNotNull(blueprintId, "blueprintId");
        Utils.checkNotNull(critical, "critical");
        Utils.checkNotNull(data, "data");
        Utils.checkNotNull(description, "description");
        Utils.checkNotNull(draft, "draft");
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(notificationGroup, "notificationGroup");
        Utils.checkNotNull(notificationGroupId, "notificationGroupId");
        Utils.checkNotNull(preferenceSettings, "preferenceSettings");
        Utils.checkNotNull(steps, "steps");
        Utils.checkNotNull(tags, "tags");
        this.active = active;
        this.blueprintId = blueprintId;
        this.critical = critical;
        this.data = data;
        this.description = description;
        this.draft = draft;
        this.name = name;
        this.notificationGroup = notificationGroup;
        this.notificationGroupId = notificationGroupId;
        this.preferenceSettings = preferenceSettings;
        this.steps = steps;
        this.tags = tags;
    }
    
    public CreateWorkflowRequestDto(
            String name,
            String notificationGroupId,
            java.util.List<NotificationStep> steps) {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), name, Optional.empty(), notificationGroupId, Optional.empty(), steps, Optional.empty());
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Boolean> active() {
        return (Optional<Boolean>) active;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> blueprintId() {
        return (Optional<String>) blueprintId;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Boolean> critical() {
        return (Optional<Boolean>) critical;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<CreateWorkflowRequestDtoData> data() {
        return (Optional<CreateWorkflowRequestDtoData>) data;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> description() {
        return (Optional<String>) description;
    }

    /**
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Boolean> draft() {
        return (Optional<Boolean>) draft;
    }

    @JsonIgnore
    public String name() {
        return name;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<CreateWorkflowRequestDtoNotificationGroup> notificationGroup() {
        return (Optional<CreateWorkflowRequestDtoNotificationGroup>) notificationGroup;
    }

    @JsonIgnore
    public String notificationGroupId() {
        return notificationGroupId;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<PreferenceChannels> preferenceSettings() {
        return (Optional<PreferenceChannels>) preferenceSettings;
    }

    @JsonIgnore
    public java.util.List<NotificationStep> steps() {
        return steps;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<java.util.List<String>> tags() {
        return (Optional<java.util.List<String>>) tags;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public CreateWorkflowRequestDto withActive(boolean active) {
        Utils.checkNotNull(active, "active");
        this.active = Optional.ofNullable(active);
        return this;
    }

    public CreateWorkflowRequestDto withActive(Optional<? extends Boolean> active) {
        Utils.checkNotNull(active, "active");
        this.active = active;
        return this;
    }

    public CreateWorkflowRequestDto withBlueprintId(String blueprintId) {
        Utils.checkNotNull(blueprintId, "blueprintId");
        this.blueprintId = Optional.ofNullable(blueprintId);
        return this;
    }

    public CreateWorkflowRequestDto withBlueprintId(Optional<? extends String> blueprintId) {
        Utils.checkNotNull(blueprintId, "blueprintId");
        this.blueprintId = blueprintId;
        return this;
    }

    public CreateWorkflowRequestDto withCritical(boolean critical) {
        Utils.checkNotNull(critical, "critical");
        this.critical = Optional.ofNullable(critical);
        return this;
    }

    public CreateWorkflowRequestDto withCritical(Optional<? extends Boolean> critical) {
        Utils.checkNotNull(critical, "critical");
        this.critical = critical;
        return this;
    }

    public CreateWorkflowRequestDto withData(CreateWorkflowRequestDtoData data) {
        Utils.checkNotNull(data, "data");
        this.data = Optional.ofNullable(data);
        return this;
    }

    public CreateWorkflowRequestDto withData(Optional<? extends CreateWorkflowRequestDtoData> data) {
        Utils.checkNotNull(data, "data");
        this.data = data;
        return this;
    }

    public CreateWorkflowRequestDto withDescription(String description) {
        Utils.checkNotNull(description, "description");
        this.description = Optional.ofNullable(description);
        return this;
    }

    public CreateWorkflowRequestDto withDescription(Optional<? extends String> description) {
        Utils.checkNotNull(description, "description");
        this.description = description;
        return this;
    }

    /**
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public CreateWorkflowRequestDto withDraft(boolean draft) {
        Utils.checkNotNull(draft, "draft");
        this.draft = Optional.ofNullable(draft);
        return this;
    }

    /**
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public CreateWorkflowRequestDto withDraft(Optional<? extends Boolean> draft) {
        Utils.checkNotNull(draft, "draft");
        this.draft = draft;
        return this;
    }

    public CreateWorkflowRequestDto withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    public CreateWorkflowRequestDto withNotificationGroup(CreateWorkflowRequestDtoNotificationGroup notificationGroup) {
        Utils.checkNotNull(notificationGroup, "notificationGroup");
        this.notificationGroup = Optional.ofNullable(notificationGroup);
        return this;
    }

    public CreateWorkflowRequestDto withNotificationGroup(Optional<? extends CreateWorkflowRequestDtoNotificationGroup> notificationGroup) {
        Utils.checkNotNull(notificationGroup, "notificationGroup");
        this.notificationGroup = notificationGroup;
        return this;
    }

    public CreateWorkflowRequestDto withNotificationGroupId(String notificationGroupId) {
        Utils.checkNotNull(notificationGroupId, "notificationGroupId");
        this.notificationGroupId = notificationGroupId;
        return this;
    }

    public CreateWorkflowRequestDto withPreferenceSettings(PreferenceChannels preferenceSettings) {
        Utils.checkNotNull(preferenceSettings, "preferenceSettings");
        this.preferenceSettings = Optional.ofNullable(preferenceSettings);
        return this;
    }

    public CreateWorkflowRequestDto withPreferenceSettings(Optional<? extends PreferenceChannels> preferenceSettings) {
        Utils.checkNotNull(preferenceSettings, "preferenceSettings");
        this.preferenceSettings = preferenceSettings;
        return this;
    }

    public CreateWorkflowRequestDto withSteps(java.util.List<NotificationStep> steps) {
        Utils.checkNotNull(steps, "steps");
        this.steps = steps;
        return this;
    }

    public CreateWorkflowRequestDto withTags(java.util.List<String> tags) {
        Utils.checkNotNull(tags, "tags");
        this.tags = Optional.ofNullable(tags);
        return this;
    }

    public CreateWorkflowRequestDto withTags(Optional<? extends java.util.List<String>> tags) {
        Utils.checkNotNull(tags, "tags");
        this.tags = tags;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CreateWorkflowRequestDto other = (CreateWorkflowRequestDto) o;
        return 
            java.util.Objects.deepEquals(this.active, other.active) &&
            java.util.Objects.deepEquals(this.blueprintId, other.blueprintId) &&
            java.util.Objects.deepEquals(this.critical, other.critical) &&
            java.util.Objects.deepEquals(this.data, other.data) &&
            java.util.Objects.deepEquals(this.description, other.description) &&
            java.util.Objects.deepEquals(this.draft, other.draft) &&
            java.util.Objects.deepEquals(this.name, other.name) &&
            java.util.Objects.deepEquals(this.notificationGroup, other.notificationGroup) &&
            java.util.Objects.deepEquals(this.notificationGroupId, other.notificationGroupId) &&
            java.util.Objects.deepEquals(this.preferenceSettings, other.preferenceSettings) &&
            java.util.Objects.deepEquals(this.steps, other.steps) &&
            java.util.Objects.deepEquals(this.tags, other.tags);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            active,
            blueprintId,
            critical,
            data,
            description,
            draft,
            name,
            notificationGroup,
            notificationGroupId,
            preferenceSettings,
            steps,
            tags);
    }
    
    @Override
    public String toString() {
        return Utils.toString(CreateWorkflowRequestDto.class,
                "active", active,
                "blueprintId", blueprintId,
                "critical", critical,
                "data", data,
                "description", description,
                "draft", draft,
                "name", name,
                "notificationGroup", notificationGroup,
                "notificationGroupId", notificationGroupId,
                "preferenceSettings", preferenceSettings,
                "steps", steps,
                "tags", tags);
    }
    
    public final static class Builder {
 
        private Optional<? extends Boolean> active = Optional.empty();
 
        private Optional<? extends String> blueprintId = Optional.empty();
 
        private Optional<? extends Boolean> critical = Optional.empty();
 
        private Optional<? extends CreateWorkflowRequestDtoData> data = Optional.empty();
 
        private Optional<? extends String> description = Optional.empty();
 
        @Deprecated
        private Optional<? extends Boolean> draft = Optional.empty();
 
        private String name;
 
        private Optional<? extends CreateWorkflowRequestDtoNotificationGroup> notificationGroup = Optional.empty();
 
        private String notificationGroupId;
 
        private Optional<? extends PreferenceChannels> preferenceSettings = Optional.empty();
 
        private java.util.List<NotificationStep> steps;
 
        private Optional<? extends java.util.List<String>> tags = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder active(boolean active) {
            Utils.checkNotNull(active, "active");
            this.active = Optional.ofNullable(active);
            return this;
        }

        public Builder active(Optional<? extends Boolean> active) {
            Utils.checkNotNull(active, "active");
            this.active = active;
            return this;
        }

        public Builder blueprintId(String blueprintId) {
            Utils.checkNotNull(blueprintId, "blueprintId");
            this.blueprintId = Optional.ofNullable(blueprintId);
            return this;
        }

        public Builder blueprintId(Optional<? extends String> blueprintId) {
            Utils.checkNotNull(blueprintId, "blueprintId");
            this.blueprintId = blueprintId;
            return this;
        }

        public Builder critical(boolean critical) {
            Utils.checkNotNull(critical, "critical");
            this.critical = Optional.ofNullable(critical);
            return this;
        }

        public Builder critical(Optional<? extends Boolean> critical) {
            Utils.checkNotNull(critical, "critical");
            this.critical = critical;
            return this;
        }

        public Builder data(CreateWorkflowRequestDtoData data) {
            Utils.checkNotNull(data, "data");
            this.data = Optional.ofNullable(data);
            return this;
        }

        public Builder data(Optional<? extends CreateWorkflowRequestDtoData> data) {
            Utils.checkNotNull(data, "data");
            this.data = data;
            return this;
        }

        public Builder description(String description) {
            Utils.checkNotNull(description, "description");
            this.description = Optional.ofNullable(description);
            return this;
        }

        public Builder description(Optional<? extends String> description) {
            Utils.checkNotNull(description, "description");
            this.description = description;
            return this;
        }

        /**
         * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
         */
        @Deprecated
        public Builder draft(boolean draft) {
            Utils.checkNotNull(draft, "draft");
            this.draft = Optional.ofNullable(draft);
            return this;
        }

        /**
         * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
         */
        @Deprecated
        public Builder draft(Optional<? extends Boolean> draft) {
            Utils.checkNotNull(draft, "draft");
            this.draft = draft;
            return this;
        }

        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }

        public Builder notificationGroup(CreateWorkflowRequestDtoNotificationGroup notificationGroup) {
            Utils.checkNotNull(notificationGroup, "notificationGroup");
            this.notificationGroup = Optional.ofNullable(notificationGroup);
            return this;
        }

        public Builder notificationGroup(Optional<? extends CreateWorkflowRequestDtoNotificationGroup> notificationGroup) {
            Utils.checkNotNull(notificationGroup, "notificationGroup");
            this.notificationGroup = notificationGroup;
            return this;
        }

        public Builder notificationGroupId(String notificationGroupId) {
            Utils.checkNotNull(notificationGroupId, "notificationGroupId");
            this.notificationGroupId = notificationGroupId;
            return this;
        }

        public Builder preferenceSettings(PreferenceChannels preferenceSettings) {
            Utils.checkNotNull(preferenceSettings, "preferenceSettings");
            this.preferenceSettings = Optional.ofNullable(preferenceSettings);
            return this;
        }

        public Builder preferenceSettings(Optional<? extends PreferenceChannels> preferenceSettings) {
            Utils.checkNotNull(preferenceSettings, "preferenceSettings");
            this.preferenceSettings = preferenceSettings;
            return this;
        }

        public Builder steps(java.util.List<NotificationStep> steps) {
            Utils.checkNotNull(steps, "steps");
            this.steps = steps;
            return this;
        }

        public Builder tags(java.util.List<String> tags) {
            Utils.checkNotNull(tags, "tags");
            this.tags = Optional.ofNullable(tags);
            return this;
        }

        public Builder tags(Optional<? extends java.util.List<String>> tags) {
            Utils.checkNotNull(tags, "tags");
            this.tags = tags;
            return this;
        }
        
        public CreateWorkflowRequestDto build() {
            return new CreateWorkflowRequestDto(
                active,
                blueprintId,
                critical,
                data,
                description,
                draft,
                name,
                notificationGroup,
                notificationGroupId,
                preferenceSettings,
                steps,
                tags);
        }
    }
}

