/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package co.novu.co.novu.sdk.models.operations;

import co.novu.co.novu.sdk.utils.SpeakeasyMetadata;
import co.novu.co.novu.sdk.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;

public class MessagesControllerDeleteMessagesByTransactionIdRequest {

    /**
     * The channel of the message to be deleted
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=channel")
    private Optional<? extends Channel> channel;

    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=transactionId")
    private String transactionId;

    @JsonCreator
    public MessagesControllerDeleteMessagesByTransactionIdRequest(
            Optional<? extends Channel> channel,
            String transactionId) {
        Utils.checkNotNull(channel, "channel");
        Utils.checkNotNull(transactionId, "transactionId");
        this.channel = channel;
        this.transactionId = transactionId;
    }
    
    public MessagesControllerDeleteMessagesByTransactionIdRequest(
            String transactionId) {
        this(Optional.empty(), transactionId);
    }

    /**
     * The channel of the message to be deleted
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Channel> channel() {
        return (Optional<Channel>) channel;
    }

    @JsonIgnore
    public String transactionId() {
        return transactionId;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * The channel of the message to be deleted
     */
    public MessagesControllerDeleteMessagesByTransactionIdRequest withChannel(Channel channel) {
        Utils.checkNotNull(channel, "channel");
        this.channel = Optional.ofNullable(channel);
        return this;
    }

    /**
     * The channel of the message to be deleted
     */
    public MessagesControllerDeleteMessagesByTransactionIdRequest withChannel(Optional<? extends Channel> channel) {
        Utils.checkNotNull(channel, "channel");
        this.channel = channel;
        return this;
    }

    public MessagesControllerDeleteMessagesByTransactionIdRequest withTransactionId(String transactionId) {
        Utils.checkNotNull(transactionId, "transactionId");
        this.transactionId = transactionId;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        MessagesControllerDeleteMessagesByTransactionIdRequest other = (MessagesControllerDeleteMessagesByTransactionIdRequest) o;
        return 
            java.util.Objects.deepEquals(this.channel, other.channel) &&
            java.util.Objects.deepEquals(this.transactionId, other.transactionId);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            channel,
            transactionId);
    }
    
    @Override
    public String toString() {
        return Utils.toString(MessagesControllerDeleteMessagesByTransactionIdRequest.class,
                "channel", channel,
                "transactionId", transactionId);
    }
    
    public final static class Builder {
 
        private Optional<? extends Channel> channel = Optional.empty();
 
        private String transactionId;  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The channel of the message to be deleted
         */
        public Builder channel(Channel channel) {
            Utils.checkNotNull(channel, "channel");
            this.channel = Optional.ofNullable(channel);
            return this;
        }

        /**
         * The channel of the message to be deleted
         */
        public Builder channel(Optional<? extends Channel> channel) {
            Utils.checkNotNull(channel, "channel");
            this.channel = channel;
            return this;
        }

        public Builder transactionId(String transactionId) {
            Utils.checkNotNull(transactionId, "transactionId");
            this.transactionId = transactionId;
            return this;
        }
        
        public MessagesControllerDeleteMessagesByTransactionIdRequest build() {
            return new MessagesControllerDeleteMessagesByTransactionIdRequest(
                channel,
                transactionId);
        }
    }
}

