/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package co.novu.co.novu.sdk.models.components;

import co.novu.co.novu.sdk.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;

public class UpdateSubscriberPreferenceRequestDto {

    /**
     * The subscriber preferences for every ChannelTypeEnum for the workflow assigned.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("channel")
    private Optional<? extends ChannelPreference> channel;

    /**
     * Sets if the workflow is fully enabled for all channels or not for the subscriber.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("enabled")
    private Optional<? extends Boolean> enabled;

    @JsonCreator
    public UpdateSubscriberPreferenceRequestDto(
            @JsonProperty("channel") Optional<? extends ChannelPreference> channel,
            @JsonProperty("enabled") Optional<? extends Boolean> enabled) {
        Utils.checkNotNull(channel, "channel");
        Utils.checkNotNull(enabled, "enabled");
        this.channel = channel;
        this.enabled = enabled;
    }
    
    public UpdateSubscriberPreferenceRequestDto() {
        this(Optional.empty(), Optional.empty());
    }

    /**
     * The subscriber preferences for every ChannelTypeEnum for the workflow assigned.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<ChannelPreference> channel() {
        return (Optional<ChannelPreference>) channel;
    }

    /**
     * Sets if the workflow is fully enabled for all channels or not for the subscriber.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Boolean> enabled() {
        return (Optional<Boolean>) enabled;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * The subscriber preferences for every ChannelTypeEnum for the workflow assigned.
     */
    public UpdateSubscriberPreferenceRequestDto withChannel(ChannelPreference channel) {
        Utils.checkNotNull(channel, "channel");
        this.channel = Optional.ofNullable(channel);
        return this;
    }

    /**
     * The subscriber preferences for every ChannelTypeEnum for the workflow assigned.
     */
    public UpdateSubscriberPreferenceRequestDto withChannel(Optional<? extends ChannelPreference> channel) {
        Utils.checkNotNull(channel, "channel");
        this.channel = channel;
        return this;
    }

    /**
     * Sets if the workflow is fully enabled for all channels or not for the subscriber.
     */
    public UpdateSubscriberPreferenceRequestDto withEnabled(boolean enabled) {
        Utils.checkNotNull(enabled, "enabled");
        this.enabled = Optional.ofNullable(enabled);
        return this;
    }

    /**
     * Sets if the workflow is fully enabled for all channels or not for the subscriber.
     */
    public UpdateSubscriberPreferenceRequestDto withEnabled(Optional<? extends Boolean> enabled) {
        Utils.checkNotNull(enabled, "enabled");
        this.enabled = enabled;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        UpdateSubscriberPreferenceRequestDto other = (UpdateSubscriberPreferenceRequestDto) o;
        return 
            java.util.Objects.deepEquals(this.channel, other.channel) &&
            java.util.Objects.deepEquals(this.enabled, other.enabled);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            channel,
            enabled);
    }
    
    @Override
    public String toString() {
        return Utils.toString(UpdateSubscriberPreferenceRequestDto.class,
                "channel", channel,
                "enabled", enabled);
    }
    
    public final static class Builder {
 
        private Optional<? extends ChannelPreference> channel = Optional.empty();
 
        private Optional<? extends Boolean> enabled = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The subscriber preferences for every ChannelTypeEnum for the workflow assigned.
         */
        public Builder channel(ChannelPreference channel) {
            Utils.checkNotNull(channel, "channel");
            this.channel = Optional.ofNullable(channel);
            return this;
        }

        /**
         * The subscriber preferences for every ChannelTypeEnum for the workflow assigned.
         */
        public Builder channel(Optional<? extends ChannelPreference> channel) {
            Utils.checkNotNull(channel, "channel");
            this.channel = channel;
            return this;
        }

        /**
         * Sets if the workflow is fully enabled for all channels or not for the subscriber.
         */
        public Builder enabled(boolean enabled) {
            Utils.checkNotNull(enabled, "enabled");
            this.enabled = Optional.ofNullable(enabled);
            return this;
        }

        /**
         * Sets if the workflow is fully enabled for all channels or not for the subscriber.
         */
        public Builder enabled(Optional<? extends Boolean> enabled) {
            Utils.checkNotNull(enabled, "enabled");
            this.enabled = enabled;
            return this;
        }
        
        public UpdateSubscriberPreferenceRequestDto build() {
            return new UpdateSubscriberPreferenceRequestDto(
                channel,
                enabled);
        }
    }
}

