/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package co.novu.co.novu.sdk.models.components;

import co.novu.co.novu.sdk.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;

public class GetTenantResponseDto {

    @JsonProperty("_environmentId")
    private String environmentId;

    @JsonProperty("_id")
    private String id;

    @JsonProperty("createdAt")
    private String createdAt;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("data")
    private Optional<? extends GetTenantResponseDtoData> data;

    @JsonProperty("identifier")
    private String identifier;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    private Optional<? extends String> name;

    @JsonProperty("updatedAt")
    private String updatedAt;

    @JsonCreator
    public GetTenantResponseDto(
            @JsonProperty("_environmentId") String environmentId,
            @JsonProperty("_id") String id,
            @JsonProperty("createdAt") String createdAt,
            @JsonProperty("data") Optional<? extends GetTenantResponseDtoData> data,
            @JsonProperty("identifier") String identifier,
            @JsonProperty("name") Optional<? extends String> name,
            @JsonProperty("updatedAt") String updatedAt) {
        Utils.checkNotNull(environmentId, "environmentId");
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(createdAt, "createdAt");
        Utils.checkNotNull(data, "data");
        Utils.checkNotNull(identifier, "identifier");
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.environmentId = environmentId;
        this.id = id;
        this.createdAt = createdAt;
        this.data = data;
        this.identifier = identifier;
        this.name = name;
        this.updatedAt = updatedAt;
    }
    
    public GetTenantResponseDto(
            String environmentId,
            String id,
            String createdAt,
            String identifier,
            String updatedAt) {
        this(environmentId, id, createdAt, Optional.empty(), identifier, Optional.empty(), updatedAt);
    }

    @JsonIgnore
    public String environmentId() {
        return environmentId;
    }

    @JsonIgnore
    public String id() {
        return id;
    }

    @JsonIgnore
    public String createdAt() {
        return createdAt;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<GetTenantResponseDtoData> data() {
        return (Optional<GetTenantResponseDtoData>) data;
    }

    @JsonIgnore
    public String identifier() {
        return identifier;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> name() {
        return (Optional<String>) name;
    }

    @JsonIgnore
    public String updatedAt() {
        return updatedAt;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public GetTenantResponseDto withEnvironmentId(String environmentId) {
        Utils.checkNotNull(environmentId, "environmentId");
        this.environmentId = environmentId;
        return this;
    }

    public GetTenantResponseDto withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    public GetTenantResponseDto withCreatedAt(String createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = createdAt;
        return this;
    }

    public GetTenantResponseDto withData(GetTenantResponseDtoData data) {
        Utils.checkNotNull(data, "data");
        this.data = Optional.ofNullable(data);
        return this;
    }

    public GetTenantResponseDto withData(Optional<? extends GetTenantResponseDtoData> data) {
        Utils.checkNotNull(data, "data");
        this.data = data;
        return this;
    }

    public GetTenantResponseDto withIdentifier(String identifier) {
        Utils.checkNotNull(identifier, "identifier");
        this.identifier = identifier;
        return this;
    }

    public GetTenantResponseDto withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = Optional.ofNullable(name);
        return this;
    }

    public GetTenantResponseDto withName(Optional<? extends String> name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    public GetTenantResponseDto withUpdatedAt(String updatedAt) {
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.updatedAt = updatedAt;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GetTenantResponseDto other = (GetTenantResponseDto) o;
        return 
            java.util.Objects.deepEquals(this.environmentId, other.environmentId) &&
            java.util.Objects.deepEquals(this.id, other.id) &&
            java.util.Objects.deepEquals(this.createdAt, other.createdAt) &&
            java.util.Objects.deepEquals(this.data, other.data) &&
            java.util.Objects.deepEquals(this.identifier, other.identifier) &&
            java.util.Objects.deepEquals(this.name, other.name) &&
            java.util.Objects.deepEquals(this.updatedAt, other.updatedAt);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            environmentId,
            id,
            createdAt,
            data,
            identifier,
            name,
            updatedAt);
    }
    
    @Override
    public String toString() {
        return Utils.toString(GetTenantResponseDto.class,
                "environmentId", environmentId,
                "id", id,
                "createdAt", createdAt,
                "data", data,
                "identifier", identifier,
                "name", name,
                "updatedAt", updatedAt);
    }
    
    public final static class Builder {
 
        private String environmentId;
 
        private String id;
 
        private String createdAt;
 
        private Optional<? extends GetTenantResponseDtoData> data = Optional.empty();
 
        private String identifier;
 
        private Optional<? extends String> name = Optional.empty();
 
        private String updatedAt;  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder environmentId(String environmentId) {
            Utils.checkNotNull(environmentId, "environmentId");
            this.environmentId = environmentId;
            return this;
        }

        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        public Builder createdAt(String createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = createdAt;
            return this;
        }

        public Builder data(GetTenantResponseDtoData data) {
            Utils.checkNotNull(data, "data");
            this.data = Optional.ofNullable(data);
            return this;
        }

        public Builder data(Optional<? extends GetTenantResponseDtoData> data) {
            Utils.checkNotNull(data, "data");
            this.data = data;
            return this;
        }

        public Builder identifier(String identifier) {
            Utils.checkNotNull(identifier, "identifier");
            this.identifier = identifier;
            return this;
        }

        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = Optional.ofNullable(name);
            return this;
        }

        public Builder name(Optional<? extends String> name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }

        public Builder updatedAt(String updatedAt) {
            Utils.checkNotNull(updatedAt, "updatedAt");
            this.updatedAt = updatedAt;
            return this;
        }
        
        public GetTenantResponseDto build() {
            return new GetTenantResponseDto(
                environmentId,
                id,
                createdAt,
                data,
                identifier,
                name,
                updatedAt);
        }
    }
}

