/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package co.novu.co.novu.sdk.models.components;

import co.novu.co.novu.sdk.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;

public class ChangesResponseDto {

    @JsonProperty("data")
    private java.util.List<ChangeResponseDto> data;

    @JsonProperty("page")
    private double page;

    @JsonProperty("pageSize")
    private double pageSize;

    @JsonProperty("totalCount")
    private double totalCount;

    @JsonCreator
    public ChangesResponseDto(
            @JsonProperty("data") java.util.List<ChangeResponseDto> data,
            @JsonProperty("page") double page,
            @JsonProperty("pageSize") double pageSize,
            @JsonProperty("totalCount") double totalCount) {
        Utils.checkNotNull(data, "data");
        Utils.checkNotNull(page, "page");
        Utils.checkNotNull(pageSize, "pageSize");
        Utils.checkNotNull(totalCount, "totalCount");
        this.data = data;
        this.page = page;
        this.pageSize = pageSize;
        this.totalCount = totalCount;
    }

    @JsonIgnore
    public java.util.List<ChangeResponseDto> data() {
        return data;
    }

    @JsonIgnore
    public double page() {
        return page;
    }

    @JsonIgnore
    public double pageSize() {
        return pageSize;
    }

    @JsonIgnore
    public double totalCount() {
        return totalCount;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public ChangesResponseDto withData(java.util.List<ChangeResponseDto> data) {
        Utils.checkNotNull(data, "data");
        this.data = data;
        return this;
    }

    public ChangesResponseDto withPage(double page) {
        Utils.checkNotNull(page, "page");
        this.page = page;
        return this;
    }

    public ChangesResponseDto withPageSize(double pageSize) {
        Utils.checkNotNull(pageSize, "pageSize");
        this.pageSize = pageSize;
        return this;
    }

    public ChangesResponseDto withTotalCount(double totalCount) {
        Utils.checkNotNull(totalCount, "totalCount");
        this.totalCount = totalCount;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ChangesResponseDto other = (ChangesResponseDto) o;
        return 
            java.util.Objects.deepEquals(this.data, other.data) &&
            java.util.Objects.deepEquals(this.page, other.page) &&
            java.util.Objects.deepEquals(this.pageSize, other.pageSize) &&
            java.util.Objects.deepEquals(this.totalCount, other.totalCount);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            data,
            page,
            pageSize,
            totalCount);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ChangesResponseDto.class,
                "data", data,
                "page", page,
                "pageSize", pageSize,
                "totalCount", totalCount);
    }
    
    public final static class Builder {
 
        private java.util.List<ChangeResponseDto> data;
 
        private Double page;
 
        private Double pageSize;
 
        private Double totalCount;  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder data(java.util.List<ChangeResponseDto> data) {
            Utils.checkNotNull(data, "data");
            this.data = data;
            return this;
        }

        public Builder page(double page) {
            Utils.checkNotNull(page, "page");
            this.page = page;
            return this;
        }

        public Builder pageSize(double pageSize) {
            Utils.checkNotNull(pageSize, "pageSize");
            this.pageSize = pageSize;
            return this;
        }

        public Builder totalCount(double totalCount) {
            Utils.checkNotNull(totalCount, "totalCount");
            this.totalCount = totalCount;
            return this;
        }
        
        public ChangesResponseDto build() {
            return new ChangesResponseDto(
                data,
                page,
                pageSize,
                totalCount);
        }
    }
}

