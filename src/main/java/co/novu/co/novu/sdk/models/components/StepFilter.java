/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package co.novu.co.novu.sdk.models.components;

import co.novu.co.novu.sdk.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;

public class StepFilter {

    @JsonProperty("children")
    private java.util.List<FieldFilterPart> children;

    @JsonProperty("isNegated")
    private boolean isNegated;

    @JsonProperty("type")
    private StepFilterType type;

    @JsonProperty("value")
    private Value value;

    @JsonCreator
    public StepFilter(
            @JsonProperty("children") java.util.List<FieldFilterPart> children,
            @JsonProperty("isNegated") boolean isNegated,
            @JsonProperty("type") StepFilterType type,
            @JsonProperty("value") Value value) {
        Utils.checkNotNull(children, "children");
        Utils.checkNotNull(isNegated, "isNegated");
        Utils.checkNotNull(type, "type");
        Utils.checkNotNull(value, "value");
        this.children = children;
        this.isNegated = isNegated;
        this.type = type;
        this.value = value;
    }

    @JsonIgnore
    public java.util.List<FieldFilterPart> children() {
        return children;
    }

    @JsonIgnore
    public boolean isNegated() {
        return isNegated;
    }

    @JsonIgnore
    public StepFilterType type() {
        return type;
    }

    @JsonIgnore
    public Value value() {
        return value;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public StepFilter withChildren(java.util.List<FieldFilterPart> children) {
        Utils.checkNotNull(children, "children");
        this.children = children;
        return this;
    }

    public StepFilter withIsNegated(boolean isNegated) {
        Utils.checkNotNull(isNegated, "isNegated");
        this.isNegated = isNegated;
        return this;
    }

    public StepFilter withType(StepFilterType type) {
        Utils.checkNotNull(type, "type");
        this.type = type;
        return this;
    }

    public StepFilter withValue(Value value) {
        Utils.checkNotNull(value, "value");
        this.value = value;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        StepFilter other = (StepFilter) o;
        return 
            java.util.Objects.deepEquals(this.children, other.children) &&
            java.util.Objects.deepEquals(this.isNegated, other.isNegated) &&
            java.util.Objects.deepEquals(this.type, other.type) &&
            java.util.Objects.deepEquals(this.value, other.value);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            children,
            isNegated,
            type,
            value);
    }
    
    @Override
    public String toString() {
        return Utils.toString(StepFilter.class,
                "children", children,
                "isNegated", isNegated,
                "type", type,
                "value", value);
    }
    
    public final static class Builder {
 
        private java.util.List<FieldFilterPart> children;
 
        private Boolean isNegated;
 
        private StepFilterType type;
 
        private Value value;  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder children(java.util.List<FieldFilterPart> children) {
            Utils.checkNotNull(children, "children");
            this.children = children;
            return this;
        }

        public Builder isNegated(boolean isNegated) {
            Utils.checkNotNull(isNegated, "isNegated");
            this.isNegated = isNegated;
            return this;
        }

        public Builder type(StepFilterType type) {
            Utils.checkNotNull(type, "type");
            this.type = type;
            return this;
        }

        public Builder value(Value value) {
            Utils.checkNotNull(value, "value");
            this.value = value;
            return this;
        }
        
        public StepFilter build() {
            return new StepFilter(
                children,
                isNegated,
                type,
                value);
        }
    }
}

